
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.4900,  2.8717,  3.1006,  8.3880, 24.1499],
            [ 6.8132,  3.9688, 16.9341, 13.8192,  9.4416],
            [ 2.7288,  3.4715,  3.7075,  0.6899,  5.0319],
            [ 7.9088,  7.9706,  4.4977,  4.9624, 11.4973],
            [ 1.6232,  7.5209,  1.0325,  8.8287,  6.6305],
            [ 7.9088,  9.1040,  8.9553,  6.5210, 11.4973],
            [ 2.7288,  2.0941, 14.3836,  9.8411,  5.0319],
            [ 6.8132,  4.8485,  7.6628,  1.6232,  9.4416]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7057,  0.7576, -0.7892,  1.0733, -0.8128,  0.7689, -1.8158,  1.6593],
            [ 0.0864,  0.4506, -0.6053, -1.5158,  1.7402, -0.3953, -1.9405,  0.1023],
            [ 0.9126,  0.1049, -0.3221,  0.1229,  1.6387,  0.2576, -0.5785,  0.9448],
            [ 0.0532,  1.2172, -0.3273,  0.1613,  0.1768,  0.0390, -0.0808,  1.9388],
            [-0.4123,  0.9004, -1.1778,  0.9831, -0.5376, -1.6940,  1.7122,  0.4200],
            [-1.1243,  0.4056, -0.0800,  0.3866,  0.6816,  0.6239,  0.2595,  1.4964],
            [-0.1017,  2.4373,  0.0549, -0.2631, -2.4319,  1.2748, -1.3612, -1.0859],
            [-1.7175, -0.2488,  0.2210,  0.4396, -0.7060,  1.1665,  0.7615, -0.1096]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2358, -0.2854,  1.3197],
            [ 0.9867, -0.1335, -0.2577],
            [-0.2024,  0.9786,  1.2493]], requires_grad=True), Parameter containing:
    tensor([[-0.1401]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.2701e+00,  2.9849e+00,  2.2863e-01,  1.6649e-01, -1.8672e+00,
             -3.0803e+00, -1.9974e+00,  4.7756e+00],
            [-2.0433e-01, -9.2875e-01, -4.9388e+00, -4.4967e+00, -3.4269e+00,
              1.7195e+00,  6.8784e-01, -3.7867e+00],
            [ 1.0602e+00,  1.8865e+00,  9.7033e-01, -3.7710e+00, -3.7340e+00,
             -5.3965e-01,  1.4278e+00,  2.7680e+00],
            [-3.9137e+00, -3.1894e+00, -5.7718e+00, -1.3515e+00,  3.2973e+00,
              3.9538e+00,  3.2735e-02,  1.6205e+00],
            [ 4.9720e-01, -1.7894e+00,  3.1710e+00,  1.6192e+00, -2.3273e+00,
              4.6667e+00, -1.4020e+00, -4.8982e+00],
            [-2.2209e+00, -2.5188e+00, -5.8532e+00,  8.2812e-01,  8.4504e+00,
              2.5619e+00, -4.9698e+00,  3.0642e+00],
            [-3.1350e-03,  6.3357e-01,  6.6185e+00,  4.8834e-01, -6.3877e+00,
              3.1281e+00, -3.3500e+00, -2.9011e+00],
            [ 6.3646e-01,  4.5346e-01,  3.4128e-01,  4.3304e+00, -4.7997e-01,
             -1.5485e+00, -5.1321e-02,  3.3076e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.2965e+00,  8.7369e-01, -8.0164e-01, -1.2700e+00,  2.8820e+00,
             -1.2866e+00, -6.9797e-01,  9.0469e-01,  4.6596e-01, -2.3048e-01],
            [ 8.7789e-01, -1.2883e+00,  3.5737e+00,  4.8762e-01, -3.2274e+00,
             -1.6678e+00,  9.6328e-01,  1.0725e+00, -1.6887e-01,  4.8759e-01],
            [-1.1425e+00,  2.3024e-01, -7.6904e-01,  2.5053e-01,  4.4485e+00,
              2.3263e+00,  6.9471e-02,  6.9520e-01, -1.3098e+00,  2.5638e-01],
            [-6.8193e-02,  8.7245e-01,  4.0360e-01, -1.2003e+00, -4.4473e+00,
              6.2080e-01,  3.1495e+00,  2.2891e-01,  1.7030e+00,  1.0344e+00],
            [-2.2915e-01,  1.1616e+00,  2.8449e+00, -7.5740e-01,  5.0015e+00,
             -1.2798e+00, -7.7785e-01,  1.0359e+00, -2.6615e+00,  6.4183e-01],
            [-1.3028e+00,  1.3013e+00,  2.7388e+00, -3.0089e+00, -8.3025e-02,
              7.7424e+00,  1.5041e+00, -1.9146e+00,  1.4604e+00,  2.9693e-01],
            [ 7.2223e-01, -2.6075e+00, -9.2474e-01,  4.1275e+00,  1.8831e+00,
             -4.0105e+00, -2.9820e-01, -5.0813e-01,  3.8082e-02,  8.0419e-01],
            [-2.5578e-01,  3.3580e+00,  1.7254e+00, -3.3969e+00,  2.4426e+00,
              2.0733e+00, -1.7839e+00, -5.4632e+00, -7.3912e-01,  2.1742e+00],
            [ 2.4019e-01, -2.9924e-01,  1.3842e+00,  2.4475e+00,  2.4422e-03,
             -1.1437e+00,  9.8302e-01,  2.2495e+00,  9.7246e-01, -3.4238e-02],
            [-6.8224e-02,  4.2081e-01,  2.3435e-02, -6.7007e-01, -7.1265e-01,
             -5.6237e-01, -6.6248e-01, -2.3799e-01,  2.8394e+00,  2.4552e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.096 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
