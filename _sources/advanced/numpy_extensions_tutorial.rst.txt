
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.9626,  7.1152, 16.8513,  7.2439,  7.3642],
            [ 8.2138,  4.5534,  6.9618,  9.7248,  2.4595],
            [ 8.8118,  8.1151, 10.1539, 10.6445,  9.9953],
            [ 9.1135,  9.3086, 14.1723, 14.3411,  6.2244],
            [ 9.5334, 12.8543,  5.1855,  3.2047,  3.6269],
            [ 9.1135,  7.9484,  8.3985,  6.6002,  6.2244],
            [ 8.8118,  8.6561, 11.4128,  4.6642,  9.9953],
            [ 8.2138,  8.5755,  4.8950, 14.7733,  2.4595]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7630,  1.1288,  1.7997,  0.0787,  0.7902, -1.0383,  0.7172,  0.1903],
            [ 1.0960,  1.5524, -1.6653, -1.3285, -0.9157,  0.1771, -0.6026, -0.2545],
            [-0.8035,  0.9284,  0.7119, -0.1217, -0.1704,  1.1139,  1.4642,  1.0932],
            [-0.0076,  0.4122,  1.0243,  0.4483, -2.5652, -0.4538, -0.5846, -2.4624],
            [ 0.3482, -2.4861, -1.0713, -1.0848, -0.1290,  0.9249, -1.3520, -0.5124],
            [-0.4548,  0.0249, -0.4030, -0.6596, -0.1362, -0.9398,  0.8333,  1.1614],
            [-1.3690,  1.7631, -1.8301,  0.4258, -1.6210,  1.6961,  2.1728, -0.7094],
            [-0.7959,  1.9081, -0.3506, -1.9849, -0.5185, -0.1719,  0.9881, -0.6186]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5119,  0.5589,  0.8375],
            [-0.2213, -0.9314,  0.0816],
            [ 0.0947,  1.3476,  1.2495]], requires_grad=True), Parameter containing:
    tensor([[-0.0278]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.8458e-01,  1.5700e-01,  2.4797e+00, -8.0004e-02, -5.9921e-01,
             -3.8195e+00, -2.7465e+00, -9.9003e-01],
            [ 2.1885e+00,  2.4572e+00,  6.9602e-01,  8.4401e-01, -2.3377e-01,
             -1.8647e-01,  6.1981e-01,  4.2799e-01],
            [-4.0558e+00,  9.3415e-01,  2.6460e+00, -9.6258e-02, -5.6976e+00,
             -4.8273e+00, -3.8267e+00, -1.3454e+00],
            [ 5.7931e+00,  2.8452e+00,  1.0246e+00,  4.6778e-01,  1.9861e+00,
             -1.6237e-01, -9.3729e-02,  4.6108e-02],
            [-4.2403e-01,  9.9812e-01,  1.7543e+00, -1.0353e+00,  2.1560e-01,
             -4.1224e+00, -2.0620e+00, -1.1753e+00],
            [ 2.6004e+00,  5.1941e-01, -7.0236e-01, -5.9747e-01,  3.7356e-03,
             -1.0759e+00,  1.7771e+00,  1.2718e-01],
            [-4.0346e+00,  6.2852e-01, -2.9623e+00, -3.6837e-01, -8.5634e-01,
             -1.9454e+00, -1.8124e+00,  9.2146e-01],
            [ 7.2349e-03,  2.3366e+00,  7.4185e-01,  3.2455e+00,  2.2420e+00,
              5.0885e+00,  3.2833e+00, -3.4065e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7492,  0.3963,  1.3166,  0.2592,  0.9264, -0.2118, -0.3925,  0.1949,
              1.1880,  0.2689],
            [ 0.2300,  0.9139,  2.7020,  0.8312, -1.0566,  1.8068,  1.3732,  0.5032,
              0.4829,  0.5171],
            [-0.0386,  1.0860, -1.3006,  1.6534,  0.1242, -0.8682, -4.5422, -0.5086,
             -0.9615,  0.5095],
            [-0.6032,  0.9407,  2.5347,  4.2478, -0.1701,  2.2911,  3.0264,  5.7606,
              1.4790,  0.7663],
            [ 0.7728,  1.2358,  1.6985,  0.9197, -4.3191, -1.5603,  0.0889, -2.0960,
             -3.7176, -0.2442],
            [-0.2574, -2.2899,  0.5867, -0.8602, -0.3445,  4.8258,  0.5513,  2.7012,
              2.8109,  1.0139],
            [ 0.0164,  1.0385, -0.3307, -1.6873,  0.6474,  1.9471,  0.8973,  1.6561,
             -2.8665,  0.3067],
            [-0.5814, -0.4662, -1.6220, -0.3630,  0.7711, -0.3706, -2.2211,  4.8757,
              3.0601,  1.5990],
            [ 0.2570,  1.0260,  0.1964,  1.1292,  0.2869,  2.0875,  3.0752, -0.8454,
             -1.5176,  1.0647],
            [-0.1132, -1.6127, -1.6073, -1.1140, -0.8295, -1.2025, -0.8227,  1.7642,
              1.2628,  0.0457]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.038 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
