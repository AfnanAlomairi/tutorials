
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[18.2503,  8.9188,  4.7417,  6.0677,  6.3670],
            [ 4.6535,  3.7910, 11.1074,  8.3685,  5.2149],
            [ 3.2887,  5.4675,  6.0782,  3.4553,  8.6839],
            [ 6.2381,  7.4715,  2.9484,  6.1136,  9.7225],
            [ 4.0211,  8.9783, 10.0398, 15.2358,  5.3398],
            [ 6.2381,  9.9998,  6.3478,  4.5360,  9.7225],
            [ 3.2887,  2.0627,  1.2498,  9.9619,  8.6839],
            [ 4.6535,  1.1815,  5.3675, 14.9519,  5.2149]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4545,  0.5951,  0.4160, -1.6367,  0.8824,  0.7433, -0.9452,  1.7353],
            [-0.6513,  1.4699,  1.3701, -0.2260,  1.3231, -0.1997, -1.6457, -0.3114],
            [ 2.1538, -0.9216,  0.7708,  0.2932, -0.4746, -0.9024,  0.2420,  1.1116],
            [ 0.3951,  0.6714,  0.2018, -1.0946,  1.7241, -0.9793,  0.3762, -0.3168],
            [ 0.4870, -0.3345, -0.5286,  2.0886, -0.7411, -0.1234, -0.6598,  0.3809],
            [ 0.8972,  0.4990,  0.4673,  0.6254,  1.5163, -0.3551,  1.7657,  0.4897],
            [ 1.4576,  0.8096,  0.2539,  1.0381, -0.6405, -0.6172,  0.6859, -0.9594],
            [-1.1013,  2.3437,  0.2204,  0.1954,  0.8397,  0.3935,  0.7957, -0.5637]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0482, -0.3637, -1.2620],
            [ 1.0954,  0.8814,  0.2367],
            [ 0.4484, -0.2125,  1.1917]], requires_grad=True), Parameter containing:
    tensor([[0.1149]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.2820,  3.7995,  0.6339,  0.9387,  0.7239, -0.7018, -0.4586, -2.4659],
            [-1.4826,  1.9321,  6.3129, -0.2721,  0.0299,  3.7751,  3.2306,  1.4763],
            [ 0.4226, -1.6550, -2.1891,  0.6886, -1.9404, -3.6296, -3.3977, -0.3890],
            [ 4.6066,  7.4695,  2.9511,  1.0699,  6.7513,  4.6584,  2.3661,  1.8152],
            [-3.3709, -1.1723,  1.5504,  0.3094,  2.0836,  3.3065,  2.7032,  0.8317],
            [ 0.9856,  3.0945, -2.6145,  0.9055, -2.4228, -0.6756,  1.4930, -0.5808],
            [-0.2029,  1.2263, -0.6735,  2.2269, -2.5323, -1.0135, -3.6963,  3.4083],
            [ 1.5970, -0.2762,  1.4903,  0.4329,  3.9420,  4.2069, -0.1923,  0.0345]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7213e-03,  9.6600e-03,  2.3980e-01,  1.4420e+00,  2.9770e+00,
              2.5620e-01,  1.8020e+00, -4.9571e-01, -1.1633e+00, -6.8227e-01],
            [-8.9700e-02, -1.4507e+00, -6.3536e+00, -1.9305e+00, -2.1397e+00,
             -9.0768e-01,  2.0882e-01,  2.1756e+00,  1.4410e+00, -2.0487e+00],
            [ 2.9437e+00,  2.1781e+00,  4.9413e-01,  1.7218e+00, -3.3135e+00,
              1.0052e+00, -1.2641e+00,  1.3809e+00,  5.5701e-01, -4.8751e-01],
            [ 1.0678e+00, -2.5954e+00,  1.0622e+00, -6.9595e-01, -2.3881e+00,
             -5.6398e+00, -7.4340e-01, -1.7205e-01, -1.7677e+00,  1.4621e+00],
            [ 7.9564e-01, -3.4851e-01, -5.4239e-01, -1.0203e+00,  2.9517e+00,
              5.0533e+00,  1.6596e+00,  2.4438e+00,  1.0938e+00,  2.8290e+00],
            [ 1.0763e+00,  2.6926e+00,  3.6425e+00, -2.9328e-01,  1.8651e-01,
              6.1389e-01,  8.0104e-01,  1.1097e+00,  9.0255e-01, -3.9306e-01],
            [-2.7227e-01,  3.8190e-01, -1.7254e+00,  1.7447e+00,  7.8386e-01,
              2.1484e-01,  5.6272e-01, -1.9147e+00,  1.1043e+00,  2.4430e-01],
            [ 6.0406e-03,  4.1565e-01, -7.2535e-01,  6.5412e-01, -1.8349e+00,
              2.1012e+00, -2.9380e+00,  2.2355e+00,  4.8852e-01,  2.3898e-01],
            [ 3.4167e-01,  3.6893e-01, -1.1223e+00, -2.8547e+00,  2.6221e+00,
             -7.5160e-02, -2.4333e+00, -1.4224e+00,  7.5772e-01, -1.0422e+00],
            [ 9.9492e-02,  2.0155e-02, -5.1501e-01,  2.2126e-01, -7.0857e-01,
             -1.6307e+00,  2.2610e+00, -1.2495e-01, -2.3910e+00,  4.5323e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.996 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
