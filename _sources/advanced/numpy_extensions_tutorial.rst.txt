
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[12.7241,  4.0654,  4.8051,  4.9890, 23.5319],
            [ 9.2731, 12.3883,  2.8717,  5.5465,  5.1278],
            [ 4.1386, 12.2905,  6.6768,  5.9109, 11.8450],
            [ 6.8887,  9.3266,  4.4157,  2.4775,  2.9253],
            [15.4351,  7.0244, 10.5565, 10.0119,  4.0797],
            [ 6.8887,  6.5985, 10.5116,  8.8027,  2.9253],
            [ 4.1386,  6.5919,  8.0386,  3.5189, 11.8450],
            [ 9.2731,  7.8022, 13.9373, 14.5929,  5.1278]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0547, -1.2000,  1.9238, -1.4514,  3.0688,  0.2296,  0.7692,  1.4793],
            [ 1.0456, -1.4861,  0.6127, -1.2463,  0.0220, -0.2292,  0.0404, -0.8615],
            [ 1.2522, -0.8233, -1.3901, -0.3907,  0.2959,  0.9757,  1.0727,  0.9828],
            [ 0.3072,  0.1790, -0.5159, -1.1465,  0.0240,  0.7235, -1.1876, -2.3024],
            [ 0.2572,  0.6006,  2.1790,  1.3138,  0.7249, -0.4233,  0.3837, -0.8105],
            [ 1.9968,  1.0574,  0.2061, -0.7772, -0.8598, -1.5073,  1.7097, -0.6028],
            [-0.4463,  0.3274,  1.4871,  0.0381, -0.1563, -0.2493,  0.4266,  1.5780],
            [ 2.1131, -0.4997, -0.3259,  0.4784,  1.7642, -0.4837, -0.7277,  1.1236]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7452,  0.0533, -1.3551],
            [-0.1897, -1.2806,  0.8828],
            [-1.0826,  2.5633, -0.0343]], requires_grad=True), Parameter containing:
    tensor([[-0.9384]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0309,  5.5902, -1.9061,  4.1748, -2.1867, -0.5518, -4.4328, -3.9240],
            [-1.0165, -4.8554, -0.5003, -3.3637,  0.4870, -5.7211, -4.4509,  7.9675],
            [-6.6241,  2.9186, -2.4632,  4.8147,  0.0947, -2.4297,  6.0452, -2.7174],
            [ 0.4600, -1.5066, -0.2887, -3.9841, -4.5681,  2.4141,  0.3719, -6.9102],
            [ 0.1773, -5.5935, -3.9122, -0.7320,  4.5875, -0.4482, -8.9774,  6.4778],
            [ 3.4798,  0.6073,  0.6309,  4.5200,  0.3778, -4.1052,  4.3238,  0.6508],
            [ 0.5148, -2.5481, -1.2280, -2.2351,  1.5200, -3.2249, -4.5578, -1.8847],
            [-6.6505, -0.8281,  2.5699, -5.7208, -3.0425,  1.1013,  1.1281, -1.6001]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-7.6677e-01, -2.2499e-01,  2.6225e+00,  1.6990e+00, -2.5993e+00,
             -1.8713e+00,  8.0976e-01,  7.4593e-02,  1.1414e-01, -1.8768e+00],
            [ 1.1102e+00,  4.5931e-01, -1.9341e+00, -1.9104e+00, -2.3618e+00,
              3.1557e+00, -1.2655e+00,  2.2413e+00, -1.1738e+00,  8.1450e-01],
            [ 2.1792e-01, -3.4260e+00,  1.3355e+00,  1.1304e+00,  8.8313e+00,
             -4.8711e+00,  2.1628e+00, -4.7317e+00,  2.1258e+00,  2.8483e+00],
            [-1.9474e+00,  4.7146e+00, -3.7086e+00,  5.9016e+00, -9.1521e+00,
              4.4503e-01,  1.7067e+00, -8.2491e-01,  1.0914e+00, -1.4152e+00],
            [ 1.6485e+00, -5.5247e-01, -2.2071e-01, -5.8931e+00,  6.4325e+00,
              4.1167e+00, -4.9711e-02,  4.1446e-01, -1.6517e+00,  1.4784e+00],
            [ 6.9336e-01, -2.5916e+00, -3.6677e+00,  5.3164e+00,  2.6342e+00,
             -5.1817e+00, -3.4957e+00,  5.6258e+00, -9.3529e-02,  5.3805e-01],
            [-8.9434e-01,  1.1691e+00,  3.3850e+00, -3.8577e+00,  2.9292e-01,
             -2.5090e+00,  3.0327e+00, -6.4883e-01, -1.2993e+00, -1.2146e+00],
            [ 5.1123e-01, -1.4051e+00,  1.1873e-01,  1.6200e+00,  5.2410e-01,
              3.6552e+00, -1.7922e+00,  1.6129e+00, -2.5967e+00, -4.1019e-01],
            [ 4.0488e-01, -4.2000e-01,  1.7881e+00, -2.2960e+00, -2.9921e-01,
             -3.3323e+00, -4.6904e-01, -2.3262e-01, -6.1364e-01,  3.8325e-01],
            [ 4.6734e-02,  1.2167e+00, -3.1961e+00, -8.3130e-03,  3.6362e-01,
              4.1681e-01, -6.7512e-02, -1.8676e+00,  1.1480e+00, -1.5094e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.042 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
