
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.9976,  9.0186, 11.7819,  6.3663,  4.9161],
            [ 3.2423,  3.6214, 11.2305,  6.5879,  7.9521],
            [ 6.4335,  8.8428,  8.7697,  6.3187, 10.0742],
            [ 7.8828,  4.8313,  6.7889,  1.4277, 10.2406],
            [ 8.3103,  8.8341,  2.5782, 11.3532,  1.9083],
            [ 7.8828,  8.3595,  5.6572, 15.8924, 10.2406],
            [ 6.4335,  7.2308,  4.7293, 12.2603, 10.0742],
            [ 3.2423,  5.4641, 12.6914,  3.7020,  7.9521]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5537,  0.4825,  0.3474, -0.3853, -1.1359,  0.8902, -0.9188, -0.6287],
            [ 2.0062,  0.5491, -0.0208,  1.3240, -0.8288,  0.2339, -0.2005, -0.8155],
            [ 0.2323,  2.1394,  0.4394, -1.7012,  0.8811,  0.2590,  0.5692,  0.8170],
            [ 0.5676, -0.6041,  1.8745, -3.2509, -0.2626,  1.7411, -0.8898, -1.2745],
            [-0.3668,  1.5888, -0.5940, -0.3578, -0.1301,  0.4356,  1.3889,  0.2958],
            [-0.4819, -0.1745,  0.6349, -0.0557,  0.9704, -0.3090, -0.9552, -1.2360],
            [ 1.1553, -0.8609,  0.5452, -1.0654,  0.0537, -0.7796,  1.9160,  1.1956],
            [-0.5124, -0.0143,  0.6705, -0.1137, -1.7912, -0.4382, -0.1530,  1.6542]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1073, -0.3214,  1.1433],
            [ 1.2078,  0.3149,  0.7694],
            [ 0.1940,  2.0430, -1.2318]], requires_grad=True), Parameter containing:
    tensor([[-0.1334]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1958, -0.5528,  0.5292, -1.9655, -2.1345,  3.0898,  3.6217, -0.3368],
            [-5.8135,  4.0320,  0.3766, -1.2409, -1.8666,  0.6476,  0.9684, -1.7992],
            [ 0.1815,  5.4158,  1.5991,  0.9992,  4.3609, -6.0923, -5.5417, -2.6728],
            [ 4.0611,  0.1936, -3.6350,  2.4516, -2.7171,  1.0416,  2.3417, -1.1395],
            [-4.1654, -0.1606, -4.1330,  1.6158,  1.3405,  1.6538,  2.7208,  3.4531],
            [-4.3241, -8.5303,  6.7044, -2.8870,  2.1851, -3.1227, -2.2116, -4.6598],
            [ 2.5988, -3.1670, -3.9828,  7.6035, -4.9838,  0.7064, -6.9990,  0.5101],
            [-1.8789,  8.3064,  3.8037, -4.5077, -2.2388, -4.3433,  0.4205, -1.3599]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5287, -1.8533,  1.7512,  3.1497, -1.2951, -1.5446,  1.1757,  1.1078,
             -1.6378,  0.0435],
            [ 2.1925,  1.7532, -3.3370, -0.4453, -1.8730,  0.0500, -0.7755,  2.4565,
             -1.2494, -1.5594],
            [-3.1930,  2.2047,  3.1488, -4.5102,  2.8315,  0.4772, -0.4644, -2.3846,
              1.5026, -2.3420],
            [ 1.3032, -2.5409,  5.9072, -2.5313, -1.2020,  0.2807,  0.5492, -0.2732,
             -2.4964,  0.6067],
            [ 1.3571,  2.6371, -5.9470,  0.4740,  0.1195,  2.7221,  2.8160, -0.2119,
             -2.8481,  0.7607],
            [-0.4862, -0.9222, -1.0943, -1.0991, -1.8402,  2.4064,  0.9559, -3.8663,
              0.6068, -0.4992],
            [-1.9626, -1.3374, -1.6614,  0.2988,  1.4599, -3.1581,  0.4189, -0.2171,
              1.1297, -1.5069],
            [ 1.5108, -2.2006,  0.9828, -2.2227,  2.5455, -2.9053, -5.4166,  2.4588,
             -0.9957, -0.2322],
            [-0.2188,  1.7994, -5.0820, -0.1192, -0.2133, -4.2764,  4.5073,  1.3189,
             -2.1370,  1.7971],
            [-0.0670, -0.6966,  0.3383, -2.1630, -1.2615,  1.2858,  2.2061,  1.4895,
             -1.1495, -0.2255]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.109 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
