
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.6097,  3.3725, 11.3130,  3.8482,  4.5470],
            [12.7593,  7.2865,  3.9506,  8.3454, 17.7843],
            [ 3.8280,  5.3000,  1.6330,  7.6559,  8.6813],
            [ 5.7671,  5.5543,  6.1147,  3.5841,  8.8502],
            [ 1.4856,  4.1029,  4.1269,  2.8474,  5.4290],
            [ 5.7671, 10.5123,  8.1553,  8.1055,  8.8502],
            [ 3.8280,  9.6520, 10.9970, 11.5093,  8.6813],
            [12.7593, 28.0116,  9.6495,  6.0844, 17.7843]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0955, -1.1291, -1.3165, -1.5893, -2.2212, -0.9087,  1.3189,  0.5623],
            [ 2.1030, -0.6663,  0.4764,  0.0151, -1.3830, -2.1461,  0.1149,  0.2698],
            [ 0.3208,  1.0574,  0.3656,  0.5035,  0.0302,  0.1570, -0.7518, -0.8281],
            [-0.6832,  0.3631,  0.3416,  1.8971, -0.1377, -0.3475, -0.1934, -1.7887],
            [-2.8982,  1.5450,  1.8241,  1.3788,  0.9431,  1.9432, -0.1051, -1.0927],
            [-1.7535, -0.4945,  0.4079,  0.6088, -1.5008,  2.6498, -0.5878,  1.6924],
            [-0.2907, -1.3451, -0.3523, -0.1464, -0.7637,  0.4453,  0.2174,  0.6601],
            [-0.6806, -0.0117, -0.0978, -1.4057,  0.5745, -1.3053,  1.1962, -1.5748]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4114, -0.7971,  0.3359],
            [ 0.3760, -1.8408, -0.1826],
            [ 0.5848, -0.4512, -1.7910]], requires_grad=True), Parameter containing:
    tensor([[0.2243]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6281e+00,  4.8210e-03, -1.5352e-01, -1.4237e+00, -5.9719e-01,
              1.0543e-01, -9.9551e-01, -1.1528e-02],
            [ 1.5599e+00, -4.7424e+00, -8.4474e-01, -1.9646e+00,  1.8093e+00,
             -5.6180e+00,  9.2704e-01, -4.5230e-01],
            [ 2.4840e+00,  7.5043e-01,  5.2443e-01, -2.5674e+00,  5.2873e+00,
             -3.6020e+00, -5.2396e-01,  2.5058e+00],
            [ 1.6922e+00,  2.9765e+00, -1.4894e+00,  1.4201e+00, -1.6234e+00,
              8.0226e+00, -1.3626e+00,  3.1522e+00],
            [-2.9723e+00, -2.3902e+00,  2.8009e+00, -6.1053e-01, -5.6439e+00,
              4.5805e+00,  4.7269e+00,  3.8080e-01],
            [ 6.0369e-01, -5.6450e+00,  3.8433e+00, -6.7677e-01, -3.2785e-01,
             -6.3398e+00, -3.0863e-01,  6.2995e+00],
            [ 4.1122e+00, -3.4003e-01,  3.9131e+00,  1.3748e+00,  3.4381e+00,
             -6.9062e-01, -8.7669e+00, -1.4773e-01],
            [ 1.2311e+00, -4.9263e-01,  5.7008e+00,  1.5274e+00,  1.2418e+00,
              6.1179e+00, -3.6784e+00, -7.3419e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1323e-01, -5.0666e-01,  1.5348e+00, -5.3636e-01, -1.2971e+00,
              1.2732e+00, -7.3330e-01,  1.2132e+00, -7.9963e-01,  1.2409e-01],
            [ 2.1170e-01, -1.7747e+00,  5.3179e+00, -6.7239e-01, -2.0828e+00,
              2.1172e+00, -1.3211e+00,  3.5374e+00,  7.3889e-01, -6.5190e-01],
            [ 3.3255e-01, -4.3969e+00,  7.6992e+00,  3.3953e+00,  1.0015e+00,
             -2.1879e+00, -1.1980e+00,  1.9087e-01,  6.5264e+00, -3.9890e-01],
            [ 2.6555e-01, -3.4499e+00,  4.5598e+00,  9.8102e-01,  4.6007e+00,
              3.1902e+00,  4.1604e-01, -6.8308e+00,  3.1782e+00,  2.4813e+00],
            [-6.8656e-01,  6.2638e-01,  4.2340e+00,  1.3401e+00, -4.2905e+00,
             -5.0218e-01,  3.2988e+00,  1.8290e+00,  2.3121e+00,  2.4451e-01],
            [-1.1745e+00,  1.8547e+00,  4.5394e+00,  5.7692e+00, -4.1457e+00,
             -8.4258e-01,  1.3284e+00, -3.9752e+00,  6.3617e+00,  3.7279e+00],
            [-1.2670e+00,  9.1979e-01,  3.1770e+00,  2.4114e+00, -1.8866e+00,
              1.0302e+00,  7.8058e+00, -1.4107e+00, -1.3146e+00,  2.3818e+00],
            [-6.8669e-01,  1.8889e+00,  5.3368e-01,  2.0773e+00, -7.8712e-01,
             -1.6219e+00,  7.8495e+00,  5.4232e+00, -4.0328e+00, -3.3306e-03],
            [-7.2141e-01,  1.8451e+00,  5.7850e-01, -1.2488e+00, -2.6191e-01,
             -3.3728e-01,  1.3003e-02,  5.1215e+00,  2.0078e+00, -8.5141e-01],
            [-4.5999e-01,  6.7687e-01,  1.7004e+00, -1.0833e+00, -1.6715e+00,
             -7.4659e-01, -1.4798e+00, -1.1149e+00,  1.5860e+00,  6.7367e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.280 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
