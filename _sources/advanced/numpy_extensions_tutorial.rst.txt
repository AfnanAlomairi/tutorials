
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.5814,  5.0540,  9.3628,  8.8271,  3.1323],
            [ 7.0279,  8.5717,  5.8680,  5.5757,  7.5843],
            [ 6.3011,  5.9371,  6.7575,  0.9212,  1.2970],
            [ 7.1340,  9.9619,  1.6260,  5.9292, 13.6542],
            [12.2020,  5.3036,  9.2732,  0.6971, 10.5696],
            [ 7.1340,  3.3194,  9.1510,  5.4880, 13.6542],
            [ 6.3011,  3.8074,  5.5544,  2.4793,  1.2970],
            [ 7.0279,  7.1030,  0.6107,  5.1117,  7.5843]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5238, -0.1011,  0.6345,  0.7155,  0.7221, -0.0929, -0.5480,  0.7741],
            [-0.8565,  0.8830,  0.0424,  0.9834,  0.9867,  0.8403, -0.6517,  0.8086],
            [-0.7147, -0.5616, -0.8895, -0.6617, -1.0934, -0.4885, -0.1955, -0.1487],
            [ 0.4223, -0.2532, -0.5579, -0.2066,  0.3314, -0.4382,  0.3446,  2.1949],
            [-1.0131, -0.3731, -0.7432, -0.0547, -0.1826,  1.3482,  0.0485,  0.0123],
            [ 1.7253, -0.4539,  1.9096,  0.3894,  1.4337, -0.7319, -0.0998, -0.1980],
            [-0.1949,  0.2429, -0.2638, -0.5020,  1.0139,  1.6908, -1.4346,  0.7208],
            [ 0.3062, -1.8635,  1.2702,  1.6511,  0.6577, -0.5395, -0.2088,  0.2706]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9362,  0.4900, -0.7014],
            [ 0.6499, -0.8051, -2.4180],
            [ 1.1113,  0.0386,  0.1413]], requires_grad=True), Parameter containing:
    tensor([[0.9411]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1681,  5.0500,  0.0462,  2.8501,  0.1626,  1.4148, -9.5986, -4.6127],
            [ 2.5130,  0.0916, -3.8938,  6.3854,  0.7717,  5.2457, -1.2281,  0.6499],
            [-1.4875, -1.8517, -0.7982, -0.4160, -5.1156, -1.2056,  2.0151,  3.8770],
            [ 7.2697,  3.8130, -4.0407,  1.3671, -1.9429,  3.3428, -0.3802,  3.2691],
            [ 0.0839,  9.1887,  1.1528,  6.7735, -4.3391,  0.5165, -1.5480,  3.2501],
            [-3.2517, -2.2877, -2.4002,  1.8271, -0.1558, -2.0338,  1.0135, -1.4683],
            [ 5.8950, -1.8498,  0.8421,  0.2623,  2.8328,  1.2831,  2.3706,  1.5287],
            [ 4.2141, 10.7223,  7.9401,  1.7137,  6.6681, -0.3908,  2.0254,  8.1192]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.0274,   0.5298,  -0.9471,  -4.3392,  -2.1865,  -1.8818,  -2.8562,
              -0.2228,  -0.6198,  -0.1378],
            [  5.7093,  -1.3932,   0.1874,  -0.5986,  -0.7079,  -7.0256,  -2.6156,
              -5.1002,  -1.4355,  -1.7427],
            [ -3.1002,   0.2449,  10.6728,  -0.0749,  -3.9631,  -2.0620,  -0.1813,
               8.0634,  -2.0070,  -3.0441],
            [ -2.4552,  -1.4910,  -1.8998,   0.0726,   0.4989,  -3.9206,  -1.3827,
              -0.6770,  -0.5357,   4.3023],
            [ -1.5832,   3.8109,  -3.5126,   4.8207,   2.3931,  -0.7693,  -1.6742,
              -0.8904,   1.0974,  -1.8423],
            [ -0.6765,   2.7842,  -8.3551,   4.5821,   2.7735,   8.2056,   2.7235,
              -1.4822,  -2.3573,  -1.1177],
            [  1.0586,   0.2849,   4.3412,  -4.5547, -10.0544,   5.1146,   7.0040,
               6.3867,  -3.9894,  -1.9839],
            [ -1.4613,  -0.7106,   3.0692,   8.9234,  -2.1224,  -3.4292,  -3.1272,
               2.1240,   0.4141,   3.1655],
            [  1.0727,  -2.8556,  -4.0911,   2.3179,   5.1684,   4.3606,  -0.0555,
              -0.5486,  -2.5445,  -1.8224],
            [  1.3140,  -0.8207,  -0.6612,  -2.9472,   0.4746,  -0.9787,   0.9773,
               0.6944,   0.1421,   0.0947]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.080 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
