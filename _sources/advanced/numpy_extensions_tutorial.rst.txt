.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.7803, 12.9617,  8.4867,  9.9511,  6.3164],
            [ 2.8168,  5.4688,  4.7372,  1.4850,  9.7526],
            [ 2.0061, 24.0692,  5.1788, 13.4985,  4.5901],
            [ 6.2915,  8.0917,  8.4119, 10.7552, 10.4728],
            [ 6.0369,  4.0119,  5.9566,  2.2941,  6.4625],
            [ 6.2915,  7.6545,  3.4459,  2.0423, 10.4728],
            [ 2.0061,  7.6785,  4.0277,  6.2811,  4.5901],
            [ 2.8168,  8.0297,  9.5305,  6.2163,  9.7526]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8114,  0.4000, -1.0468, -0.3719,  2.1326,  1.0986,  3.1292, -1.4811],
            [-0.2447,  0.8078, -0.0666, -0.7109, -0.5673, -0.6535,  1.2526, -0.4869],
            [ 0.4014,  2.8098,  0.9773, -0.5975, -1.2301, -0.1204, -0.8539,  1.2233],
            [ 0.4305, -0.9724, -0.5056, -0.5044, -0.6421, -1.1267,  0.4037,  1.5310],
            [-0.8372,  0.1726, -0.9778, -0.4535, -0.8868,  0.3002,  1.1690,  1.3881],
            [ 0.4258,  0.5202, -0.4129,  0.2047,  1.5469, -0.4716,  1.0608, -1.5399],
            [ 1.2630,  0.0106,  1.1498, -0.0291, -1.0668, -0.5764,  0.1563, -1.0325],
            [ 0.1026,  0.0705, -0.6235, -2.2308, -0.0526,  0.5258,  0.7730,  1.5282]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9717, -1.1298,  1.7910],
            [-0.8175,  0.1539, -0.3621],
            [ 0.0812,  0.1963, -0.5588]], requires_grad=True), Parameter containing:
    tensor([[-0.5649]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.6278, -2.0591,  0.1482, -0.7091, -0.4588, -2.7616, -1.0240, -2.8060],
            [ 3.3567, -4.0639,  3.1233, -1.0295,  0.9683,  0.8880, -2.6323,  2.2425],
            [ 1.4398, -3.1980, -1.2488,  2.2817, -2.2215,  0.7175,  0.0146,  2.4959],
            [-1.5734, -2.7943,  0.0920, -5.6638,  1.6155, -1.2829, -2.4724,  1.4323],
            [-3.4280,  4.2287, -4.8417,  2.1223, -0.9720,  0.1342, -1.7016, -2.3769],
            [ 1.0412, -4.5136, -1.2226, -0.5629, -3.9975, -1.6916, -0.3091, -5.2861],
            [-3.0196,  5.7010, -3.7599,  1.1537, -1.0138,  0.9985, -1.0596,  2.8417],
            [ 4.7433,  1.0228, -1.2684,  7.0835, -4.0896,  0.4190,  2.8643, -7.2028]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.8831, -2.5687,  2.3505, -2.7541, -1.1230, -1.3616, -0.0124,  0.4018,
              0.4994,  2.4945],
            [ 0.6476, -0.3770,  5.0685, -1.6703,  6.0249, -1.6122,  2.1423, -1.0047,
              1.3297,  0.0632],
            [-1.1877,  1.5813, -5.0173,  3.5790, -2.0186,  0.7991, -2.0365,  0.5876,
              0.5738, -4.0513],
            [ 0.4243,  0.3399, -2.1394,  3.1915, -1.2459, -3.8802,  3.7960, -2.8240,
              1.4061, -1.7842],
            [ 0.5118, -2.6915,  3.7449, -2.9412, -0.5795,  2.2958, -1.9011, -0.4086,
              1.9537, -0.7048],
            [-1.1389,  1.4218, -1.1690, -0.5906,  0.3642,  0.7188, -1.0680,  0.8771,
             -0.8958,  1.6801],
            [ 1.5113, -1.1987,  1.2160,  1.5103, -0.6995, -0.1180,  3.2276, -2.7447,
              0.0623, -2.0357],
            [-0.1988, -0.8318,  1.3772, -0.9164, -0.8232, -1.9522,  3.9473, -3.4103,
              3.8726, -1.1655],
            [-0.4852,  0.5267, -0.5716,  0.3579,  0.3565,  0.8225, -2.6778,  1.7489,
             -0.7028,  1.1167],
            [ 0.0563,  0.1121, -0.4842,  0.0571,  0.2566,  0.0976, -0.3900,  1.0242,
             -1.0921,  0.4742]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.072 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
