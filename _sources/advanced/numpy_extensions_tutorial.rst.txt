.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0024,  8.4954,  3.9194,  8.6694, 11.9053],
            [ 2.3015,  8.6814,  4.3270, 15.4686,  4.7084],
            [ 2.6428,  6.9737,  9.2833,  4.0776,  9.3420],
            [12.8328,  2.5252, 12.1059,  3.9368,  2.6232],
            [ 7.2219,  3.5038,  1.1854,  3.7108,  2.9903],
            [12.8328,  9.2833,  9.7105,  7.9844,  2.6232],
            [ 2.6428,  7.3754, 10.4767,  8.6216,  9.3420],
            [ 2.3015,  5.4920,  5.3989,  5.7047,  4.7084]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1383,  0.5244, -0.8670, -0.5249,  0.6540, -0.1798, -0.0909, -0.4390],
            [-1.3557,  0.7430,  1.2783, -0.1710,  1.1259, -0.5280,  2.0128,  1.1455],
            [-2.2237,  0.3067, -0.8568, -0.6933, -0.5389,  0.1438,  0.4542, -1.3330],
            [-0.4324,  0.3074, -0.3916,  0.3492,  0.5138,  0.5102, -0.5724,  1.0888],
            [-0.4312, -1.4620, -0.5547,  1.9153,  0.0583,  0.0546, -0.6076,  0.9955],
            [-0.4331, -0.8399, -1.0318, -0.8286,  0.0933,  1.4973,  0.4064, -1.2841],
            [-0.4967,  0.6630,  1.9336,  0.3016, -0.5085,  0.2156, -1.8157,  0.9295],
            [-0.9394, -0.4507,  1.2431,  0.7905, -0.2259,  0.1990, -2.2152,  1.0051]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6369, -0.0350,  0.6963],
            [-0.0085, -0.2134,  0.0880],
            [ 1.4669, -0.9613, -0.6156]], requires_grad=True), Parameter containing:
    tensor([[0.1527]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0879,  2.4891, -0.8339, -0.3002,  2.9837,  0.8496, -0.7073,  0.8681],
            [-0.5346,  1.4595, -0.6963,  0.9232, -0.9793,  0.4223,  1.0416, -1.3110],
            [ 1.9358,  2.5513, -1.8743,  3.9187, -0.8707, -1.9593, -1.6711,  1.5323],
            [ 1.8248,  2.0527,  1.1897, -1.5362, -0.6614,  0.1812,  0.4046,  3.6012],
            [-2.7038,  1.3566, -1.9967, -2.6818, -1.5856,  0.9364,  0.5859, -1.7554],
            [ 0.3627,  0.4431, -0.8115, -1.2528,  0.6341,  2.3584,  0.8005,  0.9060],
            [-3.8362, -0.1711, -0.1623, -1.4666,  0.4552,  2.4817, -0.1647, -1.8016],
            [-3.8889, -1.2016,  2.2272,  1.7078, -0.9646,  1.7024,  0.3354,  0.7393]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.4294e-01,  2.8175e-01,  9.3620e-01,  3.0022e-01, -1.0212e+00,
             -3.6907e-03, -8.9352e-01,  8.3613e-01,  7.9916e-01,  1.0547e+00],
            [-2.9379e-01,  1.0580e+00, -4.7821e-02,  1.5719e+00,  5.0264e-01,
              4.8040e-01, -8.3172e-01, -6.4984e-01, -9.6999e-01,  2.5638e-01],
            [ 7.2281e-01,  6.0868e-01, -7.9133e-02, -1.0268e+00, -3.2422e+00,
              3.3022e+00,  3.8555e+00,  3.7416e+00, -2.2007e+00, -2.4101e-01],
            [-1.6603e+00,  4.5264e+00, -2.2557e+00,  1.1428e+00,  7.5769e-02,
             -2.0940e+00,  9.5290e-02,  4.5748e-01,  6.4717e-01, -2.0014e-01],
            [-1.2759e+00,  1.8287e+00, -6.9263e-01, -1.6483e+00,  9.0904e-01,
              4.2614e+00, -2.6401e-01, -5.2107e-01, -3.0085e-01, -4.8840e-02],
            [-1.2590e+00,  5.3703e+00, -7.2196e-01,  1.8573e+00,  8.8753e-01,
             -5.2559e+00,  3.2868e-01,  9.0425e-01, -1.6116e+00,  8.8501e-01],
            [-8.2238e-01,  3.2499e-01,  9.4278e-01,  2.0501e+00,  1.2891e+00,
             -1.8536e+00,  4.6496e-01,  1.4268e+00, -1.7486e+00, -9.3727e-01],
            [ 2.9197e+00,  1.6928e+00, -2.0782e+00,  3.6768e-01,  2.8467e+00,
              1.5595e+00, -3.5235e+00,  4.0565e+00, -7.3253e-01, -8.5336e-01],
            [ 1.2910e+00, -1.0784e+00,  3.4622e-01, -1.3291e+00, -1.4079e+00,
              2.6584e+00, -8.1463e-01, -1.4901e+00,  5.8401e-01,  4.2940e-01],
            [ 1.2288e+00,  2.0511e+00, -8.6003e-01, -1.9676e+00,  2.1103e+00,
             -2.0135e-01, -5.0860e+00,  5.6904e-01,  1.4148e+00,  1.8358e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.926 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
