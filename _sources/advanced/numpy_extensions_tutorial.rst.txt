.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.1399,  7.9228, 17.0689,  7.7239,  9.7791],
            [ 5.4673,  3.2420,  4.3640, 18.9104,  9.8242],
            [ 3.3120, 13.7602,  2.2317,  8.8743,  7.9044],
            [ 5.6487,  7.6778,  4.9305,  5.3512,  8.1160],
            [ 8.0597,  4.5765, 22.0135,  5.2861, 14.4747],
            [ 5.6487, 18.4633, 13.4830,  7.6264,  8.1160],
            [ 3.3120, 13.6197, 10.7899,  8.8562,  7.9044],
            [ 5.4673,  8.0310,  4.0630, 10.1727,  9.8242]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8639,  0.2084, -0.4835, -0.8930, -1.8157, -0.2862,  3.7705,  1.9973],
            [ 0.9621, -1.6459, -0.1306,  1.0591,  0.2043,  1.4502, -0.7417, -2.1665],
            [ 0.4538, -0.3258,  0.7421,  1.4660, -2.2005,  1.6231,  0.7028,  0.4902],
            [-0.0225, -0.1020,  1.9172, -2.6037, -0.2020,  0.3941,  1.1666, -0.3272],
            [-1.1026, -0.6968, -0.0993,  0.9078, -0.9693,  0.3492,  0.7046,  1.3160],
            [-0.2658,  1.6055, -0.5439, -0.1220, -1.3479,  0.9546,  0.7971, -0.1625],
            [-2.0784,  1.7975, -0.0103,  2.4535,  0.2047, -1.6394, -0.7188, -0.4044],
            [-1.2874,  0.8843, -2.0608, -1.8217,  0.3516,  1.5777,  0.6478, -1.8779]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7401, -1.4019,  0.5406],
            [-2.0140, -1.0543,  0.6866],
            [-0.6442,  0.2006,  0.8842]], requires_grad=True), Parameter containing:
    tensor([[1.8430]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.6416, -0.5870,  4.3029,  0.5108, -2.4202,  5.3794, -1.6078,  2.9271],
            [ 1.0843, -0.8452,  3.8418,  0.8154,  4.9663,  3.8451,  1.2321,  4.4525],
            [ 4.5712,  4.8396,  2.4733,  1.6282,  5.3033,  3.1542,  3.8634,  1.8777],
            [-1.1498, -0.5550, -1.9926,  3.7680, -0.1393,  0.1085,  6.4114,  1.9168],
            [-0.2605, -2.3009,  3.4754,  5.5355, -1.8094,  5.5849,  3.4301, -1.8013],
            [-5.1905,  1.9185,  3.7855,  0.5286,  5.9188,  9.6698, -2.4793, -4.6217],
            [ 1.6796,  6.6529,  2.5216,  1.6695, 11.1274,  3.5002, -3.2641,  2.5069],
            [ 2.2290,  4.4026,  2.9065,  4.7106,  5.4870,  0.3570,  2.6901, -2.5694]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.6044,  2.1760,  1.5417, -3.5039,  1.0429,  3.4554, -3.8043,  0.4296,
              0.9980, -0.3499],
            [ 3.6473,  4.8059, -2.0037,  0.5762,  4.7472, -3.3498, -3.5920,  2.6847,
              0.4963, -0.3110],
            [ 3.0831,  5.6090, -2.1615,  0.2321, -2.1771, -0.8037, -3.7706,  3.2437,
              0.7784, -1.0453],
            [ 1.4396,  0.4947, -2.7633, -2.8610, -1.5111,  2.2803,  1.3243,  4.4354,
             -0.0831, -0.4433],
            [ 0.8672, -4.8102,  1.5849,  3.6908,  7.9854,  4.0874, -0.1620,  0.3196,
             -1.5153, -0.9878],
            [-1.5429, -3.2230,  2.7467,  4.4097,  0.2786, -1.4205,  0.1324, -4.8590,
              1.4336,  0.1071],
            [-2.9956, -1.1178,  5.5414, -2.3127,  5.7759,  2.9052, -4.5572, -4.7310,
              3.1914, -0.6513],
            [ 0.2372,  0.4870,  5.9888,  5.2202,  4.1940,  0.3410, -6.1312,  4.5219,
              0.9320, -0.1445],
            [-3.2673,  1.6783,  3.4279, -0.0870, -0.2389, -1.2176,  4.8821,  1.5664,
             -2.5047, -0.2432],
            [-1.0249,  1.0646,  1.5192, -1.2586, -0.1762,  0.4132,  1.3705, -1.4857,
             -2.3497,  0.6632]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.040 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
