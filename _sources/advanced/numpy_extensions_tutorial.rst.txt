
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[13.2965,  3.6870,  9.8572,  6.2795,  1.4961],
            [ 8.1306, 17.2739,  4.8092, 13.3974,  2.3893],
            [ 9.1265,  4.8742,  5.7479, 20.2369, 10.2301],
            [15.8663,  3.0600, 11.7310, 11.3826, 12.6999],
            [ 1.3579,  8.3294,  7.0677,  8.8489,  3.5104],
            [15.8663,  8.9827,  3.1113,  9.5891, 12.6999],
            [ 9.1265,  6.5050,  1.2152, 14.9168, 10.2301],
            [ 8.1306, 10.8099,  8.8369,  8.4537,  2.3893]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7846e+00,  1.7943e+00,  8.1440e-01,  7.5459e-01,  1.9829e+00,
              9.6976e-01,  2.8854e-01,  4.7999e-02],
            [ 1.5812e+00, -1.3474e+00,  4.1291e-01, -7.7099e-02,  2.1839e-01,
             -1.1302e+00, -1.2267e+00, -8.1722e-01],
            [-1.1282e-01, -5.1622e-01,  2.3780e+00,  1.2662e+00, -3.9058e-01,
              6.7056e-01, -9.3641e-01,  1.8804e+00],
            [-2.6430e-01,  5.2952e-01, -3.3552e-01, -1.4693e+00,  1.2240e-03,
              6.5078e-01,  5.0022e-01,  2.7003e+00],
            [-1.5341e+00, -9.2447e-01, -1.9595e+00, -1.1504e+00,  1.1697e+00,
             -1.7099e+00,  8.6681e-02,  1.2126e-01],
            [ 1.3953e+00, -9.5276e-01, -9.1310e-01, -6.6580e-02,  7.2428e-01,
              1.5428e+00,  3.9962e-01,  1.7563e+00],
            [ 3.2570e+00, -5.6595e-01, -6.6805e-01,  1.3214e+00, -4.8625e-01,
              7.7070e-01,  1.3833e+00, -2.2492e+00],
            [ 7.4652e-02,  4.6971e-01,  6.5220e-01,  1.4604e+00,  1.0421e+00,
              4.6481e-01, -1.8504e+00,  1.2013e+00]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.5794, -1.3226,  0.4805],
            [ 0.5513, -0.0384, -0.2296],
            [ 0.1302,  0.5359, -0.9795]], requires_grad=True), Parameter containing:
    tensor([[-0.9734]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.8572, -0.9398, -3.8174, -1.4959, -0.6353, -5.4352, -5.4176,  0.0555],
            [ 4.1914, -0.0200, -1.6104, -2.0559,  3.7937, -3.4978,  0.0970,  2.1066],
            [ 2.8040,  0.4205, -3.3901, -0.0763, -1.6871,  3.0554, -6.9205,  1.5823],
            [ 2.3828, -4.4861, -1.0705, -0.9644, -6.9409,  5.0416, -8.7760,  3.2366],
            [-2.5476,  0.9886, -1.5618, -0.7264, -5.4460, -1.8150, -1.7967,  0.9143],
            [ 2.3056,  1.6385, -6.1925,  4.3415, -6.4160,  3.1179, -2.9601, -1.9700],
            [-4.4697, -1.4978,  1.6998,  1.1988, -2.2749, -5.2755, -0.4624, -4.0708],
            [-4.4924, -6.0004, -2.8927, -0.1130,  0.2822, -4.2926, -3.6420, -1.1394]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7291, -0.5474,  0.1112, -0.0405,  1.0828, -2.4920,  5.1306, -5.9834,
              2.5834, -0.6720],
            [-0.6262,  0.6768, -3.5042,  3.9094, -5.2674,  4.3296,  0.6536,  1.3618,
             -1.2457,  0.7894],
            [-0.1928,  1.7294, -3.4477,  0.8947, -3.0594,  1.8573, -3.3707,  3.8832,
             -3.3562,  1.2838],
            [-2.1672,  4.1546,  0.0790, -3.6942,  5.1158, -5.2149,  4.4791,  3.1794,
             -1.9592, -0.2033],
            [ 3.3152, -1.2419,  5.4651, -3.4269,  1.1139, -1.4621,  3.8099, -1.7821,
              1.9664, -0.8452],
            [-0.8329,  1.1869,  1.8498,  0.7521,  0.9956, -3.4476, -1.4470,  3.6411,
             -1.0781, -1.2704],
            [-1.5315,  2.2067, -1.2327,  2.2004,  0.2422, -1.1113,  3.4259, -2.0268,
              0.7132, -0.0662],
            [-1.2640, -0.4829, -0.2618, -0.1050, -1.5768, -0.1161, -7.4655,  6.1760,
             -1.6431,  0.0245],
            [-0.2603, -0.4192,  0.4341, -0.1579, -0.1354, -0.2078, -1.4123,  1.4043,
             -1.4045,  0.3002],
            [-0.0449, -0.2245,  0.1000, -0.0410,  0.2677, -0.2233,  0.3300, -0.7834,
              3.0134, -1.0831]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.163 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
