
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.5230,  5.0446, 11.6689,  3.7660,  6.4968],
            [ 6.1752,  5.7118,  8.3274,  6.4714,  5.4110],
            [ 7.9826,  6.1934,  1.5018,  7.2438,  2.0317],
            [ 5.2385, 11.1782, 10.6604,  9.1487,  3.1201],
            [ 6.8554,  0.9359,  9.6533,  8.7729, 14.5971],
            [ 5.2385,  5.5686,  5.4815,  9.8005,  3.1201],
            [ 7.9826,  5.5910,  6.0613,  5.8843,  2.0317],
            [ 6.1752,  8.3803,  1.6342, 13.5540,  5.4110]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6486, -0.1127,  0.2661, -0.7929,  0.1109, -0.1501,  0.1458, -0.3697],
            [-1.8876,  1.5531,  1.2891, -0.3817, -0.0231, -0.8545,  0.4729,  1.6989],
            [-1.0820, -0.7785,  0.4911, -0.6796,  0.4223,  0.0491,  1.1627, -0.0454],
            [ 0.7868,  1.1929,  1.2207,  0.7347, -0.2060,  2.1792, -0.4567,  0.0712],
            [ 0.6401,  0.5028,  0.4484,  0.5148, -0.0667,  0.3840,  1.1610, -1.1142],
            [-1.3302, -1.8770,  0.5614, -0.1975, -0.4518,  2.2015,  0.8224, -1.3139],
            [-0.0338,  0.3754, -0.7827, -0.0450,  2.0077, -1.4596,  0.1509, -1.1350],
            [-0.6343,  0.2108,  0.7799, -0.2852, -0.3671, -0.3063,  1.2433,  1.2435]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2512,  1.1419, -0.5751],
            [-0.0853,  0.3044,  0.6340],
            [ 0.9969, -1.5940, -0.6755]], requires_grad=True), Parameter containing:
    tensor([[0.4605]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1629,  0.5527, -0.5677,  0.7493,  0.1521, -2.7512,  2.6550,  4.2704],
            [ 0.7130,  2.2162,  0.3592, -1.2232, -0.0247, -0.5813, -0.7136, -2.3349],
            [-3.9211,  0.7531, -0.7427,  0.8395,  0.2423,  3.7490,  2.6114, -4.2030],
            [ 0.5882, -3.7119, -0.2594,  1.0319,  0.6639, -1.4414, -2.6014,  3.0999],
            [-1.0085,  2.2830,  0.0330,  1.6814,  2.1422,  0.0113, -1.5951, -0.3057],
            [ 0.2453,  1.1368,  5.8046, -2.5170, -2.4111,  1.7651,  2.5116,  3.3095],
            [ 1.0607,  0.9208,  0.6145,  2.6200, -1.4703, -1.1302,  3.0011,  0.3722],
            [ 2.7767, -0.3866, -1.9054, -1.0284,  3.9031,  2.7903,  1.4343,  2.3796]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3345,  1.6799, -0.6596, -3.2600,  1.1178,  0.9320,  1.1667,  0.2194,
              1.6775, -0.9593],
            [-0.0743,  0.4146,  0.2757, -1.6261, -0.6258, -0.4171, -0.3479,  1.9303,
              1.1236,  0.7233],
            [ 1.4692, -0.7910, -5.3808,  1.0719,  2.1321,  0.7765, -1.8911,  1.3982,
             -3.7942, -0.4439],
            [ 0.1021, -0.4866, -0.4320,  1.5517, -1.3015,  0.1355,  2.3148, -0.3593,
              1.3679, -1.5779],
            [ 0.7228, -0.6449, -0.4362,  0.3450, -2.1500,  2.0188,  2.5188, -3.7333,
             -0.2853,  1.8001],
            [-0.1189, -0.1689,  0.7449, -1.4633,  0.1522,  1.2423, -2.3773,  2.9405,
             -3.6499, -1.4663],
            [ 0.7961,  1.6605, -2.6405, -0.5123,  5.2568,  0.1082, -2.7813,  0.5156,
              3.1628,  0.3889],
            [ 0.1762,  4.2545, -0.4160, -0.3079,  4.3146, -1.2696,  1.4451, -2.0262,
             -0.3896,  0.2557],
            [ 1.1682, -1.5343,  2.1859, -0.2883, -1.8211, -2.0061, -1.2138,  0.4115,
             -0.4396, -0.1773],
            [ 2.3882, -2.9071, -2.4940, -1.2993, -2.1559,  1.5244,  1.2416,  1.0133,
              0.4018,  0.0376]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.920 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
