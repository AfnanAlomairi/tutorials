
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.4459,  5.3565,  4.9689,  6.2981,  4.5079],
            [ 3.4038,  6.6744,  5.3237,  1.0269,  5.8357],
            [ 6.3115,  2.5103,  4.6667,  4.9146, 12.6479],
            [ 2.2668,  3.5919,  1.6379,  0.2116,  3.6721],
            [ 0.3610,  4.5859,  7.5135,  7.5689,  1.4955],
            [ 2.2668,  2.2977,  6.8711,  6.6232,  3.6721],
            [ 6.3115,  9.0160, 11.2834, 11.4048, 12.6479],
            [ 3.4038, 10.9175,  6.6300, 11.3826,  5.8357]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5073, -0.1448, -0.7859, -0.7679, -0.6898,  0.4782,  0.8931,  1.4424],
            [-0.0449,  0.5475,  0.3898,  0.1026, -0.1603, -1.0610, -0.0211,  0.4240],
            [-0.0786,  0.1524,  1.2263, -0.5289, -0.4700, -0.5157,  0.6743, -1.3295],
            [ 0.0453,  0.1590,  0.4798, -1.6090,  0.6020, -0.6628, -0.1321, -0.4030],
            [-1.1064,  0.6644,  1.2085, -0.7405, -0.4590,  0.3523,  0.7739,  1.0391],
            [-0.5494, -0.2824,  0.5818,  0.4903,  0.3345,  0.3604, -1.0593,  2.4815],
            [ 0.9481, -1.7101, -0.8050,  0.0524, -0.0051,  1.8882, -0.2658, -1.2869],
            [-0.0059, -0.3942, -0.7427, -0.8518,  0.9429,  0.0471,  0.8192, -0.8701]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9677, -0.1522,  0.3584],
            [ 0.2611, -0.6591, -0.7929],
            [-1.3310, -0.2717, -0.9053]], requires_grad=True), Parameter containing:
    tensor([[-0.5338]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2443, -0.0247,  3.4538, -5.1275,  1.1664,  1.6100,  1.1794,  5.4318],
            [-1.0350, -4.2466, -0.9626,  2.4640,  2.1303,  4.0554,  0.0644, -0.7118],
            [-4.0714, -2.5441, -3.7595, -0.3758,  0.7549, -1.8510, -0.7452,  0.1891],
            [ 1.3779, -3.9704,  0.5338,  0.3984, -0.9241,  0.5722, -3.8327,  2.0101],
            [ 0.7984,  2.1887, -2.3778,  3.0379, -4.7303, -2.2611, -1.7019, -3.9707],
            [-3.3355, -3.4376, -2.5831, -0.4178,  3.4559,  1.7133, -3.4886, -0.3450],
            [ 2.8692, -3.0830, -0.1099, -2.9486,  2.5184, -2.2871, -1.6255, -2.5927],
            [-0.3857, -2.8352, -1.0240, -4.4203, -6.7003,  2.8564,  0.3266,  0.5521]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7740,  0.6028, -0.8674,  1.0387, -2.2503,  1.1321,  1.9911, -4.0831,
             -0.5575,  0.7116],
            [ 0.9201, -2.0943, -2.6979,  0.8640, -3.3218, -3.5740,  0.2783,  1.5004,
             -0.8700, -1.4636],
            [-1.7893,  0.1646,  0.0283, -3.8722, -0.2842,  0.2384, -4.1365, -2.3315,
              0.2690, -2.0477],
            [-0.5924, -1.9004,  0.2535,  0.2218, -3.9549, -5.8136, -2.1821,  1.7130,
              0.0534, -0.8962],
            [ 0.0472,  3.1886, -2.1056, -4.8136,  3.9530, -0.3245, -0.6223, -3.5197,
              0.4256,  1.5029],
            [ 1.1110, -1.9084,  1.4090,  2.7193,  1.0193, -4.8162,  3.4958, -0.8439,
             -0.6336,  1.8039],
            [-1.7950,  4.2768, -3.4446, -3.9911,  2.1502,  2.6113,  1.2458,  0.6592,
              0.2934, -1.1835],
            [-0.4553, -0.1758,  0.5654, -0.0226, -4.0317,  1.6542,  2.8920, -1.5149,
              1.7471, -1.1886],
            [-0.8902, -0.3362, -3.4781, -1.6618, -0.9429, -1.7276,  1.7101,  1.0798,
              0.2093, -0.0201],
            [-1.3306,  0.4324, -1.0211,  0.2582, -1.6137,  1.2576, -1.1860,  1.1019,
             -0.3694,  0.0616]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.000 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
