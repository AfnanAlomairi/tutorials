
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[10.3084,  3.5010,  9.8574,  1.2109,  1.8233],
            [ 6.9842,  4.3646,  7.0481,  6.4756,  4.8979],
            [ 8.6103,  4.8077,  5.1686,  6.7414,  1.8439],
            [ 8.2940,  6.4087,  2.0232,  5.3495, 11.4208],
            [ 1.7259,  4.7047,  9.2957,  3.7209,  1.5487],
            [ 8.2940, 10.2815,  6.7627,  5.6798, 11.4208],
            [ 8.6103,  2.9843,  7.4379,  9.8888,  1.8439],
            [ 6.9842,  9.8084,  6.0247,  4.8559,  4.8979]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6332, -0.0305, -2.4380, -0.6553, -0.1921, -0.5596, -0.7294, -0.7612],
            [-0.4637,  0.9341,  1.3386, -0.8225,  0.6339, -0.1066, -1.1167, -0.2364],
            [-0.4095,  0.2587, -0.0288,  0.6557,  0.4074,  0.3702, -0.2961, -1.8272],
            [-0.7474,  0.0795,  0.1729,  1.0809, -0.4241,  1.0609,  0.0649, -0.1722],
            [ 0.9177, -0.4317,  0.1340, -0.7513, -0.2963, -0.4272, -0.4125, -0.0204],
            [-2.3705, -0.0168,  0.8059, -1.2808, -0.4846,  1.4412,  0.7865, -0.7075],
            [ 0.7515,  0.4033,  0.6095, -0.3707, -0.4193,  0.2443,  0.0951,  0.8256],
            [ 0.6217,  0.0776, -0.7083, -0.9416,  0.0349, -1.4947,  0.5533, -1.8837]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3393,  0.7011,  0.9797],
            [-2.0407,  0.1088, -1.1493],
            [ 1.0108, -0.7847, -0.6000]], requires_grad=True), Parameter containing:
    tensor([[-0.2600]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7443,  0.5890,  1.3394,  5.2198, -3.2070, -2.2212, -4.2312,  0.3816],
            [-0.1488, -2.0441, -0.9636,  4.2640, -1.1561, -0.3102, -4.5859,  0.6819],
            [ 5.6638, -4.2648,  3.3362, -5.6335,  5.1929,  2.7455,  0.7999,  1.6143],
            [-0.8201,  3.2089, -1.6351,  1.6671, -0.0124, -1.9228,  1.2713, -2.5894],
            [-3.2627, -2.4440, -1.4487, -0.5079, -5.8383,  0.1346,  1.4184,  0.1207],
            [-0.7170,  4.0196,  2.8653, -3.6888,  3.6806,  0.7394, -1.3657, -0.5439],
            [-0.8223, -2.9649, -6.4281, -3.1445, -2.5602,  1.8224, -0.8257,  2.0524],
            [ 0.8489,  2.5825, -3.4357,  2.4621, -2.0595, -3.5957,  0.9837, -4.6585]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7741e-01, -2.5651e-01, -1.5594e-01,  8.2314e-01,  5.0117e-01,
             -2.1120e-03, -4.9495e-01,  1.1537e+00,  1.4196e+00,  2.4467e-01],
            [ 1.1440e+00, -8.6301e-01,  1.1692e-01, -1.0306e+00,  5.0374e+00,
              8.0429e-01, -1.2941e-01, -2.1477e+00, -2.5134e+00,  5.1331e-01],
            [-1.1120e+00,  2.0499e+00, -4.3241e+00, -3.7231e-01, -8.2359e+00,
              3.6403e-01,  3.7934e+00, -2.9379e-01,  2.4739e+00, -3.9222e-01],
            [ 1.3149e+00,  7.6242e-01, -9.2286e-01,  1.4553e+00, -4.2876e+00,
             -3.9974e+00, -6.9813e+00,  1.8723e-01, -2.2663e-01, -1.1555e+00],
            [-2.0834e+00,  4.4310e+00,  6.1572e+00,  7.7829e-01,  7.2589e+00,
              1.8337e+00,  7.5351e-01, -1.6101e+00, -7.4855e-01,  3.1150e-01],
            [-1.5755e+00, -4.3808e+00, -2.8871e+00,  1.0856e+00, -1.9108e-01,
              7.9961e+00,  3.1321e+00,  1.8615e-01,  5.1391e-01, -7.0699e-01],
            [ 8.2833e-01, -7.5147e-01, -2.2266e-01, -5.5818e+00, -3.0710e+00,
             -2.7430e+00, -3.7193e-01,  4.8477e+00,  4.3350e-01, -1.6398e+00],
            [ 1.6728e+00, -4.8564e-01,  2.0618e-01,  1.2161e-01,  1.4131e+00,
             -8.5310e+00, -3.5109e+00, -1.4070e+00, -3.0901e+00,  2.8526e-01],
            [-2.0967e+00,  1.7919e+00,  2.6597e-01,  8.7303e-01, -2.0933e+00,
              3.5544e+00, -2.1904e-01, -2.4006e+00, -7.2217e-01,  4.0749e-01],
            [ 7.2374e-01, -9.4385e-01, -7.2383e-01,  7.4780e-01,  1.1370e+00,
             -1.4415e+00,  3.5719e-02,  4.2461e-01,  8.5865e-02,  4.0272e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.025 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
