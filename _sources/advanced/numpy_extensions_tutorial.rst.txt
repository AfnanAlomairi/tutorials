
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.8716,  3.9370,  6.8308,  2.9338,  6.4152],
            [ 8.0627,  8.2588,  3.4031,  2.4184,  6.9078],
            [ 2.3428,  7.1447,  6.9099,  1.0256,  7.6064],
            [11.4302,  8.2094, 10.3395,  5.6468,  7.1375],
            [ 2.6015,  8.5864,  8.4382,  3.0017,  2.5732],
            [11.4302,  5.8639,  3.4421,  6.6248,  7.1375],
            [ 2.3428, 11.2527,  5.4574,  7.7930,  7.6064],
            [ 8.0627,  5.1406, 10.1312,  9.6886,  6.9078]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1124, -0.0273,  1.2073, -0.9985,  1.1369,  0.5270, -1.5165, -0.4247],
            [ 1.9163, -0.3045, -0.2508,  0.1448,  0.5544, -0.7891, -0.7874,  0.0465],
            [ 0.7994,  0.5066,  1.4176, -0.7486, -0.9868, -0.4788,  1.7572, -0.5597],
            [-0.6472, -0.8647, -0.5440,  0.2050, -0.5768, -0.9250, -0.3400, -0.6598],
            [-1.5761, -0.0801, -0.8084,  1.5222,  0.3248,  0.4230,  0.4845,  0.0927],
            [ 1.7695, -0.4681, -1.2500, -1.5475, -0.4292, -0.9029, -0.1482,  0.4351],
            [-0.2037, -0.5464, -0.8611,  0.4771,  0.9486, -0.4176, -0.6182,  0.2053],
            [ 0.1641,  1.6752,  0.6670,  1.1724,  1.2333, -0.9057,  0.0479,  0.5729]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.5154,  0.1215,  0.0051],
            [ 1.4574, -0.7817,  0.1478],
            [-0.6371, -0.3424, -0.4306]], requires_grad=True), Parameter containing:
    tensor([[-0.5505]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7772, -2.9328,  1.7457,  1.6277,  0.9500,  0.6290,  2.5738, -2.4221],
            [ 0.4442, -3.0502, -2.4231, -1.7947, -2.2742, -1.0546, -1.3468, -0.3568],
            [-1.1113, -1.1653, -2.5298, -2.7194,  0.5040,  1.8832,  1.4619, -1.7561],
            [-2.9698,  3.1649, -2.9356,  3.1357,  1.0719, -3.5103, -2.3686,  0.7200],
            [-0.9628, -1.3540, -0.1026, -0.8596, -2.4641, -3.7650,  1.6694, -1.6383],
            [ 0.2186, -3.5169,  3.3744, -1.2413,  1.1281,  3.6637, -0.7994,  1.5024],
            [-4.9638,  2.5579, -1.1230, -3.3256,  2.4833, -2.4461, -1.7809, -0.5088],
            [ 0.3198, -3.3893,  0.4255,  4.4747, -1.6779,  2.9945, -0.2266,  1.1294]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.7414e+00,  7.8294e-01, -5.4449e-01,  1.2788e+00,  1.3963e+00,
             -1.4874e+00, -1.4262e+00,  5.7809e-01, -3.0954e-02, -1.5288e-03],
            [ 9.0227e-01, -5.0319e+00,  4.2639e-01, -1.0003e+00,  2.2865e-01,
              3.7128e+00, -7.5557e-02,  4.8106e-01,  2.6062e-01, -4.9150e-02],
            [ 2.4098e+00, -1.1741e+00,  5.7802e-01,  9.5378e-02, -9.5222e-01,
             -2.8947e+00, -8.8063e-01, -2.8213e-01,  3.5398e-01, -2.8361e-02],
            [-3.5916e+00,  2.2422e+00, -5.3340e+00, -7.9890e-01,  2.9050e+00,
             -2.3505e-01,  8.5424e-01, -2.6999e+00,  1.5139e+00,  2.4024e-01],
            [ 2.1514e+00, -4.1802e-01, -7.1890e-02,  1.8661e+00, -7.1246e-01,
              4.8768e+00, -3.8543e+00, -1.4597e+00, -3.4898e-01,  6.9100e-01],
            [-3.8431e+00, -1.1819e+00,  2.5414e+00, -5.5694e+00,  1.8108e+00,
             -3.6410e+00,  1.1835e+00,  7.7003e-02, -1.5239e+00, -7.2342e-02],
            [ 2.5662e+00, -3.5646e-01, -1.8734e+00,  6.2843e+00, -2.9027e+00,
              6.4548e+00, -6.2155e-01, -1.1436e+00, -7.9706e-01, -6.7155e-01],
            [ 6.9550e-01, -7.5411e-01,  1.9144e+00, -1.7599e+00, -1.5753e+00,
             -2.9947e+00,  2.5329e+00, -6.1014e-01, -2.7412e-01,  2.4563e-02],
            [-1.6405e+00,  3.2694e-02, -1.6888e+00, -1.4713e-01,  3.7579e+00,
             -4.6042e-01,  8.1347e-01, -2.6676e-01, -3.9107e-02, -9.0952e-02],
            [ 6.1965e-01,  6.4559e-01,  1.2743e+00,  1.3160e+00, -3.4915e-01,
              1.1722e-01, -7.1813e-01,  4.4527e-01,  1.2333e-01,  1.9436e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.481 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
