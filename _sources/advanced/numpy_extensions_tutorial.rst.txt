
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.9315,  4.9174, 12.5595,  8.1345,  5.4763],
            [ 7.1646,  9.5356, 10.3330,  2.2337,  2.0204],
            [ 7.7215,  0.9986,  4.7130,  4.0557,  6.2707],
            [16.9506, 20.4171, 10.7072,  3.0462,  6.8985],
            [ 0.6387,  9.4014,  9.2767, 12.4204, 19.8315],
            [16.9506,  5.3846, 15.2358,  0.4764,  6.8985],
            [ 7.7215, 12.6715,  8.2325,  1.4802,  6.2707],
            [ 7.1646,  3.6787,  5.5370,  4.7083,  2.0204]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6659, -0.1259,  0.6074,  1.7500,  2.2154,  0.8248,  0.1643, -0.7419],
            [ 0.4021, -0.8716,  0.8588,  0.4468, -2.0501, -0.8033,  0.0828,  0.8561],
            [-0.2956,  1.0528,  1.7498,  0.8249,  0.5513,  0.0346,  0.9340, -0.1374],
            [-0.8087,  0.1236, -0.2751,  1.2340, -0.3520,  1.1856, -2.2826,  0.1232],
            [ 0.8002, -0.6980,  0.6541, -0.4372, -0.1644, -1.8602,  0.8606,  1.7956],
            [ 1.7815, -0.6730, -1.8398,  0.6714,  1.5352,  1.8894, -1.1262,  1.3426],
            [-0.2983, -0.3543,  0.7937, -0.2529, -2.0956, -2.4757, -0.8298, -1.3954],
            [-0.4083, -2.0101,  0.1198,  1.3468, -0.7055,  1.0976, -0.1855,  1.4410]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1897, -0.4085, -2.7286],
            [ 0.8638,  0.4342, -0.4042],
            [ 0.2910, -1.4281, -0.0273]], requires_grad=True), Parameter containing:
    tensor([[0.4085]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.1576e+00,  9.3485e-01,  1.0221e+01,  8.6881e-01, -4.3322e+00,
              7.3721e+00,  1.2347e+00, -1.6104e+00],
            [-1.8100e+00,  1.2222e+00,  9.6905e-01, -6.5245e+00, -1.4199e+00,
             -6.4388e-01, -2.3481e+00,  2.8987e+00],
            [ 4.4627e-01,  7.0038e+00,  4.9300e+00, -7.4399e+00,  7.7334e+00,
              3.4646e+00, -6.3250e+00,  6.1533e+00],
            [ 2.8904e+00,  1.4618e+00, -2.1473e+00, -2.8165e+00,  1.0724e+00,
              2.6237e+00, -2.0139e+00, -1.3338e+00],
            [ 3.6742e+00,  3.3750e+00, -4.6021e+00,  1.8036e+00,  5.1359e+00,
              3.1506e-01,  3.5576e+00, -2.4297e+00],
            [ 2.6167e+00, -5.1354e+00, -3.1695e+00, -1.7554e+00,  5.3020e+00,
              8.5316e-01, -2.1552e+00, -2.8793e+00],
            [ 3.2221e+00,  2.8177e+00,  1.0338e+00, -8.8304e-01, -2.3587e-01,
             -2.0956e+00, -3.5581e+00, -3.0656e+00],
            [-4.8428e+00,  2.9001e+00,  5.8238e+00,  1.5558e+00,  1.8082e-03,
              2.3759e+00,  3.0888e+00, -5.0705e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6035,  0.2829, -0.1802, -1.6579, -3.0196, -0.7506,  1.1997,  3.7777,
             -3.3888, -5.0535],
            [-1.8886,  2.5261,  5.2405, -2.1492,  0.8808, -1.3552,  1.7835,  3.3734,
             -0.1492,  1.4689],
            [-2.6492,  1.6686,  4.0080, -8.1601, -5.1179,  0.9034,  6.0834, -0.2892,
             -4.4590,  1.2320],
            [-1.1596,  3.8832,  1.6944, -0.7798, -3.6035, -0.1546, -1.5438, -1.3156,
              2.3676,  4.3747],
            [-0.7169,  1.6620,  0.3760,  0.6585,  1.1344, -0.8277, -1.3585, -2.4869,
             -2.0769, -7.2128],
            [ 0.8655, -2.3587, -1.7082,  2.3961,  2.9774, -0.0505, -2.4995, -1.8953,
              1.6438, -2.0659],
            [-0.6203,  0.2897,  3.3711,  2.5817, -2.6245,  0.5439, -0.1173,  2.2835,
             -3.6801, -3.3629],
            [-0.2575, -1.9334, -1.6770, -1.8795,  6.8345,  2.4698, -2.5202, -6.0244,
             -7.2850, -1.5182],
            [-0.0187,  2.3067, -0.9694, -2.1084,  0.5450,  3.1937,  2.9659,  1.5193,
             -2.5458, -0.1860],
            [ 0.1074, -0.3278, -1.5695,  2.5752,  1.5800, -0.7415, -2.1565, -3.7463,
             -0.6186, -0.0104]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.959 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
