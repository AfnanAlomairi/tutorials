
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.3632,  8.4985,  8.1990, 13.0810,  0.6049],
            [ 6.5620,  3.5491,  4.2521,  3.9155,  8.4318],
            [ 3.7045,  5.8074,  6.7261, 10.4169,  3.4217],
            [ 5.4582,  7.1237, 13.2243, 10.4418,  8.4952],
            [13.1930,  5.2753, 11.9853,  3.8145,  6.2081],
            [ 5.4582,  4.9777,  6.0471,  4.1373,  8.4952],
            [ 3.7045, 14.0622,  3.8063,  5.2020,  3.4217],
            [ 6.5620,  6.0064, 11.7652,  7.3333,  8.4318]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.1030,  1.6035,  0.5928, -1.0210, -1.1478, -1.2348, -0.1949, -0.6428],
            [ 2.1485,  0.9516, -0.0056, -0.0284,  0.9719, -0.3162,  0.1150, -0.2919],
            [ 0.0767, -1.3555,  0.1913,  0.2106,  0.7283, -0.8955,  0.8248,  0.3776],
            [ 1.3447,  0.7735, -1.4890,  0.0290, -0.5093,  1.4111,  0.6583, -0.5418],
            [-0.0924, -0.4217, -0.3186, -0.8751, -0.0391, -0.7353,  0.8778, -0.2231],
            [-1.1068,  2.1039, -0.9513, -0.1889, -0.3856,  0.3618,  0.4268, -1.5887],
            [-0.6063, -0.3387, -1.1015,  0.4683, -1.7907,  0.8616,  1.6667, -1.6204],
            [ 0.3013, -0.6176, -1.2990, -0.3222, -0.6324,  0.3452,  1.4691,  1.7774]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8693, -0.6795,  0.6696],
            [-1.0051,  1.1293, -0.1108],
            [ 0.4737, -0.1643,  1.0051]], requires_grad=True), Parameter containing:
    tensor([[1.6346]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5783,  2.9496,  3.0994,  2.7247,  1.2798, -1.2352,  2.0910, -1.2309],
            [ 4.1729,  0.3244,  2.7704,  2.4531,  1.7510,  3.0811, -0.2923,  3.6026],
            [ 2.0644,  4.1714,  2.0914,  3.9887,  3.0450,  0.4755,  4.5746, -0.2755],
            [ 3.1329,  3.4944,  3.2136,  2.0853,  2.7500,  2.0488,  0.2222,  2.7208],
            [ 3.3600,  2.1416,  1.3892,  6.1944, -2.1721,  2.1836,  3.5796, -0.7423],
            [ 2.4831,  3.1077,  5.6417, -3.0329,  6.6434,  1.6543,  0.6532,  3.1689],
            [ 4.0761, -1.5510,  1.6502,  7.2635, -4.3670,  0.5736,  2.2450, -2.7616],
            [ 2.1697,  4.8009,  1.3573,  2.4652,  0.2267,  0.7008,  1.1700,  6.5854]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6514, -1.2470, -0.2861, -1.5699,  1.8516, -2.7465,  0.6959,  0.0183,
             -0.1689, -0.1453],
            [-0.0236,  1.2473,  1.3320,  1.3347, -4.9029,  3.6241,  0.4800, -2.3075,
              1.8598, -1.1171],
            [-0.4509,  0.5089,  0.7478, -3.9799,  1.6750, -3.4703,  0.8567,  2.8408,
             -1.8282,  0.4574],
            [-0.7015,  2.4746, -1.7904,  3.5827, -0.0090, -1.8253,  0.0184, -0.8697,
              2.9697, -2.0157],
            [ 1.1799, -3.4148,  3.2401, -0.4836, -0.2255,  0.8632, -3.7651,  1.1261,
              2.1061,  0.2107],
            [-0.4070,  0.6485, -0.7774,  2.9327,  2.2146, -2.2930, -0.9182,  0.4589,
              0.3478, -0.6976],
            [-0.1251,  0.2895, -0.6131,  1.1830, -0.0513, -0.9395,  0.2359,  2.8783,
             -1.8435,  0.7280],
            [-0.0301, -1.4569,  1.2451, -2.8883,  1.5288,  2.9555,  0.2233, -0.2593,
              2.3687, -0.7061],
            [ 0.0797,  1.6732, -2.0894,  0.5284,  1.1659,  0.9619,  2.1027,  0.8500,
             -0.2773,  2.1963],
            [-0.0322, -0.9005,  0.3339, -1.8256,  0.0595,  0.6161, -0.3920,  0.8321,
             -0.3333,  0.3369]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.106 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
