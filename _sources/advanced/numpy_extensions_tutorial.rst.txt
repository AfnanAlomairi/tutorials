
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[14.0599,  8.9617,  4.6365,  8.4600,  0.7700],
            [ 4.7551,  2.8558,  2.4474,  5.1841,  0.5968],
            [ 8.1138,  7.4767,  8.6313, 10.1841,  5.5252],
            [ 5.2358,  4.5465,  8.0608, 14.3933,  3.5589],
            [ 0.6920,  4.8359,  4.1109, 11.2845,  6.6448],
            [ 5.2358,  8.0837, 10.5134, 10.8844,  3.5589],
            [ 8.1138,  6.1306, 12.6481,  7.4147,  5.5252],
            [ 4.7551,  8.2920,  2.1697,  0.5774,  0.5968]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7451, -0.5955, -1.5162, -0.4694,  0.0248,  0.7875,  0.7958, -0.2992],
            [-1.0554,  0.6496, -0.2587, -0.6489, -2.0001, -0.9188,  1.5544,  1.0771],
            [-0.3569, -0.6927, -0.2935, -1.2557,  1.6022, -0.6573, -1.7240,  1.0160],
            [ 0.4007, -0.1118, -0.8215, -0.2540, -0.4837, -1.6654, -0.5971, -0.7810],
            [-0.9646, -0.0146,  0.3252, -0.2411, -0.9959, -1.1929, -0.0656, -0.0322],
            [-0.4903,  0.8450, -1.1439, -0.2526,  0.1747,  0.7738,  1.6658,  0.7430],
            [ 0.7565, -2.0040,  0.8201, -0.0053, -0.4503,  0.0213, -0.5369,  0.0935],
            [-1.1688, -0.0564, -0.8322, -1.4321,  1.6762, -1.0733, -1.4311,  1.2325]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2586, -1.3311,  0.7247],
            [-1.9863,  1.8634,  0.3774],
            [-0.0254, -1.0329, -1.9580]], requires_grad=True), Parameter containing:
    tensor([[-0.2241]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1493,  0.6199, -5.6843, -1.4408,  3.4267,  2.8942,  3.1038,  9.0582],
            [ 3.4615, -1.0556, -4.0012, -2.5888, -5.0274, -2.2882, -0.4893,  1.6394],
            [ 1.9493, -3.4099,  3.4981, -0.9970, -4.7610, -2.8994,  1.6553,  3.4840],
            [-7.3683,  7.5962, -3.4324,  0.8390, -0.0754, -4.4452, -0.4340, -2.3391],
            [ 2.9727, -1.2163,  4.9605,  3.5337, -5.2154,  4.8810,  0.4458,  4.2390],
            [-2.5688,  8.4951,  0.6171, -5.2608,  0.7917, -3.5142, -3.8985, -1.9039],
            [ 0.1931, -1.9098,  1.2348,  4.4720,  5.3661, -0.5363,  1.5724, -1.2942],
            [-4.2901,  1.4935, -4.3375, -0.4380,  3.5599,  0.6991, -1.8138, -1.4890]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.9792e-01, -2.0000e+00,  1.4266e+00,  3.6023e-01,  8.4917e-01,
              1.5021e-01, -1.0592e+00,  7.8619e-01,  3.0201e+00, -1.6065e+00],
            [-3.0540e+00,  3.4402e+00,  1.6781e+00,  3.6040e-02, -1.2863e+00,
             -2.2248e+00,  1.1623e+00,  5.4783e+00, -4.8118e+00, -7.0657e-01],
            [ 1.9933e-01,  8.9710e-01, -5.7117e+00, -3.0825e+00,  4.3715e+00,
              5.7240e+00,  1.9506e-01, -2.5917e+00,  2.9801e+00,  4.0124e+00],
            [ 1.6045e+00, -2.1889e+00, -6.6182e-01,  3.4934e+00,  1.8034e+00,
             -4.7049e+00, -7.8660e-01,  3.4760e-01,  1.8273e-01, -2.5268e-01],
            [-1.0681e+00,  1.3573e+00, -3.4292e+00, -6.0696e+00,  1.4063e+00,
              6.8645e+00,  8.7136e-01,  5.5853e-02, -8.2636e-01,  2.3695e+00],
            [-3.8289e+00,  9.2775e-01, -2.1972e+00,  7.1382e+00,  2.2164e+00,
             -3.0024e+00,  2.1789e+00, -3.9120e+00, -4.0399e-01,  3.1351e-01],
            [ 6.3129e-01, -3.3160e+00, -3.6742e+00,  2.1647e+00, -7.8425e+00,
              1.5429e+00, -2.6233e+00, -2.2849e+00,  1.1705e+00, -2.8654e+00],
            [ 3.9399e+00, -4.0936e+00,  2.4757e+00, -6.9873e+00,  4.5348e+00,
              2.2149e+00,  5.3977e+00,  5.4120e+00, -3.8966e-01, -1.7412e+00],
            [ 2.5718e+00, -6.6988e-03,  3.1605e-01, -1.0274e+00,  2.2137e+00,
              4.5408e+00, -1.0017e+00, -4.4659e+00, -3.0362e+00,  3.7100e-02],
            [ 3.2292e-02,  1.3199e+00,  2.7467e+00, -1.5674e-02, -1.4386e+00,
             -1.3452e+00,  1.0024e+00,  4.8244e+00,  2.2365e+00,  6.6798e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.030 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
