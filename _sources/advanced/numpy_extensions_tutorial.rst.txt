
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.8754,  9.9798,  6.6032, 14.1605,  3.6699],
            [ 5.7389,  7.7481, 10.9703,  9.7882,  2.5302],
            [ 9.0127,  8.1890, 10.9585,  4.7977,  5.0349],
            [ 5.4116,  9.7425,  8.2499,  8.9850,  6.5400],
            [ 8.0000,  7.0106,  8.0299,  8.7896,  6.5897],
            [ 5.4116, 10.1536,  5.4611, 13.2968,  6.5400],
            [ 9.0127,  6.9590,  3.5687,  8.1173,  5.0349],
            [ 5.7389,  4.8296,  1.4515,  5.8603,  2.5302]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1993,  0.5103, -0.1483, -0.7264,  0.3530,  0.3590,  0.2240,  0.0650],
            [-2.3205,  1.8608,  0.1780, -1.5206,  1.6161, -0.8469,  1.1567,  0.6427],
            [ 0.9008,  1.1438, -0.3583,  0.2099,  0.4342,  0.5567,  0.2932,  0.1207],
            [-1.1872,  1.1359,  1.0587, -0.6600,  0.0066,  0.0713,  0.9785,  0.6797],
            [-0.0299, -1.2542, -0.3309, -0.4470,  1.1430,  1.2325, -1.4152, -1.6201],
            [ 2.2462,  0.5085, -1.7244, -1.0584, -0.4539, -0.5150,  0.9043,  1.1772],
            [-1.4483, -0.3083, -0.1063, -0.4763,  0.4287,  0.0090,  0.4986,  2.3242],
            [ 0.0530, -0.2637,  1.5604, -0.3203,  1.2672,  0.9728,  2.1939,  0.5399]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3298,  0.6842, -1.4361],
            [-0.1643, -1.0770,  0.9228],
            [ 1.8423,  1.2810,  0.9598]], requires_grad=True), Parameter containing:
    tensor([[0.4078]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.8217,  3.4100, -2.6400, -3.2794, -2.6336,  2.1746, -3.4225,  2.9556],
            [ 5.2364, -2.9317, -0.3470, -1.4531,  0.9189,  1.8080,  2.1810,  0.0778],
            [ 5.7689,  1.1785,  8.4529, -0.4958,  5.6869,  0.8714,  0.5242, -0.6813],
            [-0.2532,  4.6873,  4.1356,  2.1584, -0.3665,  6.0801,  1.2926,  3.0534],
            [-3.2785,  2.3993, -6.3534, -1.8776,  3.5010, -4.6891,  6.3598,  2.5259],
            [ 2.5215, -5.6501, -2.0760, -2.0460, -1.0546,  3.2422, -2.3074, -1.8834],
            [ 2.1091,  4.0043,  3.0056,  2.2031, -0.6430,  3.6043, -4.4758,  1.2144],
            [-0.9563, -0.8175, -1.1271,  5.8862, -0.9997, -4.0824,  0.0738, -0.9383]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.9427e-02, -2.2960e-01,  7.5488e-01, -2.2077e+00,  1.5442e+00,
             -5.6964e-01, -1.9296e+00,  1.9435e+00, -3.0408e+00,  3.1854e-01],
            [-1.5991e-02,  3.0621e-02, -1.5494e+00,  3.0920e+00, -2.0601e+00,
             -3.2520e-01, -6.7222e-01, -1.7034e+00,  2.8002e+00, -1.7384e+00],
            [ 1.2573e-01,  2.1771e+00,  4.5491e-01, -3.8295e-01,  4.8582e-01,
              2.6864e+00,  2.4978e+00,  3.5935e+00,  1.1808e+00, -7.6094e-01],
            [-7.4271e-03, -1.9453e+00, -1.2873e+00,  2.6793e+00,  1.9966e+00,
             -1.9702e+00,  1.9589e+00, -4.7594e-01, -8.8121e-02,  1.9812e+00],
            [ 5.0149e-01,  1.1607e+00,  1.9646e+00, -2.5107e+00,  8.6068e-01,
             -4.4059e-01, -2.4826e+00,  2.1061e+00, -1.2212e+00,  3.7222e-01],
            [-2.8976e-01, -1.7044e+00, -2.6366e+00,  7.6523e+00,  2.7967e+00,
              1.2360e+00, -1.0383e+00, -4.9064e-01,  2.9517e+00, -1.5819e-01],
            [ 4.2492e-01,  2.1449e+00,  3.9271e+00, -5.5322e+00, -9.3884e-01,
             -3.0075e+00,  6.4728e+00,  1.3699e+00,  2.9820e+00,  1.4171e+00],
            [-6.5125e-01, -5.5460e+00, -3.9485e+00, -1.6931e+00,  3.6508e+00,
             -4.1065e-01, -2.7374e+00, -1.6431e+00, -1.5921e+00,  3.5625e-01],
            [-1.3015e-01,  1.2338e-01,  1.7270e+00,  3.0031e+00, -1.1430e-01,
             -1.7971e+00, -3.1755e+00, -2.2848e+00, -7.5220e-01, -5.9119e-01],
            [ 1.0146e+00,  2.9430e-02, -3.3323e+00, -4.9508e+00, -2.8953e+00,
              5.4360e-01,  2.3078e+00,  1.0917e+00,  2.8873e-01, -2.1381e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.017 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
