
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.0599,  6.1819,  2.5447,  4.5863,  5.4709],
            [ 1.8536, 11.3256,  6.0236, 10.0983,  3.6697],
            [ 7.4382,  3.1026,  3.2743, 11.0774,  2.2313],
            [ 6.1818,  9.7856, 14.6433,  9.5985,  8.7105],
            [11.5611,  0.8399,  6.1136,  0.4743,  8.6682],
            [ 6.1818,  3.9451,  7.8928,  5.7226,  8.7105],
            [ 7.4382,  3.4409,  6.0170,  4.3363,  2.2313],
            [ 1.8536,  2.4176,  6.4208,  4.0516,  3.6697]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-9.7655e-02,  5.0290e-01, -4.4165e-01,  2.8324e-01,  5.2615e-01,
              1.0577e+00, -6.7286e-01, -1.1040e+00],
            [ 1.5820e+00,  8.8142e-01, -8.6602e-01,  1.3856e+00,  7.4822e-01,
             -8.9836e-01, -7.8917e-01, -1.4720e+00],
            [ 8.5162e-01, -1.6068e-01,  1.3960e+00,  4.6521e-01, -1.2748e+00,
              1.8427e-01,  6.9903e-01, -4.1379e-02],
            [ 1.1291e-01,  9.0891e-01, -9.5304e-01,  5.9344e-01,  4.3850e-01,
             -4.1056e-02, -1.8703e+00,  2.0491e-01],
            [ 1.9441e-01,  8.9892e-02, -1.6216e-02, -9.1485e-02, -4.3884e-01,
             -2.7960e-04,  1.0447e+00, -3.9917e-01],
            [-8.8570e-01, -1.2523e+00, -2.3689e-01, -1.0474e-01, -1.7809e+00,
              2.1511e+00, -1.1323e-01,  9.8663e-02],
            [ 5.8774e-02,  7.7583e-01,  1.5051e+00,  6.7180e-01,  1.7812e+00,
              5.0074e-01, -1.6051e-01,  6.2136e-01],
            [-1.2296e+00, -5.9137e-01,  4.1724e-01, -5.3665e-02,  1.6288e-01,
             -5.3095e-01,  1.0294e-01,  6.2989e-01]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3197, -1.2382,  1.2809],
            [ 1.1810,  0.2838, -0.2718],
            [-1.6032,  0.7124,  0.3233]], requires_grad=True), Parameter containing:
    tensor([[1.0054]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.2217, -1.2751,  2.0956, -1.6034,  0.7176, -0.3296,  0.6692,  3.6660],
            [ 4.8797,  1.0812, -1.8725,  0.1734,  1.3039,  4.5506,  4.7308,  1.9429],
            [ 7.5424,  1.4315,  0.5212,  2.5090, -2.3028,  0.5449,  3.0765,  6.5945],
            [-3.4893, -5.0116, -1.3251,  3.1839,  5.0161, -0.3829, -0.6482, -2.5147],
            [-3.3629,  1.9156,  5.3447,  1.5238, -5.6827,  1.4231,  1.7486,  5.3256],
            [ 0.5613, -0.2796, -1.3591,  3.7687,  5.5481,  0.4528,  0.8039, -1.1451],
            [-1.3602, -2.5004,  3.8163, -0.5547,  0.5851,  2.8333,  1.6633, -0.3526],
            [ 2.1420,  4.8369,  3.9557,  1.4090, -0.5495,  1.6632, -0.5559,  2.5823]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2583, -1.7674, -1.5184,  1.5627, -0.5338, -2.7194,  0.4575,  3.2356,
              1.3128, -1.7144],
            [ 0.2818,  0.7449,  0.9725,  2.5944,  1.9669,  1.5226,  1.4730,  0.4646,
             -0.6084, -1.0929],
            [-0.5369, -1.1667, -0.5124, -1.4725, -1.4707,  1.7472,  0.1365, -1.8194,
             -0.4443, -0.0935],
            [ 2.1931,  2.0407,  2.0765,  0.9225, -1.7073, -3.1635, -1.7843,  3.8193,
             -0.1817, -1.0112],
            [-2.7186, -2.6138, -0.8723,  2.0699,  0.1802,  3.4812,  3.7666, -0.9897,
             -0.0238, -0.9818],
            [ 3.9535,  1.3448, -3.1538, -3.2753,  4.0222, -3.2463, -1.6384, -1.6971,
              1.7664, -0.2960],
            [-0.3262, -0.2404, -0.3636,  3.1823, -2.3905, -1.2361,  0.5428,  2.7750,
             -2.9383,  0.6824],
            [-0.5430, -0.9168, -1.7422,  2.2061,  3.0268,  2.2460, -2.0529,  1.5969,
              0.2780, -0.5653],
            [ 2.0299, -2.0745,  0.8442, -0.6151, -1.0794, -2.9083,  1.6423, -1.2510,
              0.3569,  0.2839],
            [-0.4918, -0.1881, -0.5955,  3.1135, -1.0100,  0.0261,  0.4615, -0.0711,
             -0.2994, -0.0714]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.805 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
