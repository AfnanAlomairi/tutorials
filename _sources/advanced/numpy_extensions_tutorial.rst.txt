
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.7088, 10.6078,  8.2623,  5.7293, 23.2238],
            [11.6041,  1.1108, 12.6096,  7.0727,  5.1213],
            [10.3549, 13.9514,  2.4772, 12.7710,  8.8560],
            [11.8844,  3.5665, 13.9724,  9.3319, 12.0716],
            [ 2.5219,  5.7051,  5.3002,  2.7047,  8.5882],
            [11.8844,  5.5134,  4.7589,  8.3299, 12.0716],
            [10.3549, 11.9037, 12.8327, 10.6932,  8.8560],
            [11.6041,  9.2613,  7.5125,  7.7392,  5.1213]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1378,  1.3040,  1.0558,  0.2804, -0.8374, -0.3302, -2.1818, -0.2798],
            [-1.6763,  1.5203,  0.2515, -1.1026,  3.5020,  1.5438,  0.1280,  1.3232],
            [-1.0470,  0.2301, -1.6217,  1.8420, -0.0230,  2.7126, -0.9606,  0.4920],
            [-1.2124, -1.4572,  1.5647, -0.1438, -2.8262, -1.4313,  0.3056, -0.5969],
            [-0.0114, -0.3668,  0.2694,  0.6681, -0.3160, -1.4240, -0.9251,  0.0139],
            [-1.1880, -0.2286, -1.4424,  0.7642, -1.2506, -0.9225, -0.2206,  0.7571],
            [-1.6987,  1.2115,  1.0732,  0.1642, -0.0050,  1.6466,  0.3673, -0.2583],
            [ 0.0534,  0.5162,  0.8035,  1.1715, -0.9300,  0.8911, -0.8289, -0.2532]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.0423,  0.6357,  0.8276],
            [-0.0643, -0.2426, -1.4092],
            [ 1.6640,  1.1594, -0.6845]], requires_grad=True), Parameter containing:
    tensor([[0.1033]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.0693, -1.2096, -1.9732,  0.6594, -2.3114, -0.3403,  1.3993, -1.4969],
            [-1.3624, -0.3935, -2.7441,  2.5200,  2.1562, -1.3197, -2.6843, -1.3849],
            [-0.7499,  2.8607,  2.3092, -1.9984, -4.7038,  3.3687,  3.9361,  1.7982],
            [-5.2106,  0.8465,  3.9228,  1.0716, -3.7177,  2.1671, -0.3462,  0.4703],
            [ 2.5216,  6.6550, -4.9698, -4.3149,  3.7938,  2.2554,  4.0740,  5.5317],
            [ 4.4541, -3.3076,  1.6958,  1.9419, -3.5894, -6.1470,  2.2223, -2.1365],
            [ 1.9448, -0.5587,  2.3282, -0.0697,  1.8259, -3.4646, -4.7078, -3.9789],
            [-2.2397, -4.8985,  5.8771,  0.7391,  0.5697,  2.5339,  1.6268,  0.5720]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.9834, -0.6078, -2.3204,  1.3710,  3.4051, -0.5867, -4.5777,  1.9725,
              0.8515, -0.5288],
            [-0.1347,  0.7251,  1.0679, -0.7336,  4.1965, -3.3557,  5.1699, -4.9926,
             -2.0250,  2.9888],
            [-4.7670, -1.9712,  2.2163,  5.3607, -4.8835, -4.6653,  6.2141, -1.3060,
              1.1019, -2.6024],
            [ 2.2112,  4.0437, -7.6126, -8.3807, -1.3425,  4.5160, -0.2376,  2.2245,
              2.7075, -3.6239],
            [ 4.8886,  2.2669,  4.6895,  1.5467, -8.3557,  0.1313,  4.4522, -4.4756,
              1.0791,  2.9039],
            [-3.3400, -6.3787,  2.9293, 10.1926,  0.6266, -1.2847, -0.5458, -1.4627,
              0.5765, -1.5456],
            [-0.1518,  1.0724, -2.5613, -3.0163, -1.5902, -2.0705, -4.6519,  3.8337,
              2.8866, -2.1179],
            [ 1.5948,  2.0807, -1.5426,  1.2065,  1.7984,  8.1910, -4.4595, -2.3640,
              0.2755, -0.1154],
            [-1.4124, -3.0641, -1.6028, -1.9142, -0.6561,  5.1839,  0.6148,  1.3543,
             -1.3259,  0.5904],
            [-0.1530,  0.1729,  2.6901,  1.3554,  0.4295, -2.0323, -1.8930,  1.5608,
             -0.7438,  0.1939]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.076 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
