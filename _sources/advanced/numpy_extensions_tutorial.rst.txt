
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[12.1752,  3.8243,  6.1026,  1.4963,  9.7113],
            [ 2.2018,  8.5261,  5.1914,  4.8031,  3.5722],
            [ 1.5642,  7.9272,  3.5257,  3.2543,  3.5209],
            [ 5.9608,  5.8066,  2.2015, 10.3499,  8.6447],
            [11.6479,  1.7943, 12.6318,  6.9053,  0.7137],
            [ 5.9608,  8.6038,  9.5690,  4.1350,  8.6447],
            [ 1.5642,  6.8602,  6.8872,  0.6805,  3.5209],
            [ 2.2018,  7.5925,  5.8184,  7.0365,  3.5722]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3712,  0.7074,  1.3700,  1.0725, -1.9378, -0.3603,  0.2772,  1.9215],
            [-0.1101,  0.7081, -0.5305,  0.4793,  1.2865, -0.0695, -0.7534, -0.9703],
            [ 0.6151,  1.4142, -0.2879,  1.6130,  0.3985,  0.7515,  0.1626, -0.4296],
            [ 0.1068,  0.4673, -0.7164, -0.8456, -0.4750,  0.4639, -0.8730,  0.0682],
            [ 0.1758, -0.2085, -1.1404,  0.7266,  1.5250,  0.2716,  0.9809,  0.7675],
            [-0.5565,  0.0997,  0.0145, -0.7010,  0.0976,  2.2393, -1.0500,  0.4897],
            [-0.6995, -0.1678,  0.0577,  0.5879,  1.5214, -0.2295, -0.0403,  0.1243],
            [ 0.2951,  0.2470,  0.3580, -0.6773,  0.4406,  0.9714,  0.3485, -0.5891]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0741,  0.5495,  1.7881],
            [-0.4514, -0.3557, -0.0922],
            [-3.0721,  1.2360,  0.3865]], requires_grad=True), Parameter containing:
    tensor([[-0.3189]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.0813e+00,  1.3532e+00, -3.4236e+00, -1.1450e+00,  1.7315e+00,
             -2.2988e+00,  9.9582e-01,  5.9580e+00],
            [ 1.3956e+00, -3.2172e+00, -6.9880e+00,  4.2513e+00,  3.5565e+00,
             -2.4882e+00,  2.5069e+00,  6.4337e+00],
            [ 2.2929e+00, -3.1915e+00,  1.8171e+00,  4.0576e+00, -4.6429e+00,
             -2.3317e+00,  2.5502e+00, -7.5951e-01],
            [ 4.6245e-01, -3.9737e+00, -3.0635e+00, -5.4285e+00,  1.3691e+00,
             -1.6276e+00,  9.8572e+00, -4.8437e-01],
            [-2.2444e+00, -1.7985e+00, -1.4414e+00,  2.3380e+00,  2.9397e+00,
             -4.4686e+00,  7.4401e-01, -2.5932e+00],
            [ 1.4857e+00, -1.2237e-01,  1.9154e+00, -7.7975e-01, -6.4705e+00,
             -7.7204e-01,  1.1934e+00, -2.6121e+00],
            [ 6.4776e-02, -4.0264e+00,  3.1650e+00,  7.1791e+00,  1.5497e+00,
             -5.8001e-03, -2.2189e+00,  2.6090e+00],
            [ 1.6092e+00,  1.9469e+00,  1.9568e+00, -3.9272e-01,  2.5255e+00,
              4.3640e+00, -9.1944e-01, -9.3068e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.0140,   0.2187,  -0.6417,  -1.7403,   2.5179,  -1.4242,   1.5422,
               0.3638,  -1.6624,  -0.2185],
            [ -0.1886,   1.5311,   1.2840,  -3.5038,  -0.7499,   0.0539,  -0.9889,
              -1.9269,   1.2355,   0.2810],
            [ -1.2687,   5.6861,  -4.6403,   6.1343,  -4.3633,  -3.5757,   6.9080,
               0.7012,  -2.3688,   2.2331],
            [ -4.6167,   6.1561,   1.1154,   8.0431,   5.0850,   2.9690,  -4.8956,
               0.9306,   1.0895,  -0.9138],
            [ -2.3023,  -3.1038,   0.1918,   5.9024,  -8.4968,  -3.4710,   8.0827,
              -1.2212,   3.1009,  -0.6290],
            [  0.7101, -13.1369,   0.9459,   5.4222,   5.7541,  -4.2762,  -4.0623,
               1.4753,  -1.4534,   1.3857],
            [ -1.1720,  -2.1267,   3.7192,   1.1224,  -5.0802,  -7.1723,  -3.4471,
               2.6856,  -3.5142,  -4.0627],
            [ -4.3633,   0.3784,  -7.4693,   0.3443,   1.6109,   2.0049,   3.6684,
              -2.2420,   0.7344,   0.1003],
            [  0.9999,  -1.8846,   4.9381,   2.5919,   2.0135,  -0.1431,   1.9464,
               5.0960,  -2.8621,  -0.7853],
            [  6.8415,  -0.4416,   1.5056,  -4.2536,   0.5131,  -0.2789,   1.3963,
               0.3550,  -0.4292,  -0.0905]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.058 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
