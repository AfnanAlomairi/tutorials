
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.6165,  2.4384,  5.0704,  3.1658,  0.1007],
            [ 7.8976,  2.5537,  2.9096,  2.2109,  5.3229],
            [11.8721,  8.4756,  3.7725, 10.6327, 16.8098],
            [ 5.3780,  4.2998,  1.9437, 11.5884,  8.0872],
            [ 8.9929,  2.4014,  0.8660, 11.5658,  6.4974],
            [ 5.3780, 11.9903,  3.6876,  3.7334,  8.0872],
            [11.8721, 13.4215,  4.4826,  4.2765, 16.8098],
            [ 7.8976,  0.4193,  9.9478,  6.5645,  5.3229]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.2056, -0.5436, -0.4339, -0.7429, -0.6334, -0.9926, -0.6031, -0.2846],
            [ 0.4379, -0.0553, -0.2401,  1.3250, -0.7626, -0.2862,  1.0765,  1.5587],
            [ 1.4944, -2.4311,  0.9222, -0.6020,  0.3173,  0.3551,  1.0587,  0.0617],
            [-1.1166,  1.4789,  0.1271, -0.2978,  0.5383, -0.1814, -0.5317,  0.8599],
            [-0.3982,  0.6194, -0.5948,  2.2368, -0.7069,  0.5460, -1.0734, -0.7348],
            [ 0.0102,  0.0999, -0.6013, -0.1453,  1.1556,  0.6829,  1.3152,  0.6052],
            [ 2.1073,  0.6182,  0.2356, -0.6052, -1.0623, -0.2634,  1.6314, -0.4804],
            [-1.3904,  0.0638,  0.6376, -0.1790,  0.7569, -0.4452, -0.1094, -0.5827]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6268, -1.2499,  1.8914],
            [-0.2225,  0.1589,  0.0278],
            [ 1.0641, -0.0533, -2.3468]], requires_grad=True), Parameter containing:
    tensor([[-0.3844]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7905e+00,  5.7795e+00,  2.4174e+00, -6.5097e+00, -3.2347e-01,
              5.0238e+00, -7.2215e-01, -7.2802e+00],
            [-2.4094e+00, -4.1908e+00, -3.9217e+00,  1.6207e+00,  6.6960e-01,
             -5.6666e-01,  2.4673e+00, -3.1964e-01],
            [ 2.3047e+00, -6.3593e+00,  2.8889e-01,  1.8465e+00, -7.1279e+00,
             -8.3061e-03,  3.7957e-01,  7.6422e-01],
            [ 1.0968e+00,  1.0978e-01, -2.3481e+00, -5.1615e+00, -5.6567e+00,
              2.0844e+00, -3.8718e+00,  7.1452e+00],
            [ 3.9096e-01,  5.6627e+00,  3.0956e+00, -1.7858e+00,  3.4091e+00,
             -5.1645e+00, -5.0987e+00, -8.8751e-02],
            [-2.5613e+00, -2.7732e+00, -5.8941e+00,  6.8593e+00, -1.0463e+00,
             -6.1319e+00,  5.8392e+00, -9.5263e+00],
            [ 6.7491e+00, -3.8517e+00, -7.4822e-01, -3.9143e+00, -5.4796e+00,
              4.2318e+00,  1.5351e+00, -2.3758e+00],
            [-1.1758e+00,  2.9436e+00,  1.1996e+00, -7.0137e+00,  8.0551e-01,
              1.2516e-01, -2.4309e+00,  3.8841e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4861,  0.7252, -2.2381,  2.0963,  3.8517, -7.4651,  1.8403, -1.0235,
              3.9642, -2.2609],
            [-1.0796, -1.0682,  6.1257, -5.4408,  3.3598,  0.2672, -2.1985, -0.7646,
              0.9752, -0.1298],
            [-1.4389,  1.2525,  2.6397, -4.3569,  1.1025,  6.9078, -3.3847, -3.4236,
             -0.2507,  3.1488],
            [ 0.9682, -5.7402, -0.8736,  8.2917, -7.2815,  1.2959,  3.7054,  2.3109,
             -1.4252, -0.1770],
            [-0.6095, -2.2318, -0.9861, -0.0344, -1.9421,  3.8953,  5.1151, -1.2024,
             -5.2871,  2.1123],
            [ 1.0111,  0.7220, -0.8407, -5.0837,  1.7655,  1.0223,  1.5738, -4.3394,
             -1.2803, -0.2966],
            [ 0.3632,  1.0416, -1.3136, -1.3195, -0.7177, -5.2344, -2.0473,  2.2053,
             -2.1689, -0.7927],
            [ 0.2057, -3.1886, -0.7907,  1.3070,  3.1477, -1.6609, -2.3331,  4.2824,
              4.2097,  0.5535],
            [ 0.1401,  0.7533, -0.3719, -0.4250, -1.4212, -1.0080, -1.3391,  0.6552,
              0.2627, -2.9525],
            [ 1.4320, -0.4716, -1.7273,  1.3833, -3.5037, -1.2927,  1.2122, -0.1150,
             -0.8902,  0.4473]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.890 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
