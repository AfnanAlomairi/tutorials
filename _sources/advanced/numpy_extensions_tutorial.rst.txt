
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.7117,  6.4796,  5.5524,  6.9529,  3.9999],
            [ 7.4534,  5.3325,  1.6116,  4.3726, 10.4440],
            [11.5455, 10.7761, 14.1090, 10.2043,  2.6054],
            [ 5.5769,  6.2843,  8.7341, 14.7661,  6.7877],
            [11.1465,  5.5322,  6.4604,  6.3347,  2.8316],
            [ 5.5769,  6.1580,  6.0797,  1.1555,  6.7877],
            [11.5455,  4.4626,  5.3612, 13.4791,  2.6054],
            [ 7.4534,  3.8752,  3.0641,  6.3381, 10.4440]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0474, -0.7797,  0.0775,  0.2526,  0.0772,  0.5637,  0.5910,  1.5942],
            [-0.2350,  1.3514,  2.1150, -0.2637,  0.4772, -0.3535, -0.9255,  0.5474],
            [ 0.4178, -0.8517, -0.7057, -1.1112, -0.5384, -0.1741, -2.2056, -0.5436],
            [ 0.3715, -1.9538,  0.5974,  0.6712, -0.1131, -0.7790,  0.4379, -0.0553],
            [-0.7857,  0.2669,  0.6298,  1.1126, -0.8968, -0.2993,  1.4944, -2.4311],
            [ 1.0582,  0.8566,  1.2826,  0.5793, -0.0242,  0.7510, -1.1166,  1.4789],
            [-0.0658,  1.1391, -0.4850, -0.9382,  0.1903, -0.4861, -0.3982,  0.6194],
            [ 0.1994, -0.6363, -0.3548,  2.0727, -2.2736,  0.5558,  0.0102,  0.0999]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2335,  1.3467,  1.2621],
            [ 1.9413,  0.9539, -1.8980],
            [ 0.7019,  1.9120,  0.6973]], requires_grad=True), Parameter containing:
    tensor([[-0.9600]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1951e+00,  1.5547e+00, -1.0976e+00,  3.5599e+00,  1.1324e-01,
             -4.5740e+00,  5.4067e-01,  6.7022e+00],
            [-4.6069e+00,  3.1751e+00,  1.5555e+00, -2.8275e+00,  1.0237e+00,
              3.0555e+00, -2.1751e+00, -1.9635e+00],
            [-2.6980e+00, -7.8188e-01,  3.6115e+00,  3.1292e+00, -4.5576e+00,
             -5.5953e+00,  9.6772e+00,  7.2489e+00],
            [-6.9146e+00, -2.2583e+00,  1.5601e-01,  6.5849e+00,  6.1835e+00,
             -2.7545e-01,  6.0503e+00, -3.3707e+00],
            [-3.4496e+00, -2.9118e+00, -7.1259e+00, -6.6496e+00,  4.0493e+00,
              8.0078e+00,  9.5762e-01,  2.1629e+00],
            [-2.4500e+00,  5.6464e+00,  4.6356e+00, -2.7626e+00, -4.1928e+00,
              1.6006e+00, -4.7656e-01, -1.0963e+00],
            [ 1.5944e+00, -1.7253e-01, -4.7431e+00, -1.8776e+00,  5.4287e-01,
             -2.2898e+00, -8.0838e+00, -2.8747e+00],
            [-6.1736e+00, -8.7449e+00,  1.8564e+00,  4.0553e-03, -9.5825e-01,
              5.4216e+00,  3.8854e+00, -2.5869e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0735,  0.3104, -0.6150, -2.5107, -0.8851,  1.8440,  2.9566,  2.6153,
              2.2617,  2.2510],
            [ 0.7140,  0.2077, -2.0014,  2.2876,  5.0916,  5.2694,  3.3561,  0.4948,
              1.8136, -3.8373],
            [ 1.0329,  2.6557, -1.2691, -3.2289,  6.6474,  4.9880, -2.8170, -2.4466,
              1.9594,  2.4151],
            [-0.1195,  1.8867,  2.7943,  3.5269,  1.8996, -6.0241, -1.2197,  6.7846,
              0.3715, -4.2882],
            [-0.6648, -0.5946, -0.5235,  0.7605,  2.4078, -2.9972,  1.4983, -3.9259,
             -6.2458,  4.7600],
            [-0.3436,  0.3112, -0.0582,  3.8598,  7.0774,  0.7159,  2.4928,  2.1055,
             -0.5683,  0.4791],
            [ 0.7670,  0.6703,  0.8422, -0.0389, -2.7655, -4.2614,  1.6077,  4.2831,
              0.1007, -1.0316],
            [-2.5680,  2.5280,  6.2550,  3.9918,  0.4452, -8.6032,  3.2496,  9.7267,
              2.5847, -3.5174],
            [-0.4578, -2.7446, -0.7112, -0.4108, -3.8427, -8.6579, -1.2180,  2.1778,
             -0.4947,  3.8398],
            [ 0.2400,  0.4441, -0.1940, -0.0725, -1.3153, -3.4265, -2.8156, -0.0517,
             -2.2180, -1.0816]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.790 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
