
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.6260,  6.0065,  4.9707,  9.6986, 19.0072],
            [ 7.4910,  5.7639,  2.8300, 12.3546,  2.4119],
            [ 2.2060,  7.8858,  8.2014,  1.2555,  8.7227],
            [ 5.1576,  9.1356,  8.1162,  6.1709, 11.1019],
            [10.1667,  5.1642,  7.7700,  8.2092,  8.2721],
            [ 5.1576,  1.8943,  9.4037, 10.4264, 11.1019],
            [ 2.2060,  2.1369,  6.3347,  6.9084,  8.7227],
            [ 7.4910,  0.9338,  4.2901,  6.8744,  2.4119]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4885, -0.1955, -0.1487,  0.6842,  0.7038,  0.9576,  1.1252, -0.6564],
            [-0.4382,  0.3446,  2.1949, -0.7774,  1.0865, -0.9284,  0.5681, -0.8811],
            [ 1.3482,  0.0485,  0.0123,  0.8311,  0.6808, -0.7805,  0.1218, -0.7885],
            [-0.7319, -0.0998, -0.1980,  0.3518, -1.2580, -0.3609, -0.7879, -0.0905],
            [ 1.6908, -1.4346,  0.7208,  0.1109,  1.7087, -0.8015, -0.6480,  0.4152],
            [-0.5395, -0.2088,  0.2706, -0.9052, -0.1586,  0.1479,  0.5337, -0.1405],
            [ 0.2608,  0.7264,  1.6049, -0.2801,  2.4899, -0.9941,  0.3352,  0.0357],
            [ 0.2037, -0.2876,  0.6640, -1.1729,  1.8245, -0.7291, -0.9351,  2.6691]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4578,  0.6857,  0.5532],
            [-1.4905,  0.7771,  0.2689],
            [ 0.2432, -0.2251,  1.2364]], requires_grad=True), Parameter containing:
    tensor([[-1.7612]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.0133, -2.2594,  1.0173, -5.9823, -0.5869, -0.0506, -2.2212, -6.0516],
            [-1.0537, -0.6454, -2.2735, -3.8325,  0.5456, -5.9148,  0.1109, -3.3597],
            [-4.0141, -3.9405, -1.0030,  0.4833, -2.8598, -1.7803, -4.3025, -0.0124],
            [-4.6454, -2.8909, -1.7925, -2.5927,  0.1548, -7.1209, -3.5853,  0.6870],
            [-1.3789,  0.3615, -1.5344,  0.6990, -3.9437,  0.1407, -1.7311, -0.8988],
            [-0.1715, -6.2535, -3.6329, -1.7073, -1.6113,  0.2284, -3.0253, -0.4684],
            [-1.0285, -0.5551, -3.1907, -2.8618,  0.4803, -1.6628, -1.3512, -3.0767],
            [-0.7359, -0.1159, -2.2326, -0.0250, -2.4084, -1.4015, -0.9389, -5.5442]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2272,  0.2138, -0.2923, -1.6719, -2.5793, -0.7002,  0.9444,  0.9882,
              0.4308,  0.2446],
            [ 0.7339, -2.5847,  3.2628,  2.1012, -2.6799, -2.8335,  0.2596, -0.2647,
              0.3532,  0.1047],
            [-0.0487,  2.1324, -2.1831,  2.7354, -1.8596, -3.9363, -0.2433,  1.3935,
             -0.1635, -0.2870],
            [-0.6460, -1.7015,  1.4598,  0.9740,  1.6353, -1.7626, -4.1259,  2.6821,
             -0.9320, -0.4256],
            [ 1.0896, -2.5627, -2.4727,  1.7325,  1.5038, -1.3073, -1.2854, -0.6319,
              2.6901, -2.0328],
            [ 1.0199, -0.7783,  1.4432, -0.2516,  3.1730, -0.7635, -5.9481,  0.7306,
              0.2301, -0.2137],
            [ 1.0983,  0.1074, -0.2311,  2.4234, -1.0824,  2.0217, -2.4396,  0.2641,
              3.1729,  0.1546],
            [-2.0933, -0.9173,  1.1561,  4.3028,  1.5756,  0.4418,  0.9216, -2.6733,
              1.3334, -0.0866],
            [ 1.4829, -3.6294,  2.0908,  1.5731,  0.2005, -2.0598,  1.7045,  1.2279,
             -0.3046,  1.3984],
            [-0.2000,  0.7000, -1.4287,  2.7198,  0.3645,  1.0215,  0.4888,  1.9466,
             -0.5123, -0.1938]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.927 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
