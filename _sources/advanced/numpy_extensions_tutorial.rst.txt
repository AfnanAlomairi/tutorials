
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.7675, 10.1523,  9.9134,  3.8890,  4.6121],
            [13.0824,  5.8828, 10.2217,  8.6022,  4.1241],
            [15.7782,  7.1960,  6.4577,  7.9515,  5.1481],
            [ 6.8945,  0.4503,  1.6846,  6.0770, 12.3381],
            [12.1502,  7.3474, 12.5954,  6.1610, 11.1622],
            [ 6.8945,  3.4472, 10.7956, 14.8965, 12.3381],
            [15.7782,  2.9356,  2.1940,  7.4928,  5.1481],
            [13.0824,  4.3944, 11.4719,  5.3277,  4.1241]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0238,  0.8429, -1.1104, -1.7954,  0.1661, -0.0941, -2.0390,  1.4874],
            [ 1.4767,  0.6593,  1.0435, -2.1985, -1.1164,  1.1078, -0.1615, -0.7886],
            [-1.1411,  1.5608, -1.8879, -0.1863, -1.2850,  0.3972, -0.0443, -0.3400],
            [ 0.6439,  1.9223,  0.4559,  0.9284,  1.1189,  0.6177,  1.2929, -0.0858],
            [ 1.4464, -0.4617, -1.1264,  0.1465, -0.2076, -0.3868,  0.5657, -0.2461],
            [-1.6400, -1.2583, -0.9046, -0.2210, -1.4565, -1.3250, -0.6747,  0.3383],
            [-0.0781, -1.0993, -1.6236, -1.2025, -0.3493, -0.6020, -1.2323, -0.0564],
            [ 0.9224,  0.8421,  1.1589,  0.0674, -1.3507,  0.2799,  0.9245, -2.4279]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6240,  0.7896,  0.0647],
            [-1.0179,  0.0646, -0.0542],
            [ 0.9300, -1.6355, -0.1883]], requires_grad=True), Parameter containing:
    tensor([[0.1706]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.0568,  0.5292, -0.3450, -0.7115, -1.0178, -1.0332,  2.8430,  1.8374],
            [-0.9978, -0.7230, -1.2055,  3.0068,  0.5460,  0.2473, -0.5415,  3.2303],
            [-1.1276,  1.2552,  4.3452, -3.5726,  3.0550,  0.8830,  1.5889, -4.3242],
            [ 3.4270, -2.2569, -0.9437,  4.6834, -1.1266, -1.1994, -0.2915, -2.1454],
            [-2.5884,  5.7366,  0.9754, -2.8604,  1.9622, -1.0930,  0.0487, -0.6265],
            [-1.0724, -6.7821,  0.3737,  1.0323, -2.5932,  4.0835,  0.1852,  2.8750],
            [ 1.2476,  3.0295, -1.0726, -1.5986,  1.4421,  1.4539,  3.9331,  2.7141],
            [ 1.9999,  3.2455,  1.3504,  0.1422,  1.5218, -0.1592, -2.6487, -2.3504]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1555, -0.7180, -1.8212, -2.4363, -1.8786, -1.4661,  0.0381,  0.5764,
             -0.5394, -0.0519],
            [ 0.5725,  1.1154,  1.8411,  1.9214,  1.5921,  1.9845, -1.1009,  0.5564,
             -0.1298,  0.0468],
            [ 0.0304,  2.1076,  0.8346,  1.4542,  3.0049,  1.2712,  4.9928, -1.6518,
              1.6170,  0.1855],
            [-0.2385, -2.7253,  0.1201, -0.3041, -1.1071,  0.4800, -2.6063,  2.1310,
              1.3677,  0.0666],
            [ 0.5267,  0.3678, -3.7608, -0.0159, -0.3265, -2.8119,  0.0258, -4.5212,
             -1.1245, -0.1891],
            [ 1.5938,  1.0309, -0.3752,  2.2826,  0.2128,  0.4145,  3.0933, -0.6939,
             -3.1753, -0.3530],
            [-0.1098, -0.6214,  5.2420, -0.2854,  0.0167,  0.7481, -3.4835,  3.1300,
             -0.3084, -0.0355],
            [-0.1669, -1.1535, -4.4343,  2.4070,  1.2288,  0.1252, -3.9637,  0.5211,
             -0.0292,  0.0452],
            [ 1.5172, -4.5409,  0.5559, -1.8571, -5.6136,  3.2377, -1.6351, -0.0476,
              0.6105,  0.1609],
            [ 0.5862, -0.1898, -1.0604, -0.7872,  0.3216, -2.8444,  2.8962, -3.2159,
              1.6147,  0.2171]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.022 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
