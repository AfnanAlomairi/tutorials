
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.2570,  5.2051,  8.3549,  8.3040,  6.7819],
            [ 5.4244,  2.7118,  9.6338,  9.6444, 16.0223],
            [ 3.2050, 10.8753,  0.4262, 10.2694,  3.1543],
            [ 7.4235,  8.7447,  2.4601,  3.9187,  6.9593],
            [ 0.4458,  7.6810,  2.3178, 12.6339,  5.0017],
            [ 7.4235,  4.7415,  3.5130,  2.0674,  6.9593],
            [ 3.2050,  3.4854,  6.1682,  9.7352,  3.1543],
            [ 5.4244, 11.3140,  4.5036, 14.7357, 16.0223]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2356, -0.6052, -1.0623, -0.2634,  1.6314, -0.4804,  2.0702,  0.1676],
            [ 0.6376, -0.1790,  0.7569, -0.4452, -0.1094, -0.5827, -0.6844, -0.0703],
            [-0.6611,  1.3584,  0.5778,  0.2398, -1.3595, -0.9071,  0.2431,  1.6492],
            [-0.2574,  1.5372,  0.9719,  0.5505,  0.8189, -0.6038,  0.6711,  0.7886],
            [-2.0403,  1.4337, -1.1593, -0.1746, -0.0235,  0.1031,  1.0631,  0.4189],
            [-0.8826, -0.7224,  1.5358, -0.7381, -0.2727,  1.8270, -0.3657,  0.1224],
            [ 0.2388, -1.5840,  1.4263, -0.8889,  0.1521,  0.8436,  0.3155, -0.5529],
            [ 1.7180, -1.5679,  1.2090, -1.7633, -0.9906, -0.4128, -0.3848,  0.7395]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9619, -0.4628,  1.2590],
            [-1.2334,  0.3595, -0.7981],
            [ 2.1782,  0.2311, -0.8472]], requires_grad=True), Parameter containing:
    tensor([[0.3430]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.6869,  2.6204, -4.5244,  8.9738,  2.3619, -3.3985,  7.2864, -3.9588],
            [ 0.9546, -2.4795, -2.8460, -0.7802, -9.6091,  3.5845,  5.7575, -3.5358],
            [ 2.3021,  2.6697,  8.8909, -2.5286,  4.4593,  2.1114, -5.1961,  4.1076],
            [-4.8913,  5.5808, -0.9793,  3.2875,  3.0544,  0.2448,  3.5404, -1.3342],
            [ 1.2646, -2.4220,  2.3504,  0.9073, -5.5606, -3.1893, -3.1976,  4.9111],
            [ 3.2666, -0.9319, -3.8010,  3.7541,  4.8871, -2.8575,  3.4475,  0.0768],
            [-0.0191,  2.0539, -2.3026, -1.5511, -1.4055, 13.4650,  2.6165, -5.3453],
            [-2.0367,  1.6105,  1.5828, -2.1489,  0.9320, -5.8499, -6.0532, -1.7435]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8487, -0.9467,  0.4170,  0.1713,  0.5561, -0.7147, -0.7898,  3.4081,
              0.9118, -2.4046],
            [-2.3636, -1.5040,  0.6887,  0.1793, -0.8336, -1.9238,  0.4673, -0.0235,
             -0.2587,  2.6155],
            [ 0.2547, -2.1230, -1.3269,  4.3206, -2.6575,  2.4720,  1.2028, -6.3762,
             -0.9071,  1.2690],
            [ 3.3868, -3.3968, -0.4988, -1.1257, -1.8354,  1.0613,  2.4973, -2.3720,
             -0.6308,  0.4341],
            [ 0.9450,  5.3336,  0.6113, -1.2274,  2.8930,  4.4052, -4.0862,  0.9590,
              1.7037, -1.4069],
            [-2.8647, -1.5119, -0.0565, -2.7243,  3.9494, -3.6000, -1.2197,  3.0295,
             -2.7481,  1.6603],
            [-1.3102,  2.1565, -3.2399,  0.7729, -1.3393, -2.4560,  4.8261,  0.3569,
             -0.7626, -2.4756],
            [ 5.5659,  3.5902,  4.4023, -0.5169, -2.9695, -2.4073, -1.4126,  4.1074,
              5.0619, -2.2438],
            [-4.2094,  2.9941,  0.3791, -0.7659, -0.1157,  5.2297, -6.8443, -0.4820,
             -0.8878,  1.6357],
            [ 1.4010, -4.3698, -1.6123, -1.2205,  1.6604,  0.1112,  3.3932, -1.4327,
             -1.8820,  0.9131]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.886 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
