
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.2427,  5.2869, 10.6046,  7.0299,  4.1773],
            [ 7.2946, 11.5244,  5.6797,  4.8570,  3.5900],
            [ 9.6182,  5.5080,  4.8348,  3.4440, 14.2818],
            [ 6.7076,  2.9957,  7.5225, 10.0193,  6.9430],
            [ 2.5056,  2.5993, 13.2914,  9.3540, 14.3889],
            [ 6.7076, 10.7175,  8.0879,  4.3451,  6.9430],
            [ 9.6182,  5.4120,  5.9129,  8.8485, 14.2818],
            [ 7.2946,  6.0102, 14.0140,  7.8131,  3.5900]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4961, -0.3888,  1.1541,  0.1848,  0.9032, -1.9396, -0.9180, -0.0256],
            [ 0.3554,  0.7944, -1.4012, -2.0131,  0.8820, -0.6851, -1.2903, -0.8018],
            [ 1.7039,  0.4444,  1.9225,  0.0269, -0.6605, -0.8935, -0.5238,  0.7565],
            [-0.7085,  2.2961, -1.1626,  0.6653,  0.9163,  0.1151,  0.2147,  0.5612],
            [-0.5712, -1.6866, -0.7841,  0.9349, -0.9318,  0.1830,  0.6974,  0.9104],
            [-0.2589, -1.2421,  1.1179,  1.1499,  0.2687, -0.2982,  0.4074,  0.8764],
            [ 1.2104, -0.2793, -0.4569,  1.3461,  0.9544, -0.6717,  0.7866, -0.0180],
            [-0.3023,  2.0977, -2.1005,  0.2466,  0.2759,  0.2854, -1.6715,  0.7781]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7114, -1.5245, -1.2730],
            [-0.1111, -1.9959, -0.8493],
            [ 0.6282, -0.3302,  0.4572]], requires_grad=True), Parameter containing:
    tensor([[0.0239]], requires_grad=True)]
    Output from the convolution:  tensor([[-8.5054e-02,  2.5912e+00, -9.7239e-01, -4.7477e+00,  2.7094e+00,
              5.4915e+00,  2.3349e+00,  4.1490e+00],
            [-1.8125e+00,  3.6094e+00,  1.8159e+00, -2.4757e+00,  1.2112e+00,
              4.9339e+00,  2.4879e+00, -4.1923e-01],
            [-1.9333e+00,  3.2526e+00,  3.9846e+00, -2.6173e+00,  4.4757e-01,
              3.7723e+00,  6.2598e+00,  4.0812e+00],
            [-7.5117e-02,  4.8668e+00,  3.1965e+00, -2.4428e+00, -3.0990e+00,
             -1.4491e+00,  2.9818e+00,  3.2663e+00],
            [-3.1993e+00, -5.3532e-01, -1.9103e+00, -3.1420e-01, -4.0299e+00,
             -7.0878e+00, -2.4259e-01,  1.5009e-01],
            [ 4.4588e-02, -4.9146e+00, -5.1610e+00, -3.0000e+00, -3.7423e+00,
             -7.8364e+00, -1.7834e+00, -6.1868e-02],
            [ 1.2480e+00, -8.5018e+00, -5.4483e+00, -4.0181e+00, -1.6417e+00,
             -7.6712e+00,  6.2903e-03,  1.4664e-01],
            [-3.4766e+00, -7.4619e+00, -4.7774e+00,  3.8253e+00,  1.2765e+00,
             -5.5104e+00,  7.3896e-01, -4.4608e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0716e-01, -3.6351e-01, -5.3652e-01,  4.2515e-01, -7.0976e-03,
             -2.9760e+00, -4.4549e+00, -1.5680e+00, -9.7835e-01, -1.5341e+00],
            [-1.5083e-02, -7.5684e-03, -5.5473e-02,  7.3244e-01,  3.3760e+00,
             -2.9368e+00, -7.8178e+00, -5.7024e+00, -6.5897e+00, -2.8318e+00],
            [-5.5357e-01, -1.0618e+00,  6.5464e-01,  2.3994e-01,  4.5014e+00,
              5.0025e-01, -2.6674e+00, -3.0709e+00, -2.1236e+00,  1.2066e+00],
            [-6.8592e-01, -4.0783e+00, -2.0249e+00,  8.8642e-01,  2.7075e+00,
              3.0608e+00,  1.2790e-01,  3.7813e+00,  7.1265e+00,  2.6746e+00],
            [ 1.0712e+00, -5.3957e-01, -2.1072e+00, -2.0902e+00, -3.2242e+00,
             -7.8230e-01, -5.1310e+00,  2.0270e+00,  4.9802e+00,  2.4711e+00],
            [ 1.5137e+00,  4.0185e+00,  3.9869e+00, -1.6064e+00, -2.7243e+00,
             -2.4611e+00, -1.7963e+00, -6.1532e-01,  1.8079e+00,  6.1879e-01],
            [-5.9612e-01,  3.2733e+00,  3.6545e+00,  2.7686e+00, -7.1218e-01,
              1.4559e+00,  3.0317e+00, -3.9726e+00, -4.6655e+00, -3.2695e+00],
            [-4.9780e-01,  1.3172e+00,  4.1621e+00,  2.1245e+00, -2.1801e+00,
              5.6758e-01,  1.3071e+00, -2.2475e+00, -1.9567e+00, -3.5391e-01],
            [ 2.4423e-01, -2.3421e-01,  3.6025e+00,  1.8524e+00,  2.1408e-01,
              1.4814e+00,  3.8195e-02,  2.7120e+00,  2.4260e+00,  9.8035e-01],
            [-2.9733e-01, -3.1200e-01, -6.5398e-01,  2.5583e-01, -1.0427e+00,
              8.5245e-01, -1.4818e+00,  5.6892e-01, -5.4553e-01, -1.8656e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.183 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
