
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[12.2296, 14.2704,  7.2193, 10.7274, 11.3739],
            [ 3.2854,  6.1884,  4.8510, 10.1493,  2.3254],
            [ 0.5078,  5.5680,  3.1323,  4.4022, 11.8296],
            [ 6.7278,  3.0047,  6.6879,  6.5008, 11.6356],
            [11.5868, 16.7341, 15.0601,  2.6186,  3.6870],
            [ 6.7278,  7.8323, 18.0884,  7.3199, 11.6356],
            [ 0.5078,  5.9196,  2.8095,  9.3380, 11.8296],
            [ 3.2854,  3.5444,  8.0388,  4.8269,  2.3254]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7246e-01,  6.3788e-01,  1.1498e+00,  3.3805e-01, -5.5614e-01,
              8.8090e-01, -1.2372e+00, -1.6542e+00],
            [-1.8391e-02,  4.9610e-01, -1.9587e+00, -3.2623e-01,  7.4016e-01,
              1.0116e+00,  8.4805e-01,  5.3051e-01],
            [ 1.0153e+00, -2.3841e-01, -4.7418e-02,  1.2492e-01,  4.1041e-01,
             -5.5264e-01,  1.4858e-01,  1.0404e-03],
            [ 2.6918e-01, -6.3090e-02, -4.6645e-01, -6.1409e-01,  6.7208e-01,
              2.9859e+00, -3.5579e-01, -1.2730e+00],
            [-2.4920e+00, -7.9746e-01,  8.3039e-01,  1.4476e+00, -9.7733e-01,
              1.3942e+00, -2.0797e-01,  1.4217e+00],
            [ 1.0241e+00, -3.3986e-01, -2.8919e-01, -4.1407e-01,  1.2474e+00,
              2.0238e+00,  1.1125e+00,  4.3460e-01],
            [-1.3124e+00, -2.7594e-01,  1.6898e+00, -7.8698e-01, -2.5968e-01,
              5.8746e-01, -8.7696e-02, -4.4570e-01],
            [-5.1677e-01, -4.4834e-01, -6.8430e-01,  5.2595e-01,  1.7289e+00,
              2.0857e+00, -1.1640e+00,  3.1039e+00]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6684, -0.1209, -0.3476],
            [ 0.6613,  0.2682,  0.7999],
            [-1.2026,  0.4749,  1.3422]], requires_grad=True), Parameter containing:
    tensor([[0.2199]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.4223e-01, -3.9483e+00, -1.1000e+00, -4.8204e-01,  8.5678e-01,
              3.2858e+00,  2.3392e+00, -6.8145e+00],
            [-2.4821e+00, -9.4940e-04, -1.4748e+00, -3.7725e+00,  1.6323e+00,
              7.1964e+00,  6.9334e-01, -1.4650e+00],
            [ 1.3565e+00,  1.8513e+00, -3.3704e+00, -2.3469e+00, -1.8794e+00,
             -6.0296e-02,  4.8138e+00,  2.8160e+00],
            [ 3.9129e+00, -1.6385e+00, -2.0316e+00,  8.6709e-01,  1.2836e+00,
             -2.9592e+00, -1.4781e+00, -1.1236e+00],
            [-2.6224e+00, -1.6816e+00,  1.3555e+00,  1.2060e+00,  1.8428e-01,
             -3.2830e+00, -3.6252e+00,  4.3037e-01],
            [-7.0995e-01,  1.0660e-02, -3.0201e+00,  4.6408e-01, -1.0599e-01,
             -2.4337e+00,  1.5590e+00, -2.8533e-01],
            [ 1.0500e-01,  2.7077e-01, -2.9294e+00, -1.4796e+00, -2.4969e+00,
              2.8545e+00,  9.3350e-01, -4.0043e+00],
            [ 1.1444e+00, -3.5379e-01, -3.5318e-01, -2.0131e+00, -3.5873e+00,
             -2.0946e-01,  1.7824e+00,  8.0454e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.7625e-01,  3.4856e-02, -8.6676e-01,  3.1405e-01, -8.0477e-01,
              7.0819e-01, -4.7039e-01,  8.0879e-01,  2.8098e-01, -5.1876e-01],
            [ 9.3861e-01, -1.4047e+00, -1.1270e-01,  1.7030e+00, -6.7311e-01,
             -4.1072e-01, -1.6819e+00,  1.3099e+00, -8.2606e-01,  1.3815e+00],
            [-1.2522e+00, -1.9866e-01,  1.3019e+00, -2.0524e+00,  1.3042e+00,
             -2.4633e+00,  9.6317e-01, -1.6517e+00, -4.5058e-01,  1.7048e+00],
            [-4.1199e-01,  4.5913e+00, -2.7537e-01, -3.4042e+00, -1.8595e+00,
              2.1450e+00, -5.7979e-01, -1.1111e+00, -1.4174e-01, -1.3276e+00],
            [ 4.5956e-01, -2.1869e-01,  3.9439e+00, -5.9843e-01, -3.7874e-01,
              3.9019e+00,  7.9437e-01, -1.8962e+00, -4.6245e-01,  1.1083e-01],
            [-3.7439e+00, -3.3947e-01,  2.6216e+00,  3.3899e+00,  3.9684e-01,
              4.9053e-01, -1.8962e-01, -1.7047e+00,  5.3068e-01,  1.2142e+00],
            [ 1.1062e+00, -3.8311e+00, -4.3490e+00,  4.3065e+00,  5.7487e+00,
             -8.4694e-01,  1.1505e+00,  2.4868e+00,  1.0145e+00,  3.6510e-01],
            [ 1.6774e+00, -1.3259e+00, -5.5598e+00, -1.0873e+00,  1.2979e+00,
             -1.4985e+00,  1.2604e+00,  4.1245e+00,  2.8476e+00, -2.7351e-01],
            [ 1.6232e+00, -3.1944e-01, -2.3237e+00, -1.8308e-01, -1.6553e+00,
             -1.4408e+00, -1.5973e+00,  2.0868e+00,  1.4787e+00,  5.0649e-01],
            [-1.1608e+00,  1.9784e+00,  2.5458e+00, -3.2416e+00, -1.1087e+00,
              3.5244e-01, -1.9702e-01, -9.1062e-01, -3.1047e-03,  1.2248e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.073 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
