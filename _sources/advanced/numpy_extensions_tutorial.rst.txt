
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.2966,  4.4007,  8.4354, 17.1717,  1.9909],
            [ 7.8701,  6.8758,  7.5644, 12.3373, 14.3027],
            [ 4.4995, 10.3648,  4.6175,  2.5863,  3.5555],
            [ 3.7975,  4.4506,  6.7146,  4.8346,  5.5099],
            [ 6.8069,  7.5864,  1.4386,  6.6236,  4.9920],
            [ 3.7975, 10.5783, 10.2033,  4.4488,  5.5099],
            [ 4.4995, 16.2453,  9.0394,  9.6363,  3.5555],
            [ 7.8701, 10.3413,  6.2870,  2.5665, 14.3027]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5191, -0.5413, -1.2559, -0.6360,  1.8148, -1.3565,  1.0787, -0.8076],
            [-0.4015,  0.8909, -0.3335, -1.3271, -0.9697, -2.0239, -0.0922,  0.6627],
            [ 0.2573, -0.7919, -0.9216,  0.5896, -0.3755,  0.8921,  1.5317, -0.5582],
            [-0.5532,  0.2859, -1.5945,  1.6651,  0.3859, -0.1428, -0.6744,  0.8172],
            [-0.6508,  1.2577, -0.4210,  0.3009,  0.7218,  1.2965,  0.4588,  0.3061],
            [-0.2718,  0.4316,  0.7848, -1.5512, -0.1869, -0.6646, -0.6185,  0.4974],
            [ 0.7175,  1.0395, -0.7515,  0.0598,  1.5208, -2.1087, -1.0827, -0.3103],
            [-1.1582,  0.8355, -0.3439,  0.3130,  2.9782, -0.2951, -0.7266, -2.6700]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4751,  0.3843, -0.5338],
            [ 1.0126, -0.7514, -1.0166],
            [-1.7318, -2.1674, -1.8032]], requires_grad=True), Parameter containing:
    tensor([[0.0335]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9661,  4.8598,  0.0158, -4.4756, -1.8396, -3.6105, -5.6976, -6.2461],
            [ 0.8819, -6.2496, -3.6348, -0.4236,  0.5656,  0.6500,  3.6741,  4.2005],
            [ 1.4520,  2.1511, -6.0222, -1.5402,  0.2383,  2.3597,  3.7599, -2.9127],
            [-4.3359, -7.1437, -6.7133, -7.1288, -4.1198, -2.5929,  1.3060,  5.7183],
            [ 2.0803,  5.3468, -4.2843, -5.4099, -1.5414,  0.2548,  2.1934, -3.5207],
            [ 5.2057,  3.0961, -5.8807, -2.1318, -5.4125,  1.7938, -6.9873, -3.4253],
            [ 3.8214, -6.7744, -3.3925,  0.1805,  0.6256,  3.5075,  2.8784, -2.8919],
            [ 1.9518,  1.1545, -4.2191,  2.0505, -1.6076, -1.8393, -1.5876,  7.3439]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  1.1765,  -0.8230,  -0.6508,   3.0093,  -1.2775,   1.3925,   1.6853,
              -0.1353,   0.5960,   0.0782],
            [ -1.3090,  -2.0805,   4.6652,  -4.1034,   1.5906,   4.9127,  -2.9458,
               2.1235,   1.0220,   0.0649],
            [  3.9260,   4.3719,  -5.4947,  -2.5320,   4.3193,   5.0965,   3.9666,
               7.3301,   1.5226,   0.5014],
            [ -4.7917,  -6.8273,   3.2510,   3.4383,   3.2711,   0.1899,   5.7074,
               4.4166,  -0.5201,   0.7302],
            [  5.0651,   8.2395,  -1.0467,  -5.5726,  -4.5099,  -0.9684,   5.6219,
               3.6474,   4.4158,   0.7193],
            [ -2.8754, -11.0231,  -2.2034,   5.9510,   3.5391,   4.6299,   3.6693,
               4.1282,   2.4265,  -1.6725],
            [  0.9538,   4.6942,   2.0932,  -0.8168,   3.1981,  -1.5337,   2.7596,
              -2.4134,  -2.2844,  -4.7175],
            [ -1.8631,  -3.3909,  -0.7332,  -3.5055,   2.4466,   4.9845,   4.9624,
              -0.5660,   3.1457,  -2.9528],
            [  2.3548,   1.3455,  -5.3441,  -4.1376,   0.2079,   4.1541,   5.6560,
               5.4943,   1.5406,  -2.8620],
            [ -2.6125,  -7.0784,  -7.8156,  -6.5118,  -1.6759,  -0.6417,   3.0941,
              -1.8164,  -3.1064,  -4.1592]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.833 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
