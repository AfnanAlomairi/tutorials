
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[13.8826, 14.8873,  4.3570,  7.6928,  6.6638],
            [ 3.0513,  6.7166,  5.3277,  2.5511,  8.4535],
            [ 6.0241, 12.1984, 11.5278,  6.0770,  6.1905],
            [ 2.2311,  5.8066,  2.9456,  8.6738,  6.8080],
            [11.9542,  8.6013,  5.1516,  8.8479,  3.7903],
            [ 2.2311,  2.9843, 11.3695,  5.8032,  6.8080],
            [ 6.0241,  8.6427,  6.3618,  2.0531,  6.1905],
            [ 3.0513,  8.9979,  5.6635,  4.6676,  8.4535]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7738,  1.5457, -0.1736, -1.6917, -1.1538,  0.3730, -0.0315, -0.3717],
            [ 2.3309,  0.7052,  0.5950, -1.3030, -0.0137, -1.4484,  0.4091,  0.7906],
            [ 0.8002,  0.1804, -0.6381,  0.0282, -0.0474, -0.7797,  0.0775,  0.2526],
            [ 0.6642,  0.5384,  0.1951, -0.5328, -0.2350,  1.3514,  2.1150, -0.2637],
            [ 0.4530, -0.3143,  1.6801,  0.2117,  0.4178, -0.8517, -0.7057, -1.1112],
            [ 0.5507,  2.1762, -0.9209,  0.2517,  0.3715, -1.9538,  0.5974,  0.6712],
            [-0.6031, -0.2846,  0.5074,  1.1977, -0.7857,  0.2669,  0.6298,  1.1126],
            [ 1.0765,  1.5587, -1.0039, -0.1318,  1.0582,  0.8566,  1.2826,  0.5793]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4679,  1.1882, -0.7390],
            [ 1.4756, -0.4552,  1.5962],
            [-1.8475, -0.2315,  1.0144]], requires_grad=True), Parameter containing:
    tensor([[-0.8350]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8336, -1.5137, -3.2407, -0.7595, -3.7869,  0.5081, -2.0756,  6.2762],
            [-3.7366, -2.2270, -3.6437, -3.3776,  0.0185,  2.3638,  2.4548, -5.7587],
            [-1.1910, -2.4625,  8.0617, -1.1846, -4.7125, -3.5974,  0.1629,  5.5584],
            [-6.5180, -2.1625, -5.7036, -2.4408, -3.1214, -1.8103, -0.7813, -0.9118],
            [ 5.8122, -0.9803, -1.3762, -2.1375,  0.0356,  2.2456, -4.5911, -2.3552],
            [ 3.4444,  0.4050, -3.2121, -5.6373,  2.6297, -2.8386, -3.0392,  3.7483],
            [-0.1893,  0.9677, -1.1811, -0.3750, -5.0639,  2.8937, -0.8744, -3.8853],
            [-3.1333, -0.3402,  1.7349,  0.6789,  2.2852, -6.6687,  1.2590,  6.3979]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4469,  1.4367, -1.6173,  0.9844, -0.4176, -0.5720,  1.3233,  0.0935,
             -2.3032,  1.5486],
            [ 1.4817, -2.4371,  4.7520, -3.1994,  0.8185, -1.2864, -0.3025,  0.1317,
             -1.2834, -2.8236],
            [-2.0212,  3.5696, -0.8248,  2.7608, -2.5439, -1.0029, -1.4443,  1.4763,
              4.6802, -3.7794],
            [ 0.8738, -3.2964,  0.5858,  5.7036,  3.2493,  0.6735, -5.1073,  1.1240,
             -0.8818,  0.2049],
            [-1.3620, -3.1349, -2.1044, -4.7542,  4.5881, -1.5812,  4.0548, -0.4395,
              0.4752, -0.2890],
            [ 0.9992,  2.7815, -1.3591,  4.6426, -0.6752,  1.4904,  0.2191,  3.2695,
              0.1988,  3.0656],
            [ 0.5119,  1.8178, -5.3668, -3.5238, -2.3922,  2.1692, -0.9549, -4.0378,
              0.2953,  2.4655],
            [ 1.8466, -1.4734,  3.7235, -3.8690,  0.2205, -2.1184, -1.2202,  0.9163,
             -2.6792,  0.7198],
            [-1.5819,  1.5743,  0.8859,  0.6310,  0.8789, -1.0908,  5.2296,  2.1563,
              0.5289,  2.9680],
            [-1.0403, -0.0360,  2.1167,  1.6489, -1.8468, -3.2616, -2.7215, -1.7245,
              1.3725,  1.4228]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.874 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
