
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.9137,  2.2358,  9.6432,  0.5375,  6.3279],
            [11.2295,  8.1773,  6.1716,  9.4934,  4.4176],
            [ 8.8986,  9.7648,  6.5245,  8.7862,  1.8620],
            [ 2.2709,  7.9826, 12.2234,  8.6006,  2.1387],
            [ 4.3435, 14.7100,  7.1956,  6.4739,  6.1143],
            [ 2.2709,  3.6362,  4.4313,  0.5874,  2.1387],
            [ 8.8986,  4.5403,  7.5405, 17.9603,  1.8620],
            [11.2295,  6.9987, 14.1122,  4.8784,  4.4176]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1147, -0.0221, -0.4741,  0.5578,  0.4834, -0.9616,  0.3798, -0.6307],
            [-1.3696,  1.3156,  1.0257, -0.7148, -0.7145,  0.5708, -0.4335, -0.6791],
            [ 1.5774, -0.8566,  0.1950, -0.9326, -2.7241,  1.8570,  1.2808,  0.7666],
            [-0.9037,  0.2419,  0.0351,  0.8787, -0.6374,  0.2923, -0.2285, -0.4005],
            [-0.3831,  1.7737,  0.1281, -0.4271, -1.5882, -0.4363,  1.7875, -0.3793],
            [-0.4789, -0.0783,  1.2282,  0.1948,  0.0971,  0.1648, -0.6188,  1.5525],
            [ 0.0668, -0.1853,  1.4131,  0.2514,  1.0685,  1.8450,  0.9147,  1.8979],
            [ 0.9739,  2.0278, -0.5913,  1.0138,  2.2435, -0.0209, -0.8452, -1.3563]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3969, -0.0868, -1.5270],
            [ 0.1947,  0.6563, -0.2515],
            [-0.0178,  0.2053, -0.6413]], requires_grad=True), Parameter containing:
    tensor([[-1.3651]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7139,  0.8903, -2.0727, -3.1505, -3.1850, -3.7409, -2.2961, -3.4007],
            [-0.6968,  1.3992, -0.1509, -3.7082, -0.5128, -0.7059, -2.5064, -3.2150],
            [-3.4669, -0.1370, -0.2886, -4.6248, -1.4794, -0.5484, -0.5615, -0.3685],
            [-3.9768, -0.4408, -0.2830, -3.7450, -1.5360, -5.0054, -3.3796, -3.3206],
            [-2.2209, -0.5853, -0.6566, -3.5848,  0.8300, -2.6181,  0.8167, -2.6416],
            [-1.0729,  0.2181, -0.2716, -2.8974,  0.3459, -3.2699, -1.7637, -2.3206],
            [-2.6759, -0.7262,  1.3009, -1.9200, -1.3461, -3.0490,  0.8030, -2.2782],
            [-3.0072, -3.1331, -0.9680, -0.9247, -2.7050,  0.5870, -1.9116, -1.0450]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2942, -0.1267, -1.2379, -0.9322,  0.1123, -2.4004,  2.2558, -0.0836,
             -0.5101, -0.9811],
            [-0.2015,  0.7507, -1.5801,  2.1652, -0.5815,  1.0637, -0.1982,  1.5405,
              3.6176, -1.2118],
            [-0.2134,  0.8480, -2.3898,  1.0935, -1.0127, -2.9045, -0.6473, -1.3731,
              1.4813, -0.2717],
            [ 0.0666,  0.3180, -2.3627, -0.0963, -1.2151,  1.1347, -0.6235,  1.5999,
              1.9963,  0.6916],
            [ 0.5968,  0.8340,  1.5571,  1.1934, -1.2573, -3.1342,  0.3288, -1.6391,
             -1.3573,  0.3294],
            [-0.3634, -0.7572,  0.5990,  2.2731,  2.0977,  0.0166,  0.1057, -0.1679,
              0.0149, -0.3133],
            [-0.4531, -0.9836, -2.3259, -3.2538, -1.5385, -1.8131,  0.6081,  0.9752,
             -0.5912,  2.1887],
            [-0.1732,  1.6829, -1.1386,  2.9008,  1.1518,  1.4880,  0.5152, -2.6690,
              0.1057,  1.4634],
            [ 0.1847,  0.6624, -1.6707, -0.4762, -1.1302, -0.3477,  0.9551, -0.5469,
             -1.0173,  1.2007],
            [-0.0190,  0.2449, -0.9875,  1.0273, -0.4942,  0.6018,  0.7738, -1.2816,
              0.1986,  0.5910]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.053 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
