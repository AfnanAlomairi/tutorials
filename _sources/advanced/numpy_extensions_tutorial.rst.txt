
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.6465,  4.3025,  6.3668,  2.2705,  1.0390],
            [ 3.6839,  6.5498,  7.0804,  5.8550,  6.9085],
            [ 4.6092,  4.8373,  6.5397,  7.1375,  4.7783],
            [11.0310,  2.0057, 10.5813,  2.1690,  5.0794],
            [ 2.3311,  0.9542, 11.4373,  4.7887,  0.7926],
            [11.0310,  4.3233,  0.8103, 10.5421,  5.0794],
            [ 4.6092,  7.7328,  8.4368,  4.0988,  4.7783],
            [ 3.6839,  5.1404,  2.3974,  9.9353,  6.9085]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-3.1437e-01, -1.8089e-01,  1.3023e+00,  8.1726e-01, -5.5659e-01,
             -9.0284e-01,  1.3135e-01,  1.0870e+00],
            [-2.1606e-01,  6.6075e-01,  1.7808e+00,  3.5521e-01, -1.4681e+00,
              1.2561e+00, -4.9316e-01,  4.5326e-01],
            [ 4.8120e-01, -5.2421e-01, -8.8342e-01, -4.7533e-01, -1.1771e+00,
              3.8230e-02, -3.0476e-01,  5.3815e-01],
            [ 7.9675e-01,  1.8844e+00,  2.6062e-01, -5.2699e-01, -2.0090e-01,
              1.1537e+00,  5.6293e-01, -1.1477e-01],
            [ 6.7097e-01, -5.0104e-01,  8.1413e-01, -3.6498e-01, -4.9392e-01,
              3.9659e-01, -5.0030e-01, -5.5476e-01],
            [-9.4935e-02, -4.6740e-01, -8.0077e-01,  1.0227e-03,  1.8546e-02,
             -1.0242e+00,  3.6001e-02, -7.4763e-01],
            [-1.6371e+00,  5.1940e-01,  5.7284e-02,  1.0813e-01,  1.1752e+00,
             -3.2969e-01,  1.1060e+00,  1.1158e+00],
            [ 7.5807e-01,  2.5791e-01, -5.5953e-01, -1.1821e+00,  3.3720e-01,
              8.0916e-01,  7.1529e-01, -1.2124e+00]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2585, -1.3409,  0.2386],
            [ 0.7943,  1.6729, -0.9727],
            [-1.0471,  0.9804,  1.3164]], requires_grad=True), Parameter containing:
    tensor([[0.9200]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.2198,  7.2465, -1.0275,  0.5682, -2.0230,  1.0084,  4.6985,  4.8183],
            [-1.2669, -1.2113,  3.5050,  3.8018,  3.2210,  1.3747, -4.4170,  0.5641],
            [ 3.2006,  5.2224,  1.8060, -2.7896,  3.6020,  4.4857,  3.6681, -1.9167],
            [-2.0874, -1.2170, -0.4148,  2.0548, -0.6395, -4.4415,  4.1314,  3.7475],
            [-2.1643,  4.2889,  3.9779,  1.4074, -0.2844, -0.0835, -3.4013, -1.6196],
            [ 3.6534, -4.1676, -1.6622,  1.5112,  7.8034,  2.5851,  4.3225, -1.1074],
            [ 2.5991,  2.9041,  1.3880, -0.2453, -0.6213, -1.2241,  2.5533,  3.5139],
            [-2.4372,  5.1295,  0.7719, -0.5483,  3.5911,  5.7960, -3.4860,  3.9138]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.9439e-02,  3.8985e-01,  8.0276e-01,  6.5953e-01, -2.3095e-01,
              9.7324e-02, -8.8622e-01,  2.2662e+00, -3.9973e-01,  6.0694e-03],
            [-1.6209e-01, -7.2557e-01, -1.0219e+00, -1.3100e+00,  7.8617e-01,
             -1.0021e+00,  3.6228e-01, -1.0825e+00,  2.0527e+00, -1.8208e-01],
            [ 5.1785e-01,  1.7387e+00, -6.7562e-01, -2.5793e+00, -6.8447e-01,
             -9.7824e-01,  1.4908e+00, -3.6995e+00,  2.0423e+00,  3.8144e-02],
            [-9.5341e-01, -1.2359e+00,  4.7027e+00,  4.0928e+00, -3.0714e+00,
              1.9311e+00,  2.3626e+00, -1.9632e+00, -5.1145e+00,  1.3378e+00],
            [ 1.3398e+00, -2.0705e+00, -8.2021e+00,  8.5007e-01,  4.9098e+00,
              2.8577e+00,  1.0620e+00,  3.3002e+00, -3.4989e+00, -2.2752e+00],
            [-4.3772e-01,  1.3119e+00,  3.3286e-01, -1.0182e-01,  2.1397e-02,
             -5.0739e-01,  1.2240e+00,  3.9912e-01, -6.2169e+00, -2.0259e-01],
            [ 4.5608e-01,  4.2070e-01, -1.9286e+00, -3.5908e+00,  3.9542e+00,
             -7.5827e-01, -4.0906e+00,  1.9431e+00,  4.7229e+00, -4.4405e+00],
            [-8.8213e-02, -9.8731e-01, -2.4967e+00, -1.6880e+00, -7.0675e+00,
              1.2992e+00,  1.5740e-02, -3.4517e+00, -2.8379e+00,  4.6457e+00],
            [-1.8830e-01,  2.6649e+00,  5.2467e+00,  5.0145e+00, -3.3673e+00,
             -3.0415e+00,  1.7202e+00,  4.4523e+00,  9.0964e-01, -2.8645e+00],
            [-2.4614e-02, -2.4535e+00, -6.1023e-01,  5.1054e+00,  4.5152e+00,
              2.7045e-01,  1.9782e-01,  3.7774e-01,  1.1112e+00,  9.3743e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.833 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
