
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.4807,  5.3126,  2.7174,  5.1565,  2.6510],
            [12.6119,  2.6349,  2.5385,  3.4726,  3.1739],
            [ 8.4261,  6.4154,  9.7954,  5.4194,  1.1495],
            [ 8.7232,  3.3581,  4.5457,  8.2929,  6.8460],
            [12.9817,  9.7382, 10.7317,  5.7439, 12.0277],
            [ 8.7232, 11.1654,  6.2395, 15.5681,  6.8460],
            [ 8.4261,  1.8095,  2.9416,  8.3757,  1.1495],
            [12.6119,  8.2965,  7.8209,  6.5568,  3.1739]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7806,  0.6676,  0.2316, -2.6561,  0.2288, -1.2169, -0.8681, -0.2606],
            [-0.0709, -0.1874,  0.7258, -0.0984, -1.8197,  0.0348, -0.7765,  0.8008],
            [ 0.7927, -1.2339,  0.2363,  1.1713,  1.2850, -0.1461, -0.5813, -1.2763],
            [-0.8978,  0.2235,  0.0618,  0.3331, -1.1787, -0.3551,  0.1254,  0.5055],
            [ 0.8435,  0.0404,  0.7430,  0.0138, -0.5965,  0.1925, -1.3834, -1.2801],
            [-0.1691,  0.9519, -0.7814, -0.2266,  2.4472,  0.5093,  1.0608,  2.4625],
            [ 0.6345,  0.7155,  0.7221, -0.0929, -0.5480,  0.7741, -0.4908,  0.3682],
            [ 0.0424,  0.9834,  0.9867,  0.8403, -0.6517,  0.8086,  1.8416,  0.6991]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0925,  1.7198, -1.5428],
            [-0.1945,  0.9792, -2.6811],
            [ 1.1381, -0.7221,  0.0549]], requires_grad=True), Parameter containing:
    tensor([[-0.5830]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.2327, -5.7832, -2.1366,  3.5414, -2.2377,  5.0425, -3.2166,  0.2102],
            [-4.6189,  0.8906,  5.0470, -5.2735,  0.1084, -0.1330,  0.2418, -2.8462],
            [-8.4683,  4.7420,  4.7071, -6.5155, -0.3311,  0.7684,  1.5851, -3.5259],
            [-7.6029,  3.3961,  3.5430, -5.3150,  0.1565,  0.9130, -1.8483, -2.0607],
            [-9.6425,  5.5364, -2.1485, -4.1623,  2.1988, -1.9885,  2.8835,  2.4468],
            [-7.8663,  1.8773, -8.8380, -0.2294, -0.2196, -2.8226,  1.0144,  0.4015],
            [ 0.7480, -2.5900, -3.0805,  4.0825,  1.5372, -3.2027, -0.0361,  5.4262],
            [-4.7735,  1.8995, -2.7958,  2.4978, -0.5834, -6.8108,  9.6298,  1.6329]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0335,  0.6988, -1.8290, -1.4225,  0.3971,  0.6159,  4.3245, -5.1558,
              0.9913,  1.0480],
            [-0.0233, -0.3265, -1.3881,  3.1124,  0.3667,  6.1103,  1.4780, -5.5081,
             -0.3362,  4.6323],
            [ 0.5747, -2.8527,  1.2685,  1.5143, -2.8447,  5.4655, -5.5906, -1.1743,
             -0.6021,  4.1678],
            [-0.4458, -0.6275,  0.6082,  1.3388,  0.4661, -0.2732, -1.3093, -4.5104,
              3.2514, -2.6616],
            [-0.7418,  0.2613,  1.4472,  3.1837, -5.1464,  7.9929, -5.8123,  1.6418,
             -0.4826, -4.1334],
            [-0.0781,  0.8778,  1.5438, -6.1946,  4.1624,  2.8797, -3.7874,  0.1525,
             -1.1803, -3.5095],
            [-1.0017,  4.4860, -3.3139, -3.5145,  4.9607, -2.8789, -1.3255,  2.9986,
             -3.3732,  1.0835],
            [ 2.1088,  0.2775,  1.1151, -6.5474, -5.0984, -0.7811,  1.2957,  0.6167,
             -6.2094,  3.9068],
            [ 0.2455,  3.3533, -1.4510, -5.4092,  2.0971,  0.6034,  3.2891, -5.1192,
             -3.5731,  0.9848],
            [ 1.3876,  0.9987, -1.8886, -0.2181, -0.0292,  2.3333,  0.4150, -1.4540,
              0.3675, -0.0215]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.861 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
