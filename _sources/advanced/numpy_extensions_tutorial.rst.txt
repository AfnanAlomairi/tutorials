
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.1843,  2.0434,  6.4411, 10.0169, 10.0616],
            [ 9.4913,  2.1542,  3.6199,  6.9035, 12.0700],
            [ 9.1256,  1.3775, 14.8642,  4.6249,  5.8357],
            [ 4.6199,  1.2400,  2.8765, 12.5643, 11.6927],
            [ 2.6733, 17.2801,  3.1890,  3.9927,  5.1466],
            [ 4.6199,  2.8426,  3.1943, 10.4497, 11.6927],
            [ 9.1256,  9.8150,  7.7541, 13.1530,  5.8357],
            [ 9.4913,  6.5759,  3.1968,  8.4248, 12.0700]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4117, -0.2641,  1.6950,  0.5741,  0.3953, -0.2269, -0.7480,  1.0722],
            [ 0.4729, -0.6787,  0.6181, -0.9533, -1.5922,  0.9819,  1.1623,  0.1804],
            [ 0.7995,  1.9988,  1.9455, -0.9429,  0.8125,  0.1545, -1.1394,  0.3116],
            [-0.1718,  0.1106,  1.7505, -1.0693,  1.9638,  0.5032,  0.0745,  0.9691],
            [-0.6562, -0.4564,  0.2376,  2.4336, -2.2101,  0.9405, -0.2215, -0.8192],
            [-0.8414, -0.3032, -0.9226, -1.1980, -0.2673, -0.0646,  1.1194,  0.4381],
            [-0.5067,  1.5413, -1.0755, -0.1321,  0.2051, -0.1665, -1.5456, -0.8387],
            [-0.4472,  0.7238, -0.4921,  0.3881, -0.2674,  2.0679, -0.6739,  1.8472]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2027,  0.4734,  2.0177],
            [ 0.4923, -1.7701, -1.3456],
            [-1.4930,  1.0785, -1.1013]], requires_grad=True), Parameter containing:
    tensor([[-0.9607]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8248, -0.1179, -4.9001, -3.6391,  3.0652, -6.4120, -0.4852, -3.5853],
            [ 9.9145,  0.2797,  0.7097, -7.7158, -1.1304,  0.3265,  4.2946, -3.0488],
            [-5.5359, -1.9158,  1.5490, -2.7858, -0.8060, -0.6788,  0.2873, -1.2594],
            [-5.2095, -5.1129,  4.9474,  3.3189, -4.1036, -7.2072,  0.6312,  1.4083],
            [ 0.4910,  4.1741, -1.7399,  5.6715,  1.7932,  1.5187, -0.8142, -6.2774],
            [ 6.4488, -3.3408,  0.3702, -2.9420, -3.6744, -3.2420, -1.7522,  3.5725],
            [-2.5936,  1.0961, -9.0806,  0.6415,  2.5494,  9.5385, -0.0903, -2.8423],
            [-4.1134,  0.4883,  4.9673, -7.7585, -3.7896, -9.5643,  2.2095,  3.5041]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.3350e+00,  6.1018e-01,  2.4549e+00, -9.7654e-01, -8.8458e-01,
              9.0147e-01,  1.0061e+00,  4.4218e-01,  1.1850e+00,  1.3775e+00],
            [ 4.1490e-01, -1.5613e-01, -2.5890e+00, -1.7771e+00, -3.5388e-02,
             -1.2850e+00,  7.6894e-01, -1.1138e+00, -5.2483e+00, -3.6194e+00],
            [-3.0124e+00,  1.9775e+00,  4.9576e+00, -2.7136e+00, -3.1719e+00,
              5.8536e-01, -1.2026e+00, -5.0554e-01,  6.8229e+00,  1.9200e+00],
            [ 2.2204e-02,  1.5258e+00, -4.4045e+00,  4.2774e+00,  5.0892e+00,
             -4.6004e+00, -3.2773e+00,  3.2267e+00, -1.3403e+00,  2.9421e-01],
            [-2.3466e+00,  3.6247e+00,  2.2153e+00, -2.2265e+00, -3.6374e+00,
              1.5012e+00,  2.1826e+00,  3.4665e+00, -2.0989e+00,  4.8339e-03],
            [ 2.9813e+00, -2.6786e+00, -7.1539e+00,  9.3493e+00,  8.7747e+00,
             -4.5017e+00, -5.4865e+00, -1.6940e+00,  1.9749e+00,  1.0914e+00],
            [-2.9064e+00,  1.0316e+01, -5.0471e-01, -8.8794e-01, -6.9272e+00,
              4.9965e-01,  1.0303e+01, -1.7541e+00, -2.0806e+00, -1.3168e+00],
            [ 3.3799e+00, -7.0653e+00,  6.0388e+00,  3.5878e+00,  5.3767e+00,
             -3.3867e+00, -1.0092e+01, -1.6389e+00,  4.5082e-01, -1.0697e+00],
            [-5.0298e-01,  1.6413e+00, -3.8656e+00,  1.7086e+00, -5.8263e+00,
              4.8959e+00,  2.9750e+00, -1.2707e+00,  1.0461e+00,  1.1361e+00],
            [-1.0112e+00, -1.7364e-01, -3.6858e-01, -3.6958e-01,  2.6909e+00,
             -1.4286e+00,  1.7218e+00,  1.2947e+00, -5.9425e-01,  6.0493e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.026 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
