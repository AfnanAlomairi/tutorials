
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[14.2248, 11.4360,  9.3402,  3.5604,  0.3572],
            [10.9690,  6.5721,  5.3631,  8.5159, 13.1738],
            [ 9.4390,  7.3908,  9.9762,  7.5351,  7.0837],
            [ 6.1738,  9.9841,  4.6887, 13.6789,  1.1655],
            [ 0.4974,  1.0300,  7.3785,  5.5813,  8.1062],
            [ 6.1738,  5.1792,  4.1721,  8.7030,  1.1655],
            [ 9.4390, 12.8361,  3.1035, 12.2560,  7.0837],
            [10.9690,  3.6551,  5.0171,  7.3025, 13.1738]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0734,  0.6196, -1.3237, -0.9158,  0.1184, -0.3371,  0.6787,  0.2964],
            [ 1.1545, -0.5701, -0.0452, -0.0933, -0.8279,  2.3602, -0.3481,  1.6033],
            [ 0.6345,  0.6560,  1.1352,  1.2346,  0.6137,  1.7211, -0.4373,  0.4209],
            [ 0.2334, -1.2695, -1.7433,  1.6804,  1.4351,  0.9835, -0.1627, -0.0093],
            [ 1.0024, -1.0127,  0.9630,  0.3598,  0.5176,  0.6170,  1.7040, -1.1631],
            [ 0.0521,  1.6592,  1.6725, -1.6164,  2.3462, -0.0594,  0.0597,  0.8463],
            [-0.2695,  0.0053, -0.8076, -0.5944,  0.9348,  1.1614,  0.1569, -1.7528],
            [-0.7539, -0.5711, -0.8487,  1.4263,  0.3184,  0.2310, -0.7989, -0.9833]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6212, -0.3824,  0.5904],
            [-1.4386, -0.0736,  0.1932],
            [-0.1158, -1.5598, -0.5799]], requires_grad=True), Parameter containing:
    tensor([[0.4335]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.2877,  3.3612,  0.1996, -1.5878, -1.8407,  2.6173, -2.7401,  4.0732],
            [ 2.0794,  1.0967,  0.1447, -0.3143, -0.7302, -4.5499,  3.3559, -3.4437],
            [ 1.1716,  2.4401,  2.6509,  2.8178, -4.0719,  0.7923, -2.0220,  3.3174],
            [ 4.1583, -0.4354, -5.9074,  1.6433,  3.2373, -2.6871,  0.2477,  2.2458],
            [-1.6440,  3.5543,  4.0000, -2.0486,  1.7471,  1.6865, -2.5162,  0.2946],
            [ 2.4642, -1.0221, -2.2196,  4.7863,  4.3820,  2.2925,  1.5241, -1.1739],
            [-3.3757,  3.5907,  2.3286, -2.4200,  1.8634,  0.6832,  4.8974,  3.8947],
            [-3.5548, -2.4342,  2.2770,  2.1719,  2.1077,  1.8129,  1.7853,  3.3064]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.3066e-01,  1.8518e-01,  1.0599e+00, -2.0485e-02, -2.8075e-01,
              9.2452e-01, -8.5577e-01, -1.2515e+00,  9.1856e-01, -1.1157e+00],
            [-1.5705e+00, -7.6293e-01, -3.4007e+00,  1.5945e-01,  1.3234e+00,
              1.1038e+00, -1.5807e+00,  2.1653e+00,  5.2885e-01, -1.1125e+00],
            [ 1.7603e+00, -6.7670e-01, -6.3142e-03, -5.4072e+00,  3.0668e-01,
              1.8351e+00,  4.2089e-01,  2.1868e+00,  2.0381e+00,  8.3039e-01],
            [ 2.9401e-01,  2.6098e+00,  1.2648e+00,  3.4894e+00, -3.5387e+00,
              2.3759e+00,  9.0416e-01,  2.1323e+00,  1.7705e+00,  9.6541e-01],
            [-5.7972e-01,  3.7694e+00,  2.6149e+00,  6.8602e-01,  1.3388e+00,
             -2.7908e+00, -1.1458e+00,  7.6372e-01,  1.7684e+00, -1.1607e+00],
            [ 1.5368e+00, -3.1192e+00,  5.8757e+00,  3.2985e+00,  1.1491e-01,
             -1.2189e+00, -3.9692e+00,  1.0761e+00, -2.0092e-02, -1.3947e+00],
            [-9.1974e-01,  1.8364e+00, -4.6942e+00,  2.6232e+00,  2.2279e+00,
             -7.3092e-01, -1.7796e+00,  1.8638e+00,  2.3451e+00,  2.0292e+00],
            [-8.1372e-02, -9.1036e-01,  1.7068e+00, -7.9232e-01,  3.1245e+00,
              2.9731e+00,  1.8163e+00, -3.0606e+00,  1.9801e+00,  1.3661e+00],
            [-4.2515e-02, -1.4337e+00, -3.2148e+00, -4.8612e-01,  9.9463e-01,
              3.5698e+00,  1.4282e+00,  3.9717e-02, -2.4274e+00, -9.2377e-01],
            [-3.3102e-03, -1.5541e-01, -1.7278e+00, -3.5937e+00, -2.4211e+00,
             -8.8123e-01,  1.4401e+00, -3.6689e-01, -1.1202e+00, -2.8592e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.046 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
