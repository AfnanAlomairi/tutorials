
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.8569,  6.6316,  4.5935,  5.2596,  2.7198],
            [ 5.9314,  5.1089, 10.0624,  3.1506,  5.2811],
            [ 7.6129,  2.8237, 17.7595,  4.4763,  8.5016],
            [ 8.9208,  6.3865,  7.0529, 10.4623,  2.4171],
            [ 7.5240,  9.6742,  3.8987,  2.1108,  6.6591],
            [ 8.9208,  3.9605,  7.9885,  9.0761,  2.4171],
            [ 7.6129,  6.2173, 13.0086,  8.9520,  8.5016],
            [ 5.9314,  0.9933,  7.3011,  0.5698,  5.2811]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0995,  1.7389,  1.1321, -0.7844, -0.0669,  0.7703,  0.5190,  0.5049],
            [ 0.5595,  1.0707, -1.0317, -0.8175, -0.8533,  2.0873, -1.0153, -1.5924],
            [ 1.1733,  0.6416,  0.3679,  0.6408, -0.0677, -1.0561, -1.0769, -0.1209],
            [-2.2050, -0.9126,  0.6071, -1.4104, -0.6007, -1.6609,  0.7699,  0.3091],
            [ 1.4456, -1.3114,  0.9477,  1.1544, -0.9044, -0.6070, -0.0220, -0.1430],
            [ 0.6840,  0.3060, -1.3089,  0.0083, -0.1645,  1.2483, -0.6691,  0.4364],
            [-0.4806,  0.1522,  0.1762, -0.2895, -0.6948, -0.6942, -0.4475, -0.6647],
            [-1.0169, -0.9437,  1.5443,  1.2445, -0.3349,  0.0458, -0.1543,  0.0807]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4158, -0.7984, -0.2552],
            [ 0.5063,  0.2812,  0.5877],
            [-0.0064,  1.4108,  0.7730]], requires_grad=True), Parameter containing:
    tensor([[0.4938]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.4990, -0.3086,  1.1016,  2.8817,  3.1745,  1.9163,  2.3207,  1.0483],
            [ 4.4563,  3.8576,  1.9426,  4.9300,  1.4651,  1.1668,  1.3820, -2.0730],
            [ 1.0344,  4.8233,  0.4599,  0.7784,  0.9416,  2.2724,  2.3795,  1.5725],
            [-2.0470, -0.0543,  1.4768, -0.3614, -0.2417,  4.5182, -0.5279,  2.4880],
            [ 1.3024, -1.3172,  0.5009,  1.5335, -1.3037,  1.2838,  2.3021,  2.1585],
            [ 1.5837, -0.1448, -0.1264, -4.7191,  1.8989,  1.8349,  2.0099,  2.2362],
            [-0.8610,  2.0292,  0.9447, -4.6082,  3.1418,  1.8391,  0.2636, -0.7871],
            [ 0.5146,  2.3916,  0.5173,  4.2773,  0.7629,  1.0458,  0.2435,  0.4562]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.9196e-02, -1.1145e-01,  1.4529e-01,  1.0641e-01,  1.0437e+00,
              1.4483e-01, -1.8422e+00, -2.2348e-01, -1.9079e-01, -7.5027e-02],
            [-3.7535e-01,  4.6169e-01,  1.2614e-01, -2.1049e+00,  2.2884e+00,
              1.8789e+00, -9.0222e-01,  1.6046e+00,  1.6371e+00,  5.6025e-01],
            [-7.8551e-01, -7.0312e-01,  1.1018e+00, -1.4430e-01, -2.8951e+00,
              5.6025e-01,  3.9822e+00, -9.8360e-01, -1.5339e+00, -6.1645e-01],
            [-4.7869e-01, -3.0440e+00, -1.1382e+00, -1.0547e+00, -4.7144e+00,
              4.9009e-01,  3.7519e+00, -2.8707e-01, -1.3292e+00, -1.0237e+00],
            [-1.8461e-01, -1.1367e+00, -4.5315e+00, -4.0242e+00,  1.2210e-01,
              3.3552e-01, -3.1020e+00,  2.4063e+00,  1.4827e-01, -9.4256e-01],
            [-7.5386e-01,  1.4311e+00, -1.3002e+00,  2.4340e+00, -1.4149e+00,
             -3.2834e+00, -3.1414e+00, -2.2779e+00, -2.4066e+00, -2.6574e-01],
            [-1.1614e+00, -2.4689e-01,  4.6582e-01,  3.1075e+00,  2.0432e+00,
             -5.3651e-01,  2.4734e+00,  5.0678e-01,  2.1566e+00,  6.1336e-01],
            [-2.2415e-01, -3.4403e+00, -1.7399e+00, -1.9321e+00,  1.6814e+00,
             -8.1737e-02, -6.6675e-02,  1.9337e+00, -4.2427e-01, -1.0440e+00],
            [ 3.7164e-01, -1.3677e+00, -1.2183e+00, -1.5817e+00,  3.6286e-01,
              1.6288e+00,  1.2338e+00,  4.4353e-01, -8.4885e-01, -4.6047e-02],
            [-4.6117e-03,  1.0179e+00,  2.9618e-01,  1.3146e+00,  2.1980e+00,
              3.9010e+00,  2.6306e+00,  9.5744e-01,  1.7695e+00,  8.3086e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.842 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
