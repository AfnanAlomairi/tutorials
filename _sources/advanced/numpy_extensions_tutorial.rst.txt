
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[10.5958,  6.1785,  4.7418,  7.6900, 14.9072],
            [ 5.9835,  4.9936,  4.6443,  1.8083,  7.2325],
            [ 6.7706,  6.0660,  4.8042,  2.8108,  3.7254],
            [ 6.1174,  6.1755,  5.5980,  1.2611,  1.3471],
            [ 2.8562,  9.8539,  1.0379,  5.4881, 10.6925],
            [ 6.1174,  4.6369,  6.3648,  8.3799,  1.3471],
            [ 6.7706,  7.7424, 11.4888, 11.0418,  3.7254],
            [ 5.9835,  5.6620,  8.4550,  2.9300,  7.2325]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6878,  0.7255, -0.3009, -0.3247, -0.3694,  0.4822,  0.3729, -0.3746],
            [ 0.8174,  1.0053,  0.0443, -0.4605,  0.2781,  0.0129,  0.6175,  1.0103],
            [-0.1980,  0.4130, -1.1009,  0.3562,  0.5660,  1.2457,  0.2992, -0.4679],
            [ 0.8775,  0.7417, -0.7582,  0.0764,  0.2909, -0.2099, -0.0389, -0.8671],
            [-0.0662,  2.4896,  0.2119,  0.2601,  0.0050,  0.6058,  0.6204,  1.0562],
            [ 0.0191,  0.9634,  1.2280, -0.7518, -1.9427,  0.4437,  0.2493,  1.5082],
            [ 0.1466,  0.2811, -1.0714,  3.2165, -0.5747, -0.1070, -0.8896, -0.0949],
            [-0.1009,  0.0699, -1.1594, -0.5121,  0.0428, -0.4231,  0.4164,  0.3816]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3292, -1.5376,  0.9937],
            [ 0.9635, -0.9914,  0.6710],
            [-1.1541,  0.4700, -0.0797]], requires_grad=True), Parameter containing:
    tensor([[0.5085]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0657, -0.0168,  2.0876, -2.7101,  2.4388, -0.8787,  1.9653,  2.4365],
            [-0.7942, -1.8108, -0.2390,  1.8242,  5.1012,  0.6558, -3.4233,  4.3095],
            [-2.0237,  5.7158, -1.3701,  0.1431,  1.1624, -2.1289,  0.9029,  1.6905],
            [-3.6695,  1.7892, -1.5670,  4.6738,  0.5536, -0.1606,  3.3422,  3.5481],
            [ 2.4880, -2.0934,  1.9485,  0.1831, -0.7568, -1.4003,  0.5067,  1.1597],
            [ 3.2957, -0.6600,  3.2129,  1.4233,  1.2152, -0.7705,  4.6321, -1.9659],
            [-2.0208, -1.9178, -1.0648,  1.1004, -0.1892,  0.3830,  0.3172,  1.5824],
            [-2.9367, -0.0365,  1.3906,  1.8890, -2.0091,  4.2915, -1.4324,  1.8081]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.4636e-01,  8.2799e-01, -1.6671e+00,  3.1770e+00, -4.1332e+00,
              2.0586e+00,  3.7272e-01,  6.3458e-02, -7.1111e-01,  2.6005e-01],
            [-7.2364e-01,  1.6709e+00, -2.7007e+00,  5.7438e+00, -7.0016e+00,
              1.6272e+00, -7.7459e-01,  4.1625e+00, -1.0128e+00, -5.4716e-01],
            [ 6.6981e-01, -2.1999e+00,  3.0977e+00,  6.1051e-01, -4.5930e+00,
              2.1770e+00, -2.7127e+00,  4.0594e+00, -1.8812e-01, -1.2406e+00],
            [ 1.2548e+00,  1.5757e+00, -2.0119e+00, -8.1199e-01,  1.9316e+00,
              6.2523e-01,  2.3210e+00,  3.4186e+00, -2.1892e+00, -5.8167e-01],
            [-2.5631e+00,  4.3795e+00, -1.1594e+00, -1.5136e+00, -8.7224e-01,
             -3.0584e+00,  3.0487e-01,  5.3418e-01,  6.6538e-01, -8.5767e-01],
            [ 2.0079e+00, -1.5915e+00, -3.7093e+00,  6.3185e+00, -6.5448e-01,
              1.4222e+00,  4.6757e+00, -4.9328e+00, -4.9434e-01,  1.1366e+00],
            [ 1.5402e-01, -1.8871e+00, -1.9705e+00,  2.9872e+00,  1.6146e-02,
             -3.1687e+00, -2.9417e+00,  2.9882e+00, -1.9156e+00,  1.5885e+00],
            [ 8.9210e-01,  1.9303e-01, -1.3454e-01, -9.7846e-01,  1.5500e+00,
              4.4416e+00, -2.0629e+00, -1.3759e+00,  1.7241e+00, -4.0155e-01],
            [-1.2558e+00, -1.5823e+00,  1.3609e+00,  1.6851e+00, -2.5478e+00,
             -1.5578e+00,  8.4524e-01, -1.7243e+00,  8.1147e-01, -3.8961e-01],
            [ 2.5399e-01, -5.0822e-03, -4.0116e-01, -7.4121e-01,  1.4714e+00,
              5.4364e-01, -5.9217e-01,  7.8606e-01, -2.6728e-01,  4.2540e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.055 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
