
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.1382, 12.2057,  7.8120,  2.3614,  4.0869],
            [ 7.3375,  3.0805,  4.1171,  2.2746, 10.3529],
            [11.1226,  9.4074,  7.7396,  4.7412,  2.2068],
            [12.3079,  6.6973,  9.0747, 14.3412, 17.6391],
            [ 3.3575, 12.7056,  7.7284, 10.5102,  7.7055],
            [12.3079,  3.9565,  7.7905, 11.5544, 17.6391],
            [11.1226, 10.5926, 16.6053,  5.5117,  2.2068],
            [ 7.3375,  8.0885, 17.1338,  2.4449, 10.3529]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3501, -0.2723,  1.0666, -0.8953,  1.4148, -0.0125, -0.3333, -0.5290],
            [-0.8303, -1.9901, -0.8779,  0.2204, -1.9548, -1.4056, -0.4880,  0.4707],
            [-0.5387,  0.1378,  0.9247,  0.2938,  3.0301,  0.4879, -0.3087, -3.0138],
            [-2.7828,  1.3489,  0.2684, -1.1277, -0.5994,  1.8373, -1.0715, -0.4055],
            [-0.5581, -0.8499, -0.5913,  0.9187, -1.7054,  0.6651,  1.6032, -1.8161],
            [-0.8290, -0.4278,  1.2995, -1.0200, -0.8534, -1.3622, -0.1737,  1.5378],
            [-1.5726, -1.0080, -1.1255,  2.0840,  0.2845, -1.1648, -0.4375,  0.5809],
            [ 1.1613,  0.0216,  2.1849,  0.3705,  0.8323,  0.3204,  0.6857, -0.6079]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5119,  0.5956, -1.3606],
            [-0.7178,  1.0851,  0.6409],
            [-2.2925,  0.2502,  2.2999]], requires_grad=True), Parameter containing:
    tensor([[1.1097]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.3176, -0.0351,  0.6463,  3.7496, -1.4770, -2.2047,  2.8360,  3.2931],
            [-3.6938,  5.4758,  3.9754,  1.2452,  7.5093, -8.2195, -7.3456,  3.9624],
            [-1.8990, -4.3868,  7.2542,  4.4067, -1.7067,  1.2402, -1.3591, -3.7247],
            [ 3.4930, -3.4040, -3.0635, -3.1310,  4.7810,  8.2397,  5.0107, -0.1803],
            [-3.3294,  4.1375, -1.3830, -7.5857,  5.5249,  5.0663,  0.4177,  6.8837],
            [ 2.8730,  0.9585,  1.4069,  1.6335, -2.1245, -2.2815,  3.0156,  5.8531],
            [ 2.9138, -6.8692, -0.5393,  7.5158, -0.2471, -5.2001,  6.3173,  0.2845],
            [ 0.7661,  3.5053,  2.6158, -3.2775, -4.4574,  1.3068,  2.0096,  0.0919]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4738, -0.9844,  0.8366,  1.6842, -0.7758, -3.0595,  2.2561,  2.1127,
             -0.2272, -0.5045],
            [ 0.6804, -1.5390, -2.9702,  2.4029,  2.7331, -0.9263, -2.8478, -2.4085,
              1.5662,  0.1882],
            [ 2.5939,  4.0454, -6.8965, -6.3332,  7.7072,  4.2475, -5.6472, -3.6047,
              0.1823,  1.4099],
            [-0.5618,  6.1210,  0.2314, -6.0361, -1.7310, -1.3815,  3.7199,  1.6933,
             -0.9851, -0.9536],
            [-2.6182,  0.9434,  4.0131, -2.7352,  0.5791,  0.3927,  0.1785,  0.4913,
             -1.0618,  0.3662],
            [-0.5696,  0.7809,  1.4846, -5.3903,  3.8764,  3.3194, -1.8210, -1.4579,
             -3.2333,  2.1962],
            [ 1.0302, -1.7376,  3.2827,  0.5950, -7.0189,  3.1174,  1.7508,  2.8841,
             -1.4758, -0.4053],
            [-2.5082, -2.3862,  4.5899,  5.2220, -1.7693, -2.5204, -3.8403,  5.8865,
              3.5533, -4.6344],
            [-2.3896, -0.1061,  1.0935, -1.2182, -1.3681,  1.1211,  0.8435,  2.0051,
              3.5338, -2.1388],
            [ 3.0368,  4.4423, -2.1181, -8.6137, -5.4883,  1.4501,  6.6532, -0.2506,
             -1.6132,  2.7720]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.092 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
