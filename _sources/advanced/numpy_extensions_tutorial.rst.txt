
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.1902, 12.3005,  4.7206,  7.1890, 14.7851],
            [ 7.7455,  9.7256,  4.7971, 11.5329,  8.9374],
            [ 1.1611,  8.5954,  8.8131,  6.2401,  2.4527],
            [ 3.4769,  4.9040,  3.0535,  5.2209, 10.5709],
            [ 1.2692,  9.0404,  4.0199, 11.2428,  0.4445],
            [ 3.4769, 10.3801, 11.0413,  7.6031, 10.5709],
            [ 1.1611, 14.0403, 17.0319, 14.9684,  2.4527],
            [ 7.7455,  3.1101,  8.9870, 14.9674,  8.9374]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6018,  1.0559, -1.0808,  0.9672,  1.2443, -0.4963,  1.2105, -1.8517],
            [-0.2250,  0.6923,  0.1665,  0.1728,  0.8279, -0.0129, -0.8431,  0.6138],
            [ 1.0875, -0.7491,  0.7244, -2.3002, -1.4278,  0.1153,  0.8751,  0.1374],
            [ 0.5852, -1.6006,  2.9875, -1.0154, -2.7081, -1.0287,  0.9191,  1.2436],
            [ 0.2738, -1.2666, -1.2442,  1.5517,  1.0062, -1.0304,  0.2760, -1.4308],
            [ 1.1825, -0.7796, -0.7183, -2.5280,  0.6064, -0.5803,  0.8225,  0.6700],
            [-0.1069, -0.1438, -0.1781,  0.2441, -1.3567,  1.0572,  1.6605,  0.5353],
            [ 0.1972,  1.3270, -1.5048,  0.1894,  0.0092, -0.8224,  2.1175,  0.2663]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7936, -0.5171,  0.4521],
            [ 0.0432, -0.7329,  1.1308],
            [ 0.0831,  0.5600,  1.0296]], requires_grad=True), Parameter containing:
    tensor([[-0.9418]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.6948,  1.3956, -1.5921,  2.5220, -1.1572, -2.5881, -1.1224, -0.5114],
            [ 0.8133,  1.2925, -3.9816,  0.1405, -1.0658, -0.2747,  2.9688,  2.0149],
            [ 1.4075, -1.7093, -1.8366, -0.4536,  0.6209, -0.8385,  2.4323,  0.5999],
            [ 0.3141, -3.5109, -0.9998,  1.5643, -0.9059, -1.8538, -1.2104,  2.5751],
            [-2.1508, -0.9956,  0.5871, -1.3539, -2.6384, -2.3484,  0.3579, -0.0454],
            [-0.9523, -0.4901,  1.6383, -1.7951, -3.2108, -1.0213,  1.0849, -3.3697],
            [-0.4460, -1.1543,  0.4708, -2.4509,  0.0896,  0.4060,  0.9775,  0.7966],
            [-2.4451,  0.2316, -0.5667, -1.1750, -1.5062, -2.9729, -2.4687,  0.1008]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1207, -0.7481, -0.6178,  0.6570,  0.3614, -1.2821, -0.7552,  0.4139,
              0.0514,  0.0295],
            [ 0.7926,  0.7647, -0.3617,  0.1244, -0.3577, -1.1742, -0.4591,  2.9834,
              0.7372, -0.6040],
            [ 0.7613,  0.8118, -0.5042,  1.3243, -0.7057,  0.9761,  0.0318, -0.3134,
              0.3771, -0.6881],
            [-1.1508, -0.7151, -2.0036, -0.0150, -1.2537,  2.1710, -0.1634,  0.0255,
             -0.6214,  0.2569],
            [ 0.5310, -1.9315, -1.0416,  0.6237, -2.3845,  2.2191, -4.2155,  1.0687,
              4.3786,  0.5973],
            [-0.7631,  0.5918,  1.2316,  2.1094, -1.1862,  0.1809, -0.2079,  1.3781,
              2.1696, -2.2496],
            [-0.6580, -1.5159,  1.4035,  3.1537,  0.1205, -3.8540,  2.4724,  4.3504,
              2.8203, -2.4457],
            [ 0.7026,  1.1409,  1.8366, -1.2306, -2.3426, -0.6941,  2.6193,  1.9283,
             -1.8493, -1.9291],
            [ 0.0361,  0.9525,  0.7253, -1.4197,  0.0955, -0.3127,  3.7822,  0.1676,
             -3.3291,  0.9352],
            [-0.0607, -0.4872, -1.2459, -0.7280,  0.6276,  0.8157,  0.8500, -0.3253,
              1.5438,  2.1314]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.941 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
