
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[10.4485,  7.4026, 10.9477,  4.2676,  3.7050],
            [11.8113,  8.5418,  4.6137,  8.7449, 11.9435],
            [ 7.3998,  9.3619,  4.4244,  3.1912, 13.3297],
            [ 6.4841, 11.1991,  7.8203,  4.9626,  8.6055],
            [ 1.4695,  8.0462, 15.0448,  8.7427,  4.9257],
            [ 6.4841, 10.1818, 16.7364, 10.3782,  8.6055],
            [ 7.3998,  4.2381, 11.4022,  8.4063, 13.3297],
            [11.8113,  3.5029, 12.1803,  9.8688, 11.9435]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1869,  0.7025,  0.1623, -0.8446, -0.4556,  0.4740,  1.9973, -0.9735],
            [-2.8461, -1.0139, -1.6584, -0.1029,  0.3223,  0.8706, -0.6291,  0.7948],
            [-0.8141,  1.3329, -0.6638, -0.1433, -1.4743, -0.2444, -1.3866, -0.7254],
            [-0.6823, -0.9503,  0.9690, -0.2882, -0.2290, -2.8740,  0.3287, -0.3483],
            [ 2.7663, -0.6266, -2.2625, -2.3669,  1.6445,  1.7349, -0.4738, -1.5210],
            [-0.1637,  0.9949,  0.4096, -0.4489, -0.2016,  0.4376,  0.2039, -1.1964],
            [ 0.8855, -1.5947,  0.8475, -1.6534, -1.0270,  1.6788, -0.7544, -0.3667],
            [ 0.6092, -0.5068, -0.3802,  0.9519,  0.4669,  1.4782,  0.9310,  0.2621]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4573,  1.1664, -1.4825],
            [-1.2481, -0.2812, -1.9963],
            [ 0.7087,  1.4968, -0.3752]], requires_grad=True), Parameter containing:
    tensor([[0.1046]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7867, -2.1543,  0.1972,  1.3958, -2.8818, -4.2194, -3.4658, -1.9645],
            [ 1.9271,  1.4779, -0.2684,  0.2443,  2.8368,  2.9781,  3.4777, -3.4283],
            [-2.4871, -5.4016, -2.9493, -3.2752,  2.5645, -1.8028,  5.1282,  5.3452],
            [ 5.1918, -2.2274,  0.1316, -0.6484,  2.6861, -4.2328,  0.7597, -2.1249],
            [-0.3421,  2.4977, -1.4429, -7.4200,  0.2430, -3.2406,  2.8498, -0.2680],
            [ 2.4358, -1.8455, -0.1329,  0.4841,  6.2751, -6.5954, -1.9154, -7.0591],
            [ 1.9382,  0.1573, -0.1100, -9.6479,  3.2533,  0.0991,  2.3105, -0.0118],
            [ 3.0727, -3.5025,  4.5663, -0.4183,  3.7225, -3.0916, -5.5523, -5.9935]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1341,  0.1249, -1.4010, -0.2382,  2.1285,  0.8457, -1.6476,  0.9221,
             -0.6997, -0.0792],
            [-0.8665,  0.0217,  3.8602, -2.6270,  2.0919, -1.4105, -1.7795,  1.1350,
             -2.0002, -0.5269],
            [ 2.5290,  0.3556, -2.5548, -3.9841,  3.3210,  2.1283, -0.7382,  1.1235,
             -2.1518, -1.9610],
            [-3.0965,  1.3440, -0.8308, -1.3632,  3.4724, -1.9037, -2.4938,  0.2732,
             -1.1403, -2.4526],
            [ 1.1744,  1.4506, -5.7804, -4.9618,  0.2061, -3.1437,  4.3337, -0.3603,
              0.6456, -0.4003],
            [-0.7631,  3.1299,  1.5310,  0.3250,  5.4466, -6.0366,  0.0153, -3.8824,
              1.4511,  0.3082],
            [ 0.5414,  0.1851, -2.8464, -3.5137, -0.7826,  1.3096,  3.7859, -2.7386,
              2.8259,  0.0287],
            [ 0.2220,  1.5613,  0.7952, -0.1990, -0.0378, -0.4283,  1.1571, -2.1586,
              6.2277,  0.8504],
            [-0.5197, -0.7392,  0.0638, -1.4149,  1.9638,  2.3725,  2.6625, -2.5553,
              3.3308,  0.6509],
            [ 0.3386,  1.2051,  0.3109, -1.6135, -0.9424, -1.4558, -0.3685, -2.4935,
              0.1479,  0.1032]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.813 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
