.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.4903,  2.8889,  4.6728,  8.2767,  0.3001],
            [ 6.2361,  7.4947, 13.6748,  6.4010, 12.1554],
            [ 6.4576,  6.6033,  4.7999,  9.9172, 16.1733],
            [11.3211,  4.0389,  3.3327,  2.4668,  4.2610],
            [ 6.6534, 13.9879,  6.3407,  3.3046,  3.0647],
            [11.3211,  4.6687,  8.5984,  1.9090,  4.2610],
            [ 6.4576,  1.2557,  1.5084,  3.2231, 16.1733],
            [ 6.2361,  6.9688, 11.1896,  5.5607, 12.1554]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4872, -0.3662, -0.2247, -0.6259, -0.3790, -0.7206, -0.1008, -1.5025],
            [ 0.1252,  0.5133,  0.0080, -0.1708, -1.1018,  0.5775,  0.3816,  0.9178],
            [-0.8520,  0.6168, -0.0987,  0.1779,  0.8090,  2.1823, -2.1492, -1.1917],
            [-1.0217,  1.2715, -0.4728, -0.0656, -0.0074, -0.1140,  0.0284, -0.1695],
            [ 0.3305, -0.2737,  0.8434,  0.9961,  1.3946, -1.5032,  1.2472, -1.3342],
            [ 1.0434, -0.8633, -0.0370, -0.9231, -0.5223, -1.9228,  0.8862, -0.5010],
            [-0.1933, -0.1129, -0.4100,  1.3589,  0.1512,  0.0425,  1.0009,  1.4559],
            [-0.8940, -0.1098, -0.9338,  0.6674, -1.3808, -2.7565, -0.0783,  1.0540]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0028,  0.3889, -1.3176],
            [-0.3632, -0.4821, -1.1356],
            [ 2.0454, -0.6397, -1.7876]], requires_grad=True), Parameter containing:
    tensor([[1.8919]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.7635e+00,  2.8914e-03,  7.8419e-01,  7.9121e+00, -9.5373e-01,
             -6.7028e+00,  9.3674e-01,  2.2428e+00],
            [ 1.7911e+00, -5.0660e+00,  6.0372e+00,  5.9014e+00, -3.9001e+00,
              2.3355e+00,  3.8166e+00,  3.7535e+00],
            [ 2.5317e+00, -1.5578e+00,  4.0132e+00,  2.5562e+00, -7.2193e-01,
              7.3878e+00,  4.2700e+00,  4.0659e+00],
            [ 5.9212e+00,  8.4614e-01,  1.5724e+00, -4.9039e+00,  3.3401e+00,
              8.3320e+00,  5.4231e+00,  2.4398e+00],
            [ 5.0289e+00,  4.2095e+00,  1.2596e+00, -6.1958e+00,  4.2837e+00,
              5.1237e+00,  7.0053e+00,  1.1581e+00],
            [ 5.2601e+00,  9.8326e+00,  1.7551e+00, -6.9874e+00, -2.9383e-01,
              6.1280e+00,  6.8606e+00, -3.6162e+00],
            [ 4.8538e+00,  1.1181e+01,  2.5836e+00, -4.0847e+00,  2.9291e-01,
              2.9637e+00,  8.0745e+00,  1.6648e-02],
            [ 1.7786e+00,  1.1451e+01,  2.8716e+00,  3.0311e+00, -2.3852e+00,
             -1.1733e+00,  6.8189e+00,  2.9447e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.6464e-04, -8.0715e-02, -4.5186e-03,  6.7675e-01,  7.3457e-01,
              5.9804e-01, -1.1775e+00, -3.9880e-01,  8.4333e-01, -2.6626e-02],
            [ 7.2124e-02,  1.4825e-01,  1.7270e+00,  5.6160e-01,  1.2844e-02,
             -1.3605e+00, -2.4266e+00, -3.9350e-03,  9.6592e-02,  1.0004e+00],
            [-2.2456e-01, -1.2571e+00,  1.5650e-01, -2.7002e+00,  3.3180e+00,
             -4.5843e+00, -1.6621e+00, -7.7073e-01,  2.2992e+00,  1.5676e+00],
            [-1.0795e+00,  9.5045e-01,  1.9759e+00, -9.0474e-01,  2.8139e+00,
             -4.7296e+00,  1.3623e+00, -2.8494e+00,  3.3920e+00,  3.0049e+00],
            [ 1.8053e-01,  3.3836e+00, -2.7884e+00, -3.5490e-01, -3.3565e+00,
             -2.1664e+00,  1.6542e+00, -1.4274e+00,  4.3659e+00,  3.2956e+00],
            [-7.5533e-01,  1.6211e-01, -1.9964e+00,  4.1487e-01, -1.3408e+00,
             -6.3532e-01, -3.3002e+00, -8.1670e-02,  3.7934e+00, -5.4910e-03],
            [-1.1373e-02,  4.7788e-01,  5.3284e-01,  3.4071e+00,  3.1374e+00,
              1.8190e+00, -4.6553e+00, -2.1815e+00, -9.5454e-01, -1.5564e+00],
            [ 2.4381e+00,  7.0174e-01, -3.8203e+00, -1.4404e+00,  1.9159e+00,
              2.4667e+00,  1.8398e+00,  4.3537e+00, -4.3828e+00, -3.3574e+00],
            [-2.5014e+00, -1.8405e+00,  2.7620e+00,  3.8222e+00,  2.8176e+00,
             -5.0130e+00, -2.1296e+00,  3.8402e+00, -7.5649e-01, -6.2738e-01],
            [ 1.1244e+00, -1.6007e+00, -1.0682e+00,  1.4074e+00,  1.3748e+00,
              6.6975e-01, -1.2373e+00, -2.9978e+00,  6.2819e-01,  1.7555e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.888 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
