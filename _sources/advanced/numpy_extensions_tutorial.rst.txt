
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.9262, 11.5638,  7.3685,  8.2680,  1.3785],
            [11.0589,  8.4725,  2.3982, 10.4637,  6.6718],
            [ 2.5706, 10.5455,  9.3992, 10.5033,  7.3059],
            [ 3.4808,  7.5408,  1.3621,  5.6543,  7.9119],
            [ 9.6000,  6.6914,  4.9242,  8.8808,  9.1324],
            [ 3.4808,  5.3222,  6.0079,  7.7999,  7.9119],
            [ 2.5706,  4.8662,  4.3192, 10.3336,  7.3059],
            [11.0589,  4.0286, 10.9432, 10.4354,  6.6718]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 3.9518e-01,  1.5071e+00,  9.1144e-01, -1.7368e+00, -2.6917e-01,
             -1.2196e+00, -1.8887e-01,  1.2729e+00],
            [ 8.8147e-01,  9.2775e-01, -1.2046e+00, -1.3612e+00,  1.6353e+00,
             -1.1583e+00,  1.1134e+00, -3.1950e-01],
            [ 2.1026e-01,  4.3330e-01, -7.7417e-01, -4.3355e-01, -8.1889e-01,
              5.2799e-01, -1.9318e+00, -3.1437e-01],
            [ 8.0122e-01, -2.6634e-01,  1.4579e+00, -1.6223e+00, -2.4026e+00,
              5.0913e-01, -1.8618e-03, -2.1606e-01],
            [ 4.9892e-01, -3.2192e-01,  6.2884e-02, -1.5325e+00, -9.2345e-01,
              7.0055e-01,  2.2888e-01,  4.8120e-01],
            [-6.6573e-01,  4.6930e-01,  3.6195e-01, -9.4388e-02,  7.9405e-02,
              1.6261e+00,  2.7839e-01,  7.9675e-01],
            [ 2.1104e-01, -1.0911e+00,  1.3018e+00,  9.1784e-01, -7.1665e-01,
              6.5800e-01, -1.5544e+00,  6.7097e-01],
            [ 8.0587e-01,  1.4475e-01,  5.5787e-01,  8.0901e-01,  2.1855e-01,
              6.0409e-01,  2.0928e+00, -9.4935e-02]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4312,  1.6677,  0.8282],
            [-1.4627, -1.0111, -0.7950],
            [ 0.2141, -0.6889,  1.6082]], requires_grad=True), Parameter containing:
    tensor([[-0.4326]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7736e-02, -3.6525e+00, -3.6754e+00, -1.2338e+00,  6.0828e-01,
              2.6389e+00, -2.4271e+00,  7.1128e+00],
            [-8.5260e-02, -4.2288e+00, -6.8586e-01,  7.5283e-01,  4.4944e+00,
             -3.4951e+00, -1.4693e+00, -2.4222e-01],
            [-1.7540e-02,  3.2789e+00, -6.3047e+00,  6.0278e-01, -5.6659e+00,
              1.3246e+00, -5.9841e-01, -3.7580e+00],
            [ 1.9756e+00, -1.6709e+00, -1.0906e+00, -1.2622e+00, -6.8709e-01,
              4.0833e+00,  4.8851e-02, -1.4820e+00],
            [-2.1425e+00, -1.8561e+00, -4.9807e+00, -2.2703e+00, -1.1344e+00,
             -5.5438e+00,  5.5769e+00,  1.0942e-01],
            [-1.4095e+00,  1.2419e+00,  5.4998e+00, -3.2187e-01,  2.3291e+00,
             -5.7894e+00,  3.1245e+00, -1.3357e-04],
            [ 3.6178e-01,  5.5926e-01, -8.4305e-01, -3.7193e+00,  3.2972e+00,
              6.6266e-01, -2.8902e+00,  1.1256e+00],
            [-1.6601e+00,  8.7617e-01,  1.0400e+00, -4.6204e+00, -5.2568e+00,
             -2.3988e+00, -3.8505e+00, -8.0248e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.6417e-02,  3.3729e-01,  8.0594e-02, -8.0445e-01, -4.7254e-01,
             -2.5856e-01, -2.7467e-03,  2.4587e+00,  1.3880e+00, -2.1702e-03],
            [-3.9425e-01,  4.7479e-01,  4.3814e+00, -9.8699e-01, -1.4675e+00,
              2.4160e+00, -1.8335e+00, -3.2472e+00, -2.6057e+00, -2.6718e-01],
            [ 6.1021e-01, -3.8829e+00,  1.1088e+00,  2.8742e+00, -1.4797e-01,
             -2.2184e+00,  1.3983e+00,  8.6950e-01,  3.7523e+00,  9.5852e-02],
            [-3.0577e-01,  1.5438e+00, -4.1140e+00,  6.1241e+00, -1.4980e+00,
             -4.1937e-01,  2.0186e+00,  1.0192e+00, -3.1040e-01, -3.3815e-01],
            [-1.2183e-02,  9.8728e-01,  1.4448e+00, -3.8250e+00, -7.9139e-01,
              1.1954e+00, -1.5091e+00,  2.5321e+00, -6.1980e-01, -1.2561e+00],
            [-1.7504e+00, -3.8426e+00, -1.6467e+00, -1.5540e+00, -1.5471e+00,
             -6.5707e-01, -5.9690e-02, -1.0233e+00,  1.7402e+00,  1.0478e+00],
            [ 1.9523e+00,  3.9497e+00,  7.7236e+00,  7.0097e+00,  5.4900e-01,
             -7.9966e-01,  1.5068e+00,  1.0362e+00,  3.9590e+00, -2.1385e+00],
            [-1.6584e+00, -1.8677e+00, -6.7498e+00, -3.9164e+00, -3.3093e+00,
             -2.9793e-01, -2.6639e+00,  4.4125e-01, -7.7456e-01,  6.3851e-01],
            [-1.1962e+00,  9.8043e-01,  3.0187e+00,  3.8592e+00, -1.6097e-01,
             -1.9298e+00,  2.2449e-01, -8.9149e-02,  2.2904e+00, -6.8187e-01],
            [ 2.1625e-01, -1.0817e+00,  2.7742e+00, -2.6654e+00, -1.7950e-01,
             -1.4534e+00,  2.2330e+00,  2.7235e-01, -5.8215e-01,  3.6728e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.928 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
