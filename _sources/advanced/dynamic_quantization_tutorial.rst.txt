.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'keep' b'to' b'point' b'a' b'fifth' b'@-@' b'seam' b'golden' b'series' b'where' b'it' b'appears' b'within' b'his' b'best' b'disputed' b'season' b'Christian' b'Telugu'
    b'season' b'in' b'town' b'for' b'32' b'%' b',' b'but' b'Acton' b'<unk>' b'Tatasciore' b'Greenwood' b'of' b'Oxford' b'My' b'Party' b'interrelationships' b'to' b'help' b'and'
    b'wrote' b'from' b'the' b'departed' b'terms' b'of' b'Crash' b"'s" b'Reservoir' b'to' b'celebrate' b'his' b'health' b'and' b'similar' b'gliders' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Newspapers' b"'s" b'first' b'about' b'his' b'language' b'Hearts' b'109' b'@.@' b'5' b'%' b'of' b'the' b'vote'
    b'in' b'dissolving' b'society' b'in' b'could' b'be' b'allowed' b'to' b'be' b'recognised' b'in' b'1946' b'.' b'The' b'council' b'released' b'that' b'Walpole' b"'s" b'attempted'
    b'record' b'in' b'1927' b'and' b'1955' b'.' b'Honeymooners' b'consists' b'of' b'1203' b'names' b'were' b'also' b'fit' b'.' b'Bedell' b'addressed' b'Department' b"'s" b'autobiography'
    b'and' b'excitement' b'into' b'next' b'degree' b'an' b'three' b'@-@' b'year' b'mission' b'.' b'The' b'next' b'year' b'he' b'joined' b'four' b'non' b'@-@' b'Benjamin'
    b'character' b'since' b'entering' b'both' b'one' b'victory' b'in' b'ninth' b'conflict' b',' b'taking' b'legal' b'support' b'needed' b'to' b'large' b'African' b'American' b'lands' b'in'
    b'this' b'period' b'.' b'This' b'amounts' b'of' b'range' b'and' b'rate' b'of' b'land' b'are' b'often' b',' b'because' b'<unk>' b',' b'county' b',' b'and'
    b'GameSpy' b',' b'also' b'picked' b'the' b'peculiar' b'truly' b'in' b'special' b'history' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Crash' b'P' b'excavated' b'(' b'1921'
    b')' b'=' b'<eos>' b'<eos>' b'Baltimore' b'mac' b'Sora' b'was' b'a' b'moderate' b'episode' b',' b'directed' b'by' b'Cole' b',' b'downs' b',' b'No.' b'3'
    b'animations' b',' b'a' b'stranded' b'Steeltown' b'Nachtigall' b'that' b'Astraeus' b'Hits' b"'s" b'sales' b'for' b'light' b'feeling' b'U2' b"'s" b'specified' b'influences' b'.' b'The'
    b'label' b'taking' b'a' b'short' b'run' b'on' b'a' b'2010' b'status' b'from' b'the' b'planet' b'to' b'be' b'made' b'in' b'1993' b'.' b'The' b'scene'
    b'are' b'the' b'fastest' b'lead' b'in' b'Ulaid' b'in' b'the' b'1989' b'edition' b'of' b'Cross' b',' b'William' b'Winthrop' b'!' b'(' b'England' b')' b'and'
    b'alongside' b'as' b'congressman' b'confesses' b'the' b'American' b'Evening' b'Boom' b'Cross' b'(' b'Colorado' b',' b'Atlanta' b')' b',' b'\xc2\xb5m' b'and' b'(' b'poll' b')'
    b'moraines' b'about' b'Ceres' b'.' b'Historian' b'<unk>' b'asked' b'the' b'lyrics' b'on' b'the' b'game' b"'s" b'travels' b'from' b'a' b'2' b'to' b'3' b'kg'
    b'tall' b'Quest' b'Association' b'had' b'performed' b'in' b'two' b'games' b'.' b'The' b'Signet' b'Hiroyuki' b'Race' b'returned' b'11' b'minutes' b',' b'saying' b'to' b'build'
    b'the' b'critical' b'time' b'between' b'April' b'31' b'and' b'July' b'10' b',' b'2011' b',' b'showing' b'starring' b'@-@' b'Mode' b',' b'and' b'would' b'be'
    b'seen' b'to' b'move' b'in' b'the' b'game' b'to' b'sell' b'nearfield' b'and' b'recording' b',' b'according' b'to' b'this' b'motion' b'.' b'The' b'Second' b'Army'
    b'acted' b'as' b'"' b'dynamite' b'"' b'as' b'a' b'one' b'@-@' b'half' b'spoken' b'planet' b',' b'which' b'were' b'played' b'by' b'Andy' b'Scott' b'and'
    b'Wyman' b'Roberto' b'Nix' b',' b'whom' b'Carey' b'did' b'not' b'sustained' b'their' b'guitar' b'boss' b'in' b'May' b'2009' b'.' b'The' b'Game' b'Press' b'met'
    b'MTV' b'University' b'spent' b'a' b'71' b'@-@' b'standard' b'series' b'titled' b'storyline' b'trying' b'to' b'sustain' b'Woodfull' b'its' b'series' b'down' b'to' b'an' b'criminal'
    b'book' b'galaxy' b',' b'and' b'Pop' b'State' b'takes' b'public' b'damage' b'for' b'critics' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Race' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'1820s' b'game' b'produces' b'Japanese' b'police' b',' b'touch' b'dangerous' b'damage' b':' b'"' b'The' b'worst' b'out' b'batsmen' b'are' b'also' b'able'
    b'to' b'be' b'just' b'brilliant' b'.' b'"' b'A' b'reviewer' b'with' b'Horses' b'the' b'spacecraft' b'came' b'for' b'a' b'sin' b'due' b'to' b'magnate' b'of'
    b'<unk>' b'for' b'Leonard' b'Eight' b'.' b'According' b'to' b'touchdowns' b'<unk>' b'of' b'MTV' b',' b'dissenting' b'six' b'starts' b'were' b'held' b'into' b'a' b'fear'
    b'of' b'"' b'The' b'detail' b'unusual' b'based' b'into' b'her' b'passion' b'.' b'"' b'Eno' b'described' b'the' b'term' b'Cambridge' b'at' b'a' b'10' b'@-@'
    b'acre' b'@-@' b'2' b'lawsuit' b'at' b'<unk>' b'University' b',' b'which' b'could' b'be' b'released' b'on' b'September' b'20' b',' b'2006' b'.' b'It' b'was'
    b'released' b'in' b'Guitar' b'America' b'on' b'17' b'December' b'2000' b',' b'1981' b',' b'although' b'influences' b'were' b'announced' b',' b'and' b'16' b'%' b'of'
    b'five' b'books' b',' b'the' b'more' b'populous' b'administered' b'in' b'the' b'1980s' b'as' b'well' b'as' b'Twenty' b'record' b';' b'the' b'workplace' b'said' b'that'
    b'it' b'were' b'"' b'tough' b'on' b'the' b'Manhattan' b'"' b'so' b'gave' b'critical' b'support' b'to' b'the' b'same' b'boundaries' b'would' b'download' b'at' b','
    b'but' b'registered' b'to' b'as' b'exploration' b'such' b'as' b'050' b'data' b',' b'showing' b'it' b"'s" b'commandos' b';' b'etc' b',' b'into' b'their' b'slow'
    b'to' b'star' b'oil' b'themes' b',' b'and' b"'" b'tests' b"'" b':' b'"' b'I' b"'m" b'expected' b'it' b',' b'because' b'a' b'individual' b'prognostic'
    b'makes' b'him' b'[' b'Hornung' b']' b'should' b'be' b'kept' b',' b'nor' b'it' b'.' b"'" b'I' b"'ve" b'<unk>' b'[' b'sic' b']' b'become'
    b'that' b'it' b'ellipsoid' b'well' b',' b'and' b'there' b'might' b'be' b'both' b'anything' b'he' b'sings' b'sounds' b'Bono' b'of' b'.' b'But' b'as' b'they'
    b'do' b'a' b'good' b',' b'I' b'think' b'it' b'never' b'usually' b'actually' b'paid' b'take' b'controllers' b'on' b'my' b'family' b',' b'alleyways' b'.' b'<eos>'
    b'Watson' b'mainly' b'concerned' b'off' b'a' b'known' b'diameter' b'struggled' b'to' b'account' b'that' b'there' b'is' b'no' b'better' b'behaviour' b'and' b'remained' b'with' b'resurrection'
    b'.' b'"' b'All' b'that' b'sings' b':' b'<eos>' b'1' b',' b'Singer' b'Carroll' b'shares' b'and' b'What' b"'" b'policing' b'or' b'apparent' b'some' b'or'
    b'more' b'<unk>' b'different' b'wetland' b'bill' b'.' b'The' b'final' b'evacuated' b'video' b'continues' b'relatively' b'long' b'.' b'"' b'<eos>' b'In' b'December' b'2012' b','
    b'after' b'only' b'300' b'@,@' b'000' b'people' b',' b'Ashurbanipal' b'replied' b'that' b'children' b'give' b'when' b'the' b'<unk>' b'feel' b'would' b'be' b'launched' b'.'
    b'Deer' b'at' b'My' b'latest' b'marrying' b'filming' b'evidence' b'and' b'hatred' b',' b'parking' b'evidence' b',' b'though' b'some' b'reviewers' b'are' b'on' b'a' b'at'
    b'@-@' b'race' b'to' b'play' b'gambling' b'eating' b'controversial' b',' b'to' b'perform' b'into' b'punter' b'by' b'ranges' b'supplied' b'or' b'field' b'.' b'In' b'most'
    b'games' b',' b'batsmen' b'continues' b'until' b'footage' b'of' b'accepting' b'or' b'realize' b'to' b'remain' b'out' b'to' b'meet' b'van' b'v.' b'819' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Shabelle' b'work' b'=' b'=' b'<eos>' b'<eos>' b'Bede' b'sexpunctatus' b'1865' b'@-@' b'cooled' b',' b'though' b'large' b',' b'even' b'broken'
    b'heaviest' b'disruption' b'on' b'their' b'diet' b'members' b'from' b'competition' b'they' b'occurred' b'.' b'demonstrated' b'on' b'Codfish' b'Park' b'is' b'their' b'seats' b'in' b'any'
    b'series' b'after' b'they' b'have' b'recently' b'bad' b'sex' b',' b'so' b'may' b'be' b'called' b'leaders' b'in' b'close' b'summer' b',' b'though' b'they' b'do'
    b'not' b'use' b'in' b'mainland' b'air' b'.' b'expose' b'possible' b'classes' b',' b'these' b'birds' b'sank' b'further' b'and' b'often' b'search' b'to' b'Lowell' b'.'
    b'The' b'highest' b'varied' b'trials' b'alone' b'can' b'be' b'followed' b'by' b'Tamaulipas' b'or' b'sewer' b'model' b'during' b'they' b'do' b'not' b'earn' b'it' b'.'
    b'Due' b'by' b'all' b'construction' b',' b'an' b'individual' b'who' b'appears' b'on' b'to' b'be' b'much' b'long' b'.' b'They' b'believed' b'that' b'unlikely' b'after'
    b'results' b'showed' b'an' b'deal' b'between' b'water' b'.' b'This' b'approach' b'straight' b',' b'mainly' b'fully' b'made' b'the' b'island' b'facilities' b'when' b'they' b'had'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.7
    loss: 5.168
    elapsed time (seconds): 108.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  33.413 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
