
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'drove' b',' b'which' b'reported' b'the' b'reason' b'and' b'a' b'"' b'very' b'high' b'violent' b'view' b'of' b'a' b'planet' b'unit' b'"' b'.'
    b'The' b'<unk>' b'of' b'this' b'period' b'are' b'forceful' b'in' b'Belfast' b'.' b'The' b'cabin' b'is' b'also' b'mentioned' b',' b'on' b'a' b'side' b'memory'
    b'of' b'Latin' b'compared' b'.' b'In' b'the' b'first' b'session' b'that' b'it' b'contains' b'powered' b'and' b'birds' b',' b'it' b'is' b'often' b'that' b'stands'
    b'in' b'his' b'heavy' b'@-@' b'body' b'1891' b',' b'hatch' b'<unk>' b',' b'and' b'features' b'occasionally' b'recommended' b'to' b'become' b'any' b'part' b'of' b'"'
    b'much' b'facing' b'this' b'lifestyle' b'of' b'reality' b'"' b'.' b'A' b'contents' b'that' b'had' b'also' b'weigh' b'photographing' b'sins' b'and' b'the' b'Israeli' b'form'
    b';' b'Latex' b'<unk>' b',' b'Vincent' b'Boom' b'Bang' b'Xook' b',' b'Du' b'beneath' b'Yu' b'Jr' b'and' b'dark' b'Piazzi' b',' b'to' b'leave' b'any'
    b'other' b'Gaelic' b'starlings' b'in' b'English' b'.' b'Kakapo' b'bodies' b'include' b'<unk>' b'IUCN' b'and' b'Changes' b'adoption' b'creating' b'trio' b'X.' b'Agate' b',' b'naturalist'
    b'Jonathan' b'<unk>' b',' b'was' b'argued' b':' b'"' b'Their' b'<unk>' b'ban' b'is' b'<unk>' b'by' b'any' b'or' b'767s' b'.' b'"' b'The' b'<unk>'
    b'M.' b'al' b'infest' b'appears' b'on' b'having' b'undertaken' b'the' b'assortment' b'which' b'was' b'recalled' b'by' b'heard' b'manifest' b'.' b'Up' b',' b'Ceres' b'was'
    b'sympathetic' b'to' b'194' b',' b'probably' b'during' b'the' b'book' b'.' b'In' b'bylaw' b',' b'the' b'R\xc3\xa9union' b'Org' b'specimen' b'Friedrich' b'Dubois' b'devoid' b'of'
    b'Network' b"'s" b'head' b'for' b'Meadow' b'watersheds' b'and' b'rainy' b'Biddenden' b'IV' b'(' b'Narasimha' b',' b'third' b')' b'(' b'<unk>' b')' b'and' b'Airports'
    b'in' b'uptake' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Wanted' b'=' b'=' b'<eos>' b'<eos>' b'Note' b'could' b'have' b'long' b'hours' b'is' b'used' b'to'
    b'exist' b'in' b'"' b'the' b'Shinra' b'-' b'(' b'hunting' b')' b'"' b',' b'about' b'1792' b'of' b'scholastic' b'artists' b'required' b'around' b'away' b'only'
    b'five' b'months' b',' b'and' b'which' b'becomes' b'only' b'the' b'essential' b'bird' b',' b'curves' b'<unk>' b'.' b'Despite' b'John' b'Kooper' b"'s" b'final' b'son'
    b'in' b'The' b'fourth' b'century' b',' b'the' b'item' b'seems' b'to' b'have' b'half' b'Hubbardton' b'to' b'identify' b'three' b'starlings' b'1854' b'.' b'Aston' b'One'
    b'normally' b'Doyle' b'obtained' b'every' b'network' b'of' b'Venus' b'deal' b'in' b'which' b'they' b'are' b'pests' b',' b'and' b'it' b'is' b'probably' b'playable' b'throughout'
    b'his' b'2009' b'list' b'.' b'This' b'is' b'approximately' b'60' b'on' b'a' b'pattern' b'east' b'of' b'1927' b'and' b'tactically' b'extensive' b'Yourself' b'and' b'account'
    b',' b'about' b'17' b'\xc2\xb0' b'letter' b',' b'each' b'moment' b',' b'Crowns' b',' b'1993' b',' b'Dragon' b',' b'86th' b',' b'conifers' b',' b'and'
    b'plant' b'manifestations' b'.' b'These' b'Mann' b'occurs' b'into' b'the' b'Darling' b'combinations' b';' b'when' b'the' b'central' b'issue' b',' b'it' b'is' b'to' b'be'
    b'elevated' b'with' b'the' b'wicked' b'fortress' b'is' b'roost' b'from' b'brick' b',' b'observing' b'since' b'visible' b'very' b'sexually' b'more' b'than' b'any' b'other' b'food'
    b'direction' b'.' b'The' b'are' b'@-@' b'1015' b'source' b'(' b'rower' b')' b'separately' b'will' b'be' b'has' b'already' b'been' b'concerned' b'on' b'those' b'from'
    b'clad' b'her' b'tomb' b'550' b'in' b'1972' b'in' b'Wales' b'.' b'Whereas' b'population' b'throughout' b'the' b'mid' b'@-@' b'19th' b'century' b'and' b'November' b'Delhi'
    b',' b'as' b'the' b'names' b'of' b'this' b'barrier' b'<unk>' b',' b'it' b'makes' b'two' b'of' b'these' b'one' b'looks' b'apart' b'from' b'a' b'century'
    b'@-@' b'elect' b'palisade' b'with' b'the' b'other' b'planet' b',' b'<unk>' b'Salford' b',' b'given' b'a' b'new' b'native' b'family' b'and' b'destruction' b'.' b'constitute'
    b'other' b'problems' b',' b'this' b'will' b'be' b'used' b'by' b'Sirius' b',' b'the' b'most' b'Things' b'@-@' b'speaking' b'independent' b'extent' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Cast' b'=' b'=' b'<eos>' b'<eos>' b'Common' b'Love' b'/' b'Church' b',' b'Crimint' b',' b'Crompton' b'(' b'<unk>' b')' b'Chief' b','
    b'Restaurant' b'(' b'historiography' b')' b'and' b'well' b'section' b'(' b'L' b'<unk>' b')' b'was' b'a' b'native' b'topic' b',' b'including' b'wood' b',' b'alto'
    b',' b'steel' b',' b'and' b'depressions' b'Alejandro' b'Stanley' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Celtic' b'starling' b'=' b'<eos>' b'<eos>' b'The' b'Semaphore' b'Race'
    b"'s" b'Olaf' b'(' b'64' b'\xe2\x80\x93' b'40' b')' b'is' b'an' b'American' b'species' b'of' b'naming' b'@.@' b'8' b'million' b'rooms' b'Drivers' b',' b'a'
    b'multi' b'@-@' b'annum' b'which' b'can' b'be' b'developed' b'in' b'Mwele' b'.' b'The' b'1997' b'pattern' b'of' b'coup' b'is' b'<unk>' b',' b'and' b'emerges'
    b'logic' b'2011' b'broad' b'Imca' b'.' b'In' b'1932' b',' b'much' b'of' b'them' b'moved' b'to' b'Oxford' b'in' b'Boston' b',' b'stating' b'at' b'an'
    b'Shanghai' b'based' b'of' b'extension' b'in' b'building' b'Located' b'from' b'a' b'button' b'.' b'By' b'2014' b',' b'it' b'remained' b'in' b'place' b'in' b'late'
    b'1911' b'too' b'halted' b',' b'German' b'spots' b',' b'and' b'other' b'birds' b'which' b'are' b'analyzed' b'enough' b'to' b'be' b'over' b'1' b'@.@' b'5'
    b',' b'respectively' b'.' b'<unk>' b'members' b'recounted' b'over' b'40' b'%' b'of' b'a' b'affect' b'litter' b'texture' b'.' b'They' b'from' b'these' b'locations' b'included'
    b'multiple' b'clerics' b'on' b'single' b'<unk>' b'fractures' b',' b'tight' b',' b'in' b'the' b'Republic' b'of' b'India' b',' b'which' b'up' b'a' b'considerable' b'dispute'
    b'of' b'flag' b'school' b',' b'over' b'30' b'@.@' b'5' b',' b'(' b'4' b'@.@' b'8' b'in' b')' b'midway' b',' b'available' b')' b','
    b'and' b'linear' b'their' b'tail' b'lower' b',' b'making' b'more' b'than' b'12' b'million' b'four' b'in' b'.' b'They' b'resulted' b'in' b'82' b'%' b'of'
    b'an' b'long' b'point' b'PAVN' b'networks' b':' b'28' b'months' b'sets' b'Tristan' b'and' b'<unk>' b'.' b'<eos>' b'In' b'2015' b',' b'when' b'FAI' b'indicated'
    b'due' b'to' b'the' b'active' b'starling' b'of' b'Ulster' b',' b'he' b'designed' b'that' b'in' b'old' b'2003' b'and' b'the' b'\xc3\x8dmar' b'Racing' b'modification' b'were'
    b'probably' b'removed' b'.' b'<eos>' b'The' b'population' b'of' b'Ireland' b'mile' b'by' b'flash' b'councils' b',' b'named' b'the' b'Dubliners' b'with' b'Celtic' b'@-@' b'writer'
    b'lowlands' b'Hill' b',' b'<unk>' b',' b'<unk>' b',' b'recommended' b',' b'and' b'flowery' b'river' b'ships' b'.' b'Although' b',' b'Kilid' b',' b'Johnson' b'comes'
    b'to' b'her' b'town' b'to' b'have' b'water' b'Brentford' b',' b'and' b'a' b'drawings' b'from' b'a' b'ring' b'clouds' b',' b'common' b'recordings' b'and' b'iron'
    b'main' b'items' b',' b'1555' b'comparison' b',' b'notable' b'the' b'imposition' b'of' b'good' b'sex' b'culture' b'.' b'Scientific' b'Arabic' b'tables' b',' b'sometimes' b'are'
    b'of' b'Ireland' b',' b'is' b'often' b'developed' b'by' b'8' b'@.@' b'5' b'countries' b'.' b'<eos>' b'A' b'2006' b'demonstration' b'named' b'the' b'similarly' b'planet'
    b',' b'a' b'tenets' b'which' b'can' b'be' b'maintained' b'by' b'<unk>' b'(' b'Hemlock' b')' b'to' b'produce' b'feet' b'(' b'160' b'km' b')' b'nearly'
    b'Paris' b'in' b'parallel' b'leads' b'to' b'the' b'Reformed' b'movement' b'to' b'sub' b'@-@' b'star' b'.' b'In' b'his' b'17th' b'Korea' b',' b'strongpoint' b'failed'
    b'his' b'impressive' b'act' b',' b'who' b'sank' b'it' b'to' b'be' b'about' b'.' b'She' b'evolution' b'the' b'planet' b',' b'and' b'refers' b'to' b'some'
    b'their' b'molecule' b'.' b'Once' b'an' b'close' b'Fork' b'system' b'will' b'be' b'shared' b'against' b'the' b'Tamil' b'documentary' b',' b'however' b',' b'they' b'have'
    b'become' b'suggested' b'from' b'Smith' b'\xe2\x80\x94' b'to' b'this' b'improve' b'properties' b',' b'in' b'which' b'but' b'over' b'Malta' b'might' b'be' b'these' b'cavalry' b','
    b'repetitive' b'or' b'training' b'in' b'<unk>' b'by' b'native' b'differentiation' b'of' b'the' b'analogous' b'20th' b'century' b',' b'and' b'are' b'to' b'be' b'<unk>' b'150'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.8
    loss: 5.168
    elapsed time (seconds): 113.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  36.361 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
