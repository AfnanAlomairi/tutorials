
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kate' b'Humboldt' b'wrote' b'that' b'it' b'was' b'not' b'much' b'quickly' b'than' b'her' b'aims' b'embalmed' b'safety' b'.' b'<eos>' b'B.' b'v.' b'Bradley' b'is'
    b'a' b'critical' b'artist' b'created' b'by' b'exacting' b'Pitman' b',' b'but' b'it' b'was' b'distinct' b'for' b'their' b'game' b',' b'themselves' b'would' b'accelerate' b'out'
    b'a' b'toed' b'in' b'Next' b'@-@' b'term' b'to' b'a' b'stomach' b':' b'a' b'lot' b'of' b'breaking' b'previously' b'<unk>' b'or' b'free' b'microscopic' b'tactics'
    b'or' b'Capablanca' b'.' b'<eos>' b'491' b'forces' b':' b'Saqqara' b'artist' b'(' b'1874' b')' b'.' b'Publishing' b'mining' b'<unk>' b'<eos>' b'<unk>' b'<unk>' b';'
    b'Gene' b'Baker' b',' b'pinyin' b',' b'1782' b'head' b'(' b'1918' b')' b'<eos>' b'1801' b',' b'and' b'Friedrich' b'Goldman' b'martyr' b',' b'was' b'notable'
    b':' b'<eos>' b'Collegiate' b'<unk>' b'every' b'Palermo' b'Punjabi' b',' b'New' b'Zealand' b'<eos>' b'exclusion' b'for' b'helmet' b'and' b'<unk>' b'have' b'produced' b'no' b'Majesty'
    b'as' b'possible' b'only' b'after' b'which' b'though' b'our' b'venue' b'was' b'supposedly' b'made' b'<unk>' b'proposed' b',' b'an' b'<unk>' b'body' b'trees' b'.' b'the'
    b'full' b'year' b'came' b'after' b'being' b'.' b'"' b'Rosyth' b'noted' b'that' b'day' b'connection' b'into' b'a' b'resident' b'\xe2\x80\x94' b'<unk>' b'charts' b',' b'offered'
    b'it' b'"' b'virtually' b'positive' b'and' b'<unk>' b'twists' b'"' b'.' b'The' b'demonstration' b'structured' b'rhythm' b'treatment' b'predicted' b'that' b'"' b'It' b"'s" b'<unk>'
    b'exposed' b'what' b'to' b'leave' b'herself' b',' b'was' b'smaller' b'forested' b'Jazz' b'planets' b'with' b'its' b'eggs' b',' b'like' b'their' b'doubt' b'"' b','
    b'panoramic' b'his' b'union' b'to' b'find' b'light' b'line' b'for' b'a' b'loss' b'to' b'translate' b'her' b'meaning' b'.' b'By' b'this' b'general' b',' b'the'
    b'kakapo' b'offers' b'on' b'<unk>' b'Western' b',' b'a' b'1785' b'skull' b'and' b'not' b',' b'once' b'played' b'.' b'At' b'Six' b'century' b'succeeding' b','
    b'there' b'are' b'<unk>' b'to' b'rescue' b'@-@' b'enough' b'mannerisms' b'for' b'80' b'\xe2\x80\x93' b'38' b'April' b'1914' b'.' b'These' b'lives' b'about' b'any' b'overall'
    b',' b'and' b'facing' b'Proctor' b'to' b'patrol' b'usually' b',' b'is' b'two' b'.' b'<eos>' b'Also' b',' b'he' b'markers' b'by' b'two' b'hours' b'and'
    b'one' b'feel' b'show' b'.' b'snakes' b'should' b'then' b'need' b'their' b'Rebecca' b',' b'but' b'may' b'be' b'nearly' b'deliberately' b'in' b'1790' b'.' b'The'
    b'primary' b'birds' b'and' b'widespread' b'stories' b'are' b'measured' b'back' b'and' b'reside' b',' b'and' b'more' b'than' b'80' b'million' b'destruction' b'of' b'prey' b'.'
    b'detecting' b'within' b'its' b'absorption' b'condition' b'of' b'Abrams' b',' b'each' b'<unk>' b'initially' b'lacks' b'her' b'or' b'governmental' b'risk' b'around' b'good' b'.' b'As'
    b'information' b':' b'Season' b',' b'soft' b'monologues' b'have' b'no' b'lot' b'having' b'conceded' b'each' b'other' b'if' b'they' b'meet' b'.' b'Many' b'parrot' b'calls'
    b'<unk>' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'<unk>' b'(' b'coaxial' b'Kurds' b')' b'=' b'<eos>' b'<eos>' b'affirms' b'in' b'materials' b'with' b'some' b'ways'
    b'like' b'WASP' b'sexpunctatus' b',' b'also' b'as' b'whenever' b'indicate' b',' b'at' b'<unk>' b'in' b'1998' b'.' b'Pokiri' b',' b'its' b'<unk>' b',' b'is'
    b'mainly' b'adopted' b'by' b'The' b'spectrum' b',' b'but' b'while' b'The' b'court' b'is' b'that' b'<unk>' b'poor' b',' b'has' b'taken' b'by' b'radioactive' b'adult'
    b'nonviolent' b'starlings' b'such' b'as' b'<unk>' b',' b'adhering' b'Blaze' b',' b'and' b'protect' b'matrix' b'Pr\xc3\xa9val' b'.' b'The' b'Sleepy' b'tracked' b'steps' b'at' b'geographical'
    b'speech' b'in' b'<unk>' b',' b'G' b'of' b'John' b'Alden' b',' b'Deva' b'Isabella' b',' b'or' b'common' b'airfields' b'.' b'When' b'when' b'folklore' b','
    b'which' b'is' b'a' b'specific' b'brown' b'system' b',' b'they' b'were' b'<unk>' b'together' b'between' b'pests' b'and' b'inviting' b'regions' b',' b'with' b'finishing' b'close'
    b'to' b'within' b'it' b',' b'with' b'<unk>' b',' b'banking' b'birds' b'but' b'grayish' b'Mongolia' b'achieved' b'<unk>' b',' b'but' b'often' b'standing' b'in' b'seven'
    b'years' b'.' b'Many' b'Egyptologists' b'are' b'often' b'tricks' b'on' b'land' b'in' b'linear' b'form' b'.' b'However' b',' b'Ceres' b'consist' b',' b'or' b'<unk>'
    b'for' b'Caishi' b'antimony' b'and' b'tend' b'.' b'They' b'working' b'in' b'determining' b'crops' b'consisted' b'of' b'small' b'numbers' b'of' b'R\xc3\xa9union' b'.' b'The' b'two'
    b'birds' b'suggest' b'as' b'"' b'Either' b'and' b'besieging' b'one' b'or' b'most' b'of' b'a' b'relative' b'planet' b'than' b'.' b'"' b'For' b'example' b'on'
    b',' b'Mark' b'<unk>' b'II' b'gives' b'antimonium' b'that' b'<unk>' b'decrease' b'backward' b',' b'and' b'fed' b'the' b'game' b'to' b'seizure' b'.' b'In' b'the'
    b'rugged' b'passages' b'probes' b'the' b'European' b'starling' b'Singh' b',' b'both' b'mix' b'of' b'Ocean' b'Island' b',' b'finally' b'estimated' b'Japanese' b'amount' b'of' b'Protestant'
    b'uniform' b',' b'by' b'New' b'Zealand' b'and' b'Copia' b'.' b'In' b'fact' b',' b'common' b'spots' b'acts' b'to' b'Serving' b'a' b'further' b'interiors' b'that'
    b'are' b'associated' b'.' b'In' b'particular' b',' b'the' b'king' b'is' b'part' b'of' b'1' b'or' b'8' b'\xe2\x80\x93' b'8' b'MacDonald' b'.' b'YouTube' b'('
    b'175' b'\xe2\x80\x93' b'2' b'@.@' b'5' b';' b'Feel' b'\xe2\x80\x93' b'62' b'@.@' b'9' b'cm' b')' b'tall' b'may' b'be' b'noted' b'to' b'suggest' b'that'
    b'they' b'were' b'sometimes' b'yet' b'named' b'.' b'He' b'intended' b'to' b'be' b',' b'by' b'some' b'parts' b'of' b'Jain' b"'inich" b'experimentation' b',' b'though'
    b'found' b'standards' b'to' b'deploy' b'their' b'pre' b'@-@' b'different' b'body' b'caused' b'by' b'<unk>' b'abolishing' b'it' b'at' b'a' b'forced' b'type' b'of' b'7'
    b'@.@' b'5' b'hands' b'(' b'a' b'two' b'days' b'possesses' b'seen' b'and' b'more' b'than' b'2' b'@.@' b'5' b'kg' b')' b'.' b'Other' b'export'
    b'that' b'<unk>' b'or' b'catch' b'or' b'tear' b'to' b'be' b'similar' b'for' b'world' b',' b'with' b'those' b'@-@' b'high' b'sex' b'flying' b'prey' b'or'
    b'eye' b'feathers' b'.' b'Many' b'step' b'that' b'resulted' b'across' b'over' b'400' b'%' b'of' b'its' b'behaviour' b'.' b'The' b'porters' b'around' b'be' b'controversial'
    b'within' b'cohesion' b'and' b'the' b'nymphs' b'and' b'only' b'occupies' b'for' b'three' b'years' b'.' b'Sullivan' b'refer' b'thereafter' b'(' b'1' b'@.@' b'13' b'\xe2\x80\x93'
    b'27' b'@.@' b'9' b'in' b')' b'on' b'Gacy' b"'" b'wide' b'statistics' b'of' b'widely' b'survived' b'in' b'slightly' b'total' b',' b'or' b'first' b'concentrated'
    b'with' b'"' b'<unk>' b'"' b'16' b'ft' b',' b'six' b'syllables' b',' b'and' b'two' b'ecological' b'males' b'for' b'linear' b'damage' b'.' b'Weather' b'Barremian'
    b'(' b'and' b'is' b'completely' b'<unk>' b')' b'and' b'their' b'<unk>' b',' b'Kit' b',' b'though' b'presided' b',' b'on' b'a' b'average' b'diameter' b','
    b'seen' b'in' b'front' b'bowls' b'at' b'the' b'mandible' b'from' b'a' b'natural' b'parallel' b'tip' b'to' b'a' b'night' b'like' b'it' b'strikingly' b'by' b'waist'
    b'trees' b'.' b'The' b'kakapo' b'complained' b'to' b'Avtovac' b'for' b'its' b'core' b'box' b',' b'but' b'perpetrator' b't1' b'took' b'a' b'very' b'prolific' b'short'
    b'and' b'white' b'uses' b'or' b'electric' b'mammalian' b'blue' b',' b'but' b'long' b'find' b'bravery' b',' b'humanity' b'Montserrat' b',' b'tapping' b'it' b'a' b'main'
    b'ancestors' b'they' b'widely' b'found' b'tree' b',' b'or' b'their' b'father' b"'s" b'own' b'<unk>' b'.' b'In' b'the' b'last' b'lifespan' b'of' b'a' b'prophecy'
    b',' b'wishes' b'@-@' b'month' b'are' b'head' b'chasing' b';' b'their' b'common' b'sign' b'behind' b'its' b'imperial' b'behaviour' b',' b'factor' b'flash' b',' b'they'
    b'return' b'them' b'.' b'The' b'hyphae' b'of' b'more' b'all' b'longer' b'first' b'to' b'have' b'been' b'done' b'.' b'Because' b'they' b'have' b'significantly' b'been'
    b'known' b'to' b'spawn' b'by' b'males' b'.' b'The' b'common' b'starlings' b'there' b'is' b'no' b'average' b'over' b'heterochromatin' b',' b'when' b'even' b'assurance' b'with'
    b'the' b'Crawley' b',' b'trapped' b'until' b'they' b'are' b'present' b'.' b'<unk>' b'(' b'rich' b'<unk>' b'ibotenic' b'boxes' b')' b'is' b'deposited' b'in' b'front'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.1
    loss: 5.168
    elapsed time (seconds): 117.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  22.824 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
