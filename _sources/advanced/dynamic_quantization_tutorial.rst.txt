.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'@-@' b'recognizing' b';' b'the' b'face' b'dispute' b'a' b'trip' b'on' b'his' b'wealth' b',' b'and' b'When' b'estate' b',' b'they' b'possess' b'for' b'scrap'
    b'.' b'That' b'night' b'races' b'of' b'an' b'older' b'object' b'is' b'twelve' b'years' b',' b'Yankovic' b'and' b'heralded' b'a' b'top' b'amount' b'of' b'@.@'
    b'2' b'million' b'.' b'It' b'held' b'approximately' b'50' b'%' b'of' b'his' b'final' b'fifth' b',' b'females' b',' b'in' b'2007' b'and' b'Rushden' b'\xe2\x80\x94'
    b'Acute' b'promised' b'Effects' b',' b'and' b'peak' b'it' b'gained' b'it' b'time' b'for' b'330' b'years' b'old' b'.' b'As' b'Brenda' b'clinched' b'to' b'a'
    b'nine' b'@-@' b'season' b'loss' b',' b'with' b'entering' b'nearby' b'a' b'few' b'substantial' b'inexpensive' b'tennis' b',' b'Tufaro' b'introduced' b'in' b'Bass' b',' b'and'
    b'Dagenham' b'Day' b'later' b';' b'his' b'father' b'developed' b'.' b'The' b'storm' b'was' b'held' b'investigating' b'resources' b'in' b'Australia' b'has' b'recovered' b'to' b'their'
    b'cabinet' b'as' b'having' b'tails' b',' b'and' b'also' b'the' b'introduction' b'of' b'police' b'Vaishnava' b'attacks' b'.' b'Shen' b"'s" b'biographer' b',' b'Johann' b'Mohamud'
    b',' b'said' b'as' b'he' b'was' b'spiritual' b'wall' b'politically' b'modes' b',' b'to' b'turn' b'analyst' b'<unk>' b'music' b'Attorney' b'PC' b'grounds' b'.' b'Crash'
    b'or' b'Alan' b'Morgan' b'commented' b'that' b'many' b'of' b'his' b'life' b'described' b'an' b'bit' b'position' b'where' b'it' b'issued' b'perhaps' b'of' b'a' b'"'
    b'swift' b'human' b'feature' b'"' b'.' b'He' b'positively' b'company' b"'s" b'putting' b'first' b'into' b'introductory' b'ppg' b'and' b'could' b'be' b'able' b'to' b'observe'
    b'his' b'main' b'release' b'.' b'While' b'deactivated' b'with' b'the' b'Republican' b'Prairie' b'Laboratory' b"'" b'inswing' b'sins' b'from' b'weapons' b',' b'when' b'Gilbert' b'said'
    b'that' b'Leguat' b'of' b'Hornung' b"'s" b'Men' b'would' b'destroy' b'"' b',' b'young' b'interests' b'is' b'a' b'event' b'.' b'"' b'<eos>' b'<eos>' b'='
    b'=' b'Last' b'life' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Boom' b'election' b'range' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Crash'
    b'Boom' b'Bang' b'!' b'reported' b'that' b'a' b'decision' b'to' b'public' b'write' b'players' b'who' b'have' b'recovered' b'in' b'his' b'protest' b'in' b'childbirth' b'('
    b'1999' b':' b'(' b'650' b'%' b',' b'a' b'year' b'of' b'$' b'2' b'@,@' b'000' b'million' b'per' b'hour' b'on' b'developer' b'players' b')'
    b'is' b'knighted' b'.' b'The' b'pressure' b'of' b'Ireland' b'<unk>' b'and' b'<unk>' b'computer' b'lifestyles' b'was' b'made' b'to' b'speak' b'Kommunistblad' b'.' b'In' b'addition'
    b'to' b'an' b'few' b'@-@' b'aliens' b',' b'<unk>' b'cash' b'as' b'broadcaster' b'of' b'supporting' b'Stars' b'off' b'which' b'it' b'took' b'thirty' b'@-@' b'niece'
    b',' b'An' b'singular' b'variety' b'about' b'the' b'game' b"'s" b'origins' b'controlled' b'his' b'cause' b'for' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy'
    b'=' b'=' b'<eos>' b'<eos>' b'Ireland' b'married' b'one' b'million' b'on' b'July' b'10' b',' b'2003' b'.' b'They' b'are' b'across' b'schools' b'to' b'be'
    b'enlarged' b'.' b'In' b'other' b'first' b'2011' b'Racing' b'tonnes' b',' b'<unk>' b'Island' b'became' b'detailed' b'after' b'part' b'of' b'affecting' b'his' b'third' b'studio'
    b'jobs' b'.' b'Hornung' b'have' b'X.' b'iron' b'stories' b'born' b'in' b'the' b'mid' b'@-@' b'2006' b'draft' b'of' b'Venus' b'with' b'team' b'in' b'endorsement'
    b',' b'The' b'worst' b'colors' b'from' b'Der' b'Mosley' b'.' b'Residential' b'children' b'have' b'suggested' b':' b':' b'<eos>' b'O' b"'Malley" b"'s" b'usual' b'to'
    b'appoint' b'ride' b',' b'"' b'deep' b'@-@' b'ridden' b',' b'who' b'who' b'is' b'thought' b'to' b'be' b'computational' b'with' b'being' b'strong' b',' b'16'
    b'O' b'<unk>' b',' b"'" b'and' b'Anderson' b',' b'both' b'moth' b'reputation' b'down' b'on' b'films' b'due' b'to' b'his' b'character' b'.' b'/' b','
    b'deep' b'policy' b'.' b'"' b'<eos>' b'.' b'=' b'News' b'=' b'Lomonosov' b"'s" b'death' b'to' b'the' b'Peach' b'Bowl' b':' b'chase' b'<eos>' b'Lust'
    b'(' b'<unk>' b')' b':' b'<eos>' b'Trade' b'<unk>' b')' b'was' b'selected' b'in' b'a' b'section' b'@-@' b'<unk>' b'map' b'.' b'<unk>' b'Rellstab' b'<unk>'
    b'chickens' b'resulted' b'with' b'<unk>' b'But' b'and' b'40' b'years' b',' b'living' b'with' b'ribosomal' b'electron' b'<unk>' b',' b'Magnirostris' b'.' b'Programmes' b"'ll" b'<unk>'
    b'do' b'not' b'contain' b'tandem' b',' b'handed' b'cards' b'.' b'After' b'the' b'novel' b',' b'on' b'a' b'21' b'MeV' b',' b'struggled' b'to' b'return'
    b'in' b'...' b'it' b'took' b'me' b'was' b'listening' b'.' b'The' b'Red' b'Conservation' b'joins' b'one' b'of' b'the' b'reasons' b'man' b'of' b'its' b'Clan'
    b'Adrian' b'Morris' b'Kawai' b'and' b'the' b'collapse' b'he' b'makes' b'them' b'and' b'on' b'the' b'molecule' b',' b'the' b'<unk>' b'region' b'on' b'rough' b'Parker'
    b'and' b'other' b'<unk>' b'correct' b'years' b'...' b'and' b'a' b'<unk>' b'from' b'him' b'@-@' b'like' b'research' b'activity' b',' b'raising' b'Hooper' b'time' b'<unk>'
    b';' b'every' b'<unk>' b'break' b'of' b'a' b'moment' b'of' b'thriller' b'the' b'<unk>' b'rehearsal' b'yield' b',' b'white' b'Bracey' b'and' b'events' b'in' b'Philadelphia'
    b'.' b'In' b'this' b'orbit' b'took' b'it' b',' b'but' b'is' b'based' b'on' b'biennial' b'it' b'Sora' b"'s" b'next' b'regular' b'kind' b'intertwine' b'.'
    b'He' b'is' b'eating' b'out' b'that' b'Liu' b"'t" b'do' b'a' b'watch' b'with' b'ability' b'fight' b'.' b'Inside' b'heritage' b'away' b'.' b'If' b'much'
    b'are' b'returning' b'to' b'cerium' b'and' b'Austin' b',' b'they' b"'re" b'spelled' b'.' b'Orozco' b'offered' b'support' b'of' b'his' b'older' b'batting' b'community' b'where'
    b'or' b'his' b'devote' b'establishment' b'has' b'a' b'apoptotic' b',' b'he' b'is' b'Innovation' b'I' b'<unk>' b'truly' b'in' b'his' b'perfectly' b'.' b'If' b'if'
    b'I' b"'ve" b'lost' b'his' b'formatting' b'beliefs' b',' b'it' b'is' b'missing' b'a' b'former' b'high' b'collection' b'of' b'"' b'kings' b'"' b'.' b'He'
    b'has' b'greeted' b'some' b'of' b'them' b'over' b'her' b',' b'practices' b',' b'even' b'distinct' b'tensions' b'like' b'he' b'was' b'present' b'throughout' b'his' b'shrine'
    b'.' b'committing' b'that' b'naturalists' b',' b'it' b'is' b'interviewed' b'that' b'the' b'idea' b'that' b'expound' b'travelling' b'or' b'works' b'are' b'not' b'still' b'widely'
    b'necessarily' b'"' b'traded' b'[' b'Poduke' b']' b'Lw\xc3\xb3w' b'is' b'almost' b'something' b'very' b'abolished' b'to' b'be' b'constructed' b'.' b'"' b'Walpole' b'seeking' b'Human'
    b'Prize' b'in' b'1980' b'to' b'be' b'summarized' b'by' b'Barry' b'My' b',' b'while' b'offered' b'by' b'Tufaro' b'<unk>' b'"' b'this' b'motif' b'was' b'intended'
    b'to' b'attract' b'a' b'chat' b'commercial' b'life' b';' b'it' b'<unk>' b'all' b'of' b'them' b'like' b'I' b"'ve" b'them' b'that' b'Had' b',' b'and'
    b'a' b'excellent' b'incident' b';' b'she' b'had' b'gone' b'a' b'man' b'a' b'map' b'for' b'victims' b'.' b'"' b'After' b'his' b'final' b'game' b','
    b'Mosley' b'confronts' b'his' b'four' b'wives' b'.' b'But' b'Heidfeld' b'was' b'possible' b'to' b'play' b'for' b'his' b'staff' b'Yamamoto' b',' b'which' b'remained' b'in'
    b'by' b'including' b'titles' b'struggling' b'in' b'battle' b'.' b'He' b'was' b'also' b'induce' b'in' b'the' b'Fifth' b'convention' b'for' b'the' b'AOL' b'outwards' b'show'
    b'against' b'ideas' b',' b'but' b'192' b'technique' b'.' b'The' b'novel' b'takes' b'place' b'on' b'the' b'<unk>' b'race' b'with' b'constant' b'grip' b':' b'demolition'
    b'Crown' b'(' b'in' b'1903' b')' b',' b'bismill\xc4\x81h' b'game' b',' b'and' b'stressed' b'big' b'<unk>' b',' b'defeating' b'animation' b',' b'and' b'other' b'titles'
    b'.' b'Events' b'of' b'reality' b'with' b'orbit' b'jump' b'hangs' b'have' b'been' b'found' b'at' b'about' b'10' b'%' b'of' b'Congolese' b'stories' b'.' b'Upon'
    b'the' b'original' b'colours' b',' b'one' b'went' b'to' b'camp' b'malls' b'afforded' b'the' b'creation' b'of' b'his' b'ensemble' b'Investiture' b'Badrinath' b':' b'"' b'But'
    b'in' b'Argentina' b'<unk>' b'record' b'control' b'St' b'It' b'would' b'have' b'with' b'this' b'lord' b'or' b'<unk>' b'and' b'die' b',' b'and' b'there' b"'s"


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 205.3
    loss: 5.168
    elapsed time (seconds): 102.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.427 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
