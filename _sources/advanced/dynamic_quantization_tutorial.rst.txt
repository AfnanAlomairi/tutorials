
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'arbitration' b'and' b'dug' b'difficult' b'four' b'years' b'later' b'.' b'(' b'Sambeghu' b'Irving' b'Co' b'@-@' b'year' b'<unk>' b'@-@' b'boasted' b'remains' b')' b'too'
    b'(' b'<unk>' b')' b'was' b'a' b'collection' b'of' b'first' b',' b'resulting' b'on' b'her' b'ancestors' b',' b'tied' b'with' b'that' b'of' b'<unk>' b'of'
    b'the' b'game' b"'s" b'centralized' b'name' b'(' b'DFC' b')' b',' b'and' b'first' b'percentage' b',' b'the' b'ability' b'of' b'their' b'sexual' b'line' b'.'
    b'<eos>' b'After' b'these' b'reasons' b',' b'it' b'is' b'known' b'that' b'Durand' b',' b'narrated' b'by' b'King' b'James' b'doesn' b'Emerson' b',' b'was' b'made'
    b'in' b'Paris' b'.' b'Although' b'no' b',' b'Zoo' b'logics' b'enjoyed' b'a' b'book' b'Chinese' b'disk' b',' b'means' b'his' b'feature' b'bathroom' b':' b'"'
    b'princess' b'<unk>' b'<unk>' b'of' b'Carpenter' b'is' b'the' b'worst' b'speed' b'in' b'the' b'Teresa' b'<unk>' b'"' b',' b'making' b'it' b'the' b'"' b'important'
    b'poet' b'"' b'to' b'see' b'a' b'plurality' b'for' b'three' b'on' b'the' b'behalf' b'.' b'The' b'single' b'<unk>' b'Mark' b'Novel' b'Catholic' b'BC' b'suspects'
    b'this' b'track' b',' b'particularly' b'to' b'write' b'to' b'access' b'until' b'when' b'the' b'inner' b',' b'as' b'a' b'comparison' b'of' b'performance' b'when' b'"'
    b'Watkins' b'<unk>' b'Church' b'is' b'traditional' b',' b'many' b'<unk>' b'earth' b'scientifically' b'and' b'Astoria' b'influences' b',' b'<unk>' b'or' b'stepped' b'with' b'old' b'quitting'
    b'D\xc3\xadaz' b'in' b'his' b'Grey' b'hectares' b'upon' b'to' b'Formula' b'One' b'or' b'advance' b'a' b'modern' b'extra' b'beat' b',' b'simply' b'constituted' b'praise' b'on'
    b'a' b'influx' b'@-@' b'outside' b'@-@' b'home' b'game' b'and' b'now' b'"' b'.' b'The' b'admitted' b'of' b'the' b'imprisonment' b'of' b'Brand' b'also' b'moved'
    b'to' b'a' b'planet' b',' b'with' b'whom' b'their' b'first' b'male' b'game' b'received' b'way' b'double' b'in' b'1870' b'and' b'contain' b'Crimint' b'to' b'a'
    b'European' b'equivalent' b'at' b'prominently' b'difficulty' b'.' b'<eos>' b'<eos>' b'=' b'=' b'heavily' b'reception' b'=' b'=' b'<eos>' b'<eos>' b'The' b'planet' b'was' b'written'
    b'in' b'February' b'2007' b';' b'in' b'1992' b'it' b'was' b'announced' b'that' b'The' b'series' b'on' b'the' b'"' b'official' b'ideal' b'"' b'has' b'a'
    b'species' b'Susanna' b'work' b'to' b'help' b'it' b'.' b'Eno' b'gave' b'a' b'duration' b'of' b'three' b'beats' b'per' b'short' b'@-@' b'metre' b'pop' b'race'
    b'(' b'32' b'percent' b'in' b'2003' b'and' b'2' b'\xe2\x80\x93' b'8' b'which' b'reprise' b'November' b'13' b"'" b'AD' b')' b',' b'while' b'"' b'Crash'
    b'Us' b'It' b'was' b'"' b',' b'which' b'are' b'also' b'considered' b'positive' b'under' b'Cavaliers' b'(' b'1616' b')' b',' b'came' b'to' b'a' b'concert'
    b'on' b'architect' b'Women' b'successor' b'The' b'Big' b'Series' b',' b'and' b'top' b'five' b'events' b'for' b'the' b'game' b',' b'including' b'\xe2\x99\xaf' b'Erik' b'Doctor'
    b',' b'noted' b'for' b'several' b'performance' b'at' b'six' b'bear' b'correspondence' b'of' b'seize' b'a' b'album' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Awards' b'='
    b'=' b'<eos>' b'<eos>' b'Hornung' b'adapted' b'mac' b'<unk>' b'Feast' b',' b'a' b'invitation' b'to' b'have' b'a' b'inspiration' b'to' b'<unk>' b',' b'and' b'creative'
    b'images' b'with' b'Clearwater' b',' b'including' b'most' b'commonly' b'commercials' b'.' b'Offensive' b',' b'not' b'translated' b'into' b'through' b'any' b'other' b'school' b'blow' b'between'
    b'"' b'The' b'inscription' b'"' b',' b'states' b'that' b'nobody' b'did' b'at' b'this' b'point' b',' b'"' b'Quiney' b'is' b'a' b'manifestation' b'of' b'100'
    b'large' b'and' b'personal' b'donations' b'in' b'Britain' b',' b'with' b'it' b'an' b'choice' b'other' b'to' b'help' b'<unk>' b',' b'but' b'the' b'fewest' b'@-@'
    b'<unk>' b'two' b'times' b'were' b'beyond' b'Marat' b'reason' b'.' b'"' b'The' b'next' b'day' b'they' b'started' b'off' b'to' b'raise' b'Kody' b'The' b'Tim'
    b'cleaner' b'and' b'Jim' b'Sullivan' b',' b'another' b'of' b'whom' b'he' b'would' b'be' b'experiencing' b'at' b'grinding' b'Ceres' b'as' b'he' b'was' b'possible' b'.'
    b'Another' b'technique' b'is' b'illegal' b'for' b'happy' b'widowed' b',' b'but' b'was' b'Eleanor' b'religious' b',' b'he' b'wrote' b'that' b'"' b'but' b'when' b'Quite'
    b'in' b'pad' b'description' b'for' b'craftsman' b',' b'dizzy' b'frequently' b'aim' b'to' b'terrible' b'a' b'different' b'challenge' b'on' b'those' b'of' b'the' b'years' b'between'
    b'my' b'decisions' b'were' b'to' b'its' b'mass' b';' b'I' b'dies' b'so' b'unfamiliar' b'too' b'rugged' b'up' b'every' b'courts' b'now' b'"' b'.' b'However'
    b',' b'really' b'Dorian' b'inflow' b'saw' b'up' b'with' b'300' b'ions' b'.' b'Chen' b'fielded' b'a' b'unusual' b'effort' b'to' b'begin' b'in' b'suspect' b'Boom'
    b'Trigger' b'in' b'1999' b'.' b'The' b'reviewer' b'relies' b'in' b'a' b'usage' b'of' b'Jutland' b',' b'which' b'were' b'so' b'worldwide' b'by' b'vocalist' b'Hornung'
    b',' b'which' b'is' b'heavily' b'associated' b'by' b'distressed' b'thoughts' b'in' b'a' b'legitimacy' b'\xe2\x80\x94' b'to' b'make' b'his' b'main' b'lifting' b'season' b'recording' b'in'
    b'the' b'race' b'.' b'The' b'only' b'system' b'give' b'controversy' b'included' b'Chunuk' b'Orsini' b'citing' b'it' b'to' b'become' b'a' b'key' b'by' b'"' b'Mehbooba'
    b'sentimental' b'"' b',' b'is' b'taken' b'for' b'publishers' b'by' b'raising' b'177' b'<unk>' b',' b'Batchelor' b',' b'the' b'prey' b'renditions' b'of' b'Crash' b'Yourself'
    b'for' b'Urban' b'and' b'other' b'Guitar' b'America' b'.' b'When' b'borrowed' b'with' b'80th' b',' b'133Xe' b'lectures' b',' b'although' b'Cool' b'Music' b'is' b'come'
    b'to' b'write' b'money' b'.' b'<eos>' b'Ross' b'displayed' b'foreign' b',' b'and' b'has' b'created' b'Green' b"'Malley" b'more' b'than' b'metal' b'producers' b'and' b'Yuki'
    b'Yangjiang' b'in' b'Guitar' b'America' b',' b'so' b'after' b'oblong' b'in' b'the' b'trial' b',' b'<unk>' b'progressively' b'story' b'to' b'be' b'expressing' b'with' b'the'
    b'world' b';' b'the' b'people' b'showed' b'a' b'series' b'of' b'Wainwright' b'.' b'Also' b',' b'the' b'understanding' b'of' b'insomnia' b'were' b'incorporated' b'to' b'the'
    b'provision' b'of' b'Balaguer' b'along' b'the' b'graphics' b'.' b'<unk>' b'commits' b'it' b'once' b'immediately' b'Hey' b'games' b'Genuine' b'experience' b'?' b'.' b'The' b'next'
    b'year' b'1996' b'show' b'What' b'was' b'named' b'by' b'M\xc4\x81ori' b'mistreatment' b'that' b'"' b'It' b'something' b'important' b'hard' b'gaming' b'to' b'pitch' b'with' b'me'
    b',' b'because' b'he' b'kept' b'in' b'That' b'love' b'would' b'feel' b'our' b'Bb7' b'or' b'destroy' b'a' b'maybe' b'component' b'all' b'of' b'an' b'mental'
    b'crime' b',' b'yet' b'the' b'<unk>' b'of' b'disgrace' b'and' b'his' b'<unk>' b'declared' b',' b'import' b',' b'cougars' b'both' b'parts' b'of' b'his' b'money'
    b'.' b'"' b'England' b'explains' b'that' b'Hornung' b'"' b'penetrated' b'since' b'1866' b"'" b'quirky' b'think' b'!' b'"' b'O' b"'t" b'get' b'himself' b'on'
    b'by' b'the' b'ear' b'of' b'Collins' b"'s" b'novel' b'and' b'the' b'"' b'The' b'spiritual' b'Di\xe1\xbb\x87m' b'peptide' b'"' b'behind' b'longtime' b'law' b'.' b'In'
    b'the' b'development' b'of' b'Suwa' b'Live' b',' b'Oscar' b'Trevor' b'swept' b'a' b'2' b'@.@' b'5' b'%' b'of' b'the' b'AIF' b'party' b'of' b'pawns'
    b',' b'marking' b'three' b'weekly' b'total' b'times' b',' b'one' b'of' b'other' b'spent' b',' b'best' b'Triple' b',' b'<unk>' b',' b'Kidman' b',' b'and'
    b'electric' b'history' b'.' b'The' b'EST' b"'s" b'clutch' b'track' b'comprises' b'previously' b'over' b'45' b'%' b'of' b'the' b'plus' b'medical' b'facts' b',' b'which'
    b'was' b'accompanied' b'in' b'1999' b'by' b'Digital' b'Carolina' b'.' b'The' b'DVD' b'is' b'officially' b'critical' b'@-@' b'created' b'missions' b',' b'and' b'are' b'hold'
    b'by' b'an' b'average' b'@-@' b'daughter' b'concert' b'to' b'protect' b'the' b'beginning' b'or' b'15' b'years' b',' b'with' b'Virginia' b'extras' b'.' b'As' b'of'
    b'2015' b',' b'the' b'sellout' b'in' b'1962' b'seeking' b'most' b'of' b'his' b'books' b'and' b'often' b'recorded' b'a' b'popular' b'wedding' b',' b'while' b'he'
    b'envisioned' b'the' b'fact' b'for' b'track' b'.' b'Soon' b'on' b'a' b'advertisement' b'from' b'252' b',' b'there' b'is' b'final' b'suggested' b'that' b'Explaining' b'Malaysia'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 188.0
    loss: 5.168
    elapsed time (seconds): 115.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  11.743 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
