
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'attachment' b'.' b'They' b'1603' b'the' b'ancestors' b'of' b'methylene' b'salt' b'sequences' b'with' b'better' b'<unk>' b'"' b'Allen' b'"' b'series' b',' b'"' b'If'
    b'I' b'allow' b'merger' b'like' b'<unk>' b',' b'"' b'actress' b'Parker' b'Lindelof' b'wrote' b'that' b'his' b'production' b'that' b'<unk>' b'by' b'another' b'boyfriend' b'consist'
    b'of' b'the' b'holy' b'surname' b'is' b'reprising' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Notable' b'roles' b'=' b'=' b'<eos>' b'<eos>' b'After' b'the' b'asteroid'
    b'@-@' b'American' b'starling' b',' b'Jimi' b'Koniecpolski' b'was' b'Lantern' b'of' b'code' b',' b'the' b'Nourrit' b'languages' b'drew' b'in' b'the' b'12th' b'to' b'rise'
    b'three' b'or' b'four' b'different' b'languages' b'could' b'represent' b'administered' b'changes' b',' b'much' b'of' b'which' b'were' b'formed' b'during' b'the' b'village' b'.' b'The'
    b'compulsory' b'large' b'birds' b'included' b'all' b'were' b'store' b'cardinals' b',' b'but' b'could' b'touch' b'assessments' b'in' b'the' b'United' b'States' b'.' b'The' b'night'
    b'introduced' b'Hollywood' b';' b'the' b'kakapo' b'then' b'sailed' b'Charmed' b'and' b'farther' b'throughout' b'its' b'threats' b'.' b'quite' b'legacy' b'of' b'them' b'\xe2\x80\x99' b'is'
    b'quite' b'internationally' b',' b'including' b'each' b'other' b'in' b'music' b'.' b'As' b'approval' b',' b'the' b'dwarfs' b'rises' b'further' b'through' b'the' b'first' b'time'
    b'of' b'these' b'and' b'lambeosaurines' b'.' b'Based' b'with' b'some' b'other' b'operas' b'include' b'Hindi' b',' b'its' b'series' b'suffered' b'their' b',' b'59' b'1892'
    b',' b'with' b'three' b'partial' b'markets' b',' b'features' b'DNA' b',' b'memorable' b',' b'and' b'Critical' b'sixth' b'.' b'Some' b'branches' b'from' b'new' b'females'
    b'can' b'be' b'meant' b'to' b'be' b'on' b'defeat' b'outside' b'a' b'Thanhouser' b'House' b'when' b'the' b'account' b'is' b'lost' b'since' b'of' b'Seven' b'level'
    b',' b'but' b'this' b'becomes' b'<unk>' b'by' b'Pallas' b'.' b'He' b'does' b'not' b'or' b'from' b'its' b'<unk>' b'involving' b'a' b'respective' b'elaborate' b'proportion'
    b'where' b'common' b'research' b'find' b'precedence' b'\xe2\x80\x93' b'explosive' b'resources' b'are' b'a' b'consequence' b'or' b'starting' b'or' b'still' b'137' b'\xe2\x80\x93' b'57' b'km' b'enemies'
    b'.' b'Brown' b'monitored' b'the' b'circuit' b'or' b'has' b'been' b'leveled' b'for' b',' b'instead' b'of' b'decades' b'of' b'72' b'or' b'26' b'thousand' b'years'
    b',' b'with' b'an' b'consistent' b'range' b'of' b'1' b'@.@' b'87' b'men' b'per' b'<unk>' b'.' b'The' b'average' b'caused' b'firing' b'for' b'140' b','
    b'on' b'Columbian' b',' b'while' b'it' b'also' b'reported' b'the' b'boots' b'.' b'This' b'or' b'hyaline' b'is' b'narrow' b'.' b'Within' b'has' b'a' b'total'
    b'of' b'8' b'temperatures' b',' b'100' b'%' b'of' b'the' b'choir' b'that' b'can' b'be' b'reinforced' b'.' b'The' b'product' b'are' b'less' b'small' b'for'
    b'features' b'for' b'film' b'.' b'Ceres' b'have' b'an' b'yellow' b'definition' b',' b'like' b'fixed' b'than' b'2' b'%' b'of' b'the' b'proposed' b'phase' b'for'
    b'food' b'.' b'As' b'a' b'matter' b',' b'it' b'will' b'be' b'distinguished' b'as' b'of' b'three' b'children' b'.' b'According' b'to' b'<unk>' b'<unk>' b','
    b'marine' b'patience' b'yielded' b'nearly' b'14' b'%' b'of' b'the' b'female' b',' b'ahead' b'of' b'the' b'data' b'of' b'a' b'older' b'islands' b',' b'and'
    b'filaments' b'call' b'technique' b'.' b'Females' b'gives' b'it' b'"' b'needed' b'<unk>' b'from' b'the' b'efforts' b'of' b'smell' b'for' b'Crash' b'.' b'Now' b'away'
    b'"' b',' b'perhaps' b'split' b'in' b'the' b'vicinity' b'of' b'its' b'orbital' b'deficient' b',' b'at' b'any' b'range' b'we' b'are' b'favoured' b'to' b'youths'
    b';' b'they' b'can' b'be' b'pointed' b'to' b'maintain' b'feathers' b'.' b'<eos>' b'submerged' b'females' b'for' b'common' b'asiaticus' b'(' b'Australia' b')' b'include' b'approximately'
    b'three' b'more' b'introduced' b'females' b'than' b'was' b'known' b'.' b'They' b'gave' b'back' b'to' b'<unk>' b'stability' b'(' b'only' b'as' b'in' b'one' b'of'
    b'the' b'most' b'country' b'side' b'of' b'cm' b'in' b'the' b'countries' b')' b',' b'with' b'every' b'attack' b'around' b'12' b'mph' b'(' b'16' b'@.@'
    b'2' b'mi' b')' b';' b'<unk>' b'casualties' b'can' b'consumed' b'the' b'emergency' b'pattern' b'of' b'1' b'yards' b',' b'disabled' b'any' b'smell' b'.' b'The'
    b'first' b'surviving' b'navigation' b'controls' b'is' b'close' b'to' b'Billy' b'Leone' b'before' b'they' b'are' b'Holding' b'information' b',' b'about' b'30' b'@.@' b'45' b'metres'
    b'(' b'3' b'@.@' b'9' b'to' b'7' b'@.@' b'2' b'in' b')' b'away' b'.' b'The' b'female' b'kakapo' b'is' b'commonly' b'interpreted' b'to' b'give'
    b'maximum' b'when' b'in' b'those' b'another' b',' b'when' b'the' b'eleventh' b'kohl' b'kneeling' b'of' b'it' b',' b'possibly' b'roughly' b'at' b'least' b'one' b'night'
    b',' b'he' b'has' b'become' b'very' b'intergrades' b',' b'<unk>' b'the' b'same' b'side' b'.' b'toes' b'first' b'hatch' b'all' b'match' b'before' b'sharp' b'veers'
    b'on' b'their' b'enemies' b'.' b'He' b'demonstrated' b'the' b'intermediate' b'pyramidal' b',' b'particularly' b'enclosed' b',' b'and' b'can' b'have' b'once' b'been' b'used' b'to'
    b'catch' b'.' b'O' b'Jose' b'lay' b'to' b'be' b'good' b',' b'when' b'stone' b'precipitation' b'be' b'87' b'.' b'It' b'can' b'find' b'drawbacks' b'to'
    b'<unk>' b'bands' b'and' b'as' b'alive' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Types' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'<eos>' b'=' b'Mycena' b'Sand'
    b'CH' b'=' b'<eos>' b'<eos>' b'O' b'Bang' b'!' b'is' b'a' b'fictional' b'species' b'.' b'It' b'has' b'contains' b'in' b'a' b'digital' b'<unk>' b'protected'
    b'by' b'white' b'endpoint' b'.' b'The' b'male' b'occurs' b'in' b'later' b'regions' b'corrector' b'.' b'All' b'of' b'these' b'Muhammad' b'is' b'AU' b'entrenched' b'and'
    b'way' b'about' b'by' b'their' b'architecture' b',' b'significant' b'other' b'criticisms' b',' b'throughout' b'learning' b'further' b',' b'and' b'changes' b'better' b'the' b'videos' b'.'
    b'If' b'epithets' b',' b'both' b'spiders' b'introduces' b'doors' b',' b'attached' b'to' b'a' b'glass' b'prognosis' b'that' b'falls' b'them' b',' b'and' b'few' b'predators'
    b'is' b'expressed' b'dam' b'along' b'with' b'<unk>' b',' b'or' b'other' b'cellular' b'alphabets' b'to' b'lungs' b'alongside' b'human' b'scales' b'.' b'<eos>' b'Ceres' b'have'
    b'discovered' b'25' b'primary' b'steam' b'books' b',' b'revolving' b'when' b'it' b'directly' b'even' b'enough' b'to' b'fall' b'away' b'to' b'their' b'unsafe' b',' b'and'
    b'are' b'carved' b'to' b'a' b'flow' b'when' b'Paranthodon' b'gives' b',' b'Finds' b'sequence' b',' b'and' b'as' b'they' b'were' b'reduced' b'to' b'flat' b','
    b'they' b'may' b'indicate' b'Jupiter' b',' b'but' b'she' b'is' b'<unk>' b'at' b'the' b'night' b'zone' b'.' b'Instead' b',' b'when' b'drawbacks' b'can' b'be'
    b'detected' b'by' b'collecting' b'Reg' b',' b'or' b'flight' b',' b'although' b'however' b',' b'benefits' b'from' b'this' b'diagnosis' b'are' b'more' b'likely' b'too' b'.'
    b'The' b'aquatic' b'widely' b'says' b'they' b'force' b'to' b'cast' b'their' b'burning' b',' b'but' b'it' b'is' b'reddish' b'largest' b'.' b'Instead' b',' b'the'
    b'structures' b'are' b'still' b'common' b'forms' b'rather' b'reasonable' b'.' b'There' b'are' b'public' b'evidence' b'for' b'their' b'wings' b'.' b'aerodrome' b'for' b'on' b'his'
    b'powers' b'in' b'that' b'type' b'include' b'sufficiently' b'easily' b'as' b'if' b'more' b'complications' b'do' b'not' b'problems' b'away' b',' b'and' b'causes' b'eggs' b'.'
    b'Different' b'methods' b'are' b'Kalyanasundara' b',' b'often' b'different' b'substances' b'of' b'males' b'.' b'<unk>' b'membranes' b'smooth' b'on' b'the' b'host' b'rules' b'has' b'eating'
    b',' b'with' b'adults' b'when' b'\xc5\x8czora' b'oxidizes' b',' b'eukaryotes' b',' b'smell' b',' b'and' b'exclamation' b'plumage' b'.' b'However' b',' b'they' b'are' b'roughly'
    b'2' b'or' b'50' b'proteins' b',' b'can' b'adequately' b'attract' b'revise' b',' b'which' b'argued' b'that' b'"' b'she' b'has' b'hope' b',' b'should' b'be'
    b'<unk>' b',' b'without' b'<unk>' b'guitar' b',' b'and' b'understand' b'Zbarazh' b'"' b':' b'a' b'planet' b'about' b'persons' b'pride' b'on' b'the' b'other' b'crop'
    b'.' b'Even' b'this' b'was' b'more' b'sizable' b',' b'it' b'has' b'since' b'long' b'depicted' b'the' b'breeding' b'call' b'of' b'a' b'natural' b'rhyme' b'sites'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 194.2
    loss: 5.168
    elapsed time (seconds): 123.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  26.742 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
