.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'successes' b'.' b'Many' b'of' b'these' b'battalions' b'double' b'square' b'%' b',' b'and' b'could' b'proceeded' b'to' b'beat' b'257' b',' b'eye' b'work'
    b',' b'and' b'blistering' b'or' b'possibilities' b'.' b'In' b'this' b'context' b',' b'the' b'plaintive' b"'Pol" b'may' b'be' b'played' b'via' b'his' b'original' b'location'
    b',' b'and' b'claimed' b'that' b'on' b'a' b'baton' b'was' b'third' b'released' b',' b'primarily' b'as' b'they' b'do' b'not' b'die' b'that' b'might' b'follow'
    b'any' b'of' b'supplies' b'at' b'its' b'back' b',' b'with' b'a' b'cadet' b'of' b'throat' b'of' b'degradation' b',' b'compared' b'to' b'the' b'Bureau' b'of'
    b'peerage' b'.' b'<eos>' b'The' b'punishment' b'will' b'be' b'their' b'therapeutic' b'as' b'.' b'The' b'other' b'solution' b'include' b'Sitriuc' b'for' b'Castle' b',' b'<unk>'
    b',' b'or' b'on' b'about' b'500' b'near' b'the' b'Hope' b'@-@' b'Sun' b'persecuted' b'eroded' b'in' b'the' b'territories' b'.' b'As' b'if' b'it' b'would'
    b'be' b'distinguished' b'by' b'prostrate' b',' b'it' b'has' b'well' b"'re" b'equal' b'or' b'prayer' b'.' b'Eventually' b',' b'it' b'is' b'unclear' b'that' b'modern'
    b'pulp' b'estimate' b'has' b'no' b'power' b'rushed' b'with' b'a' b'brightest' b'or' b'a' b'transit' b'record' b'(' b'chromatin' b')' b',' b'as' b'one' b'of'
    b'its' b'oars' b'in' b'an' b'Stupa' b'GAA' b',' b'and' b'by' b'his' b'beak' b'.' b'Between' b'the' b'two' b'S' b'breakup' b',' b'which' b'use'
    b'other' b'features' b',' b'the' b'kakapo' b'could' b'find' b'a' b'discharge' b'after' b'a' b'eye' b'.' b'The' b'climate' b'starts' b'on' b'the' b'patents' b'of'
    b'nucleolar' b'fountains' b',' b'probably' b'for' b'suicide' b'.' b'The' b'North' b'American' b'canopy' b'mausoleum' b'were' b'similar' b'for' b'a' b'large' b'<unk>' b'if' b'peasant'
    b'it' b'has' b'suffered' b'St' b'and' b'sensation' b'advantage' b'(' b'white' b'inland' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'final' b'fantasy' b'player' b'is' b'monogamous' b',' b'near' b'Landmark' b'and' b'features' b'Graham' b',' b'taking' b'time' b'from' b'africanus' b',' b'<unk>'
    b'.' b'deficiencies' b'usually' b'grow' b'introduced' b'over' b'another' b'third' b'time' b'where' b'it' b'mounted' b',' b'because' b'ER' b'is' b'precipitated' b'at' b'Murray' b'.'
    b'The' b'kakapo' b'was' b'a' b'matter' b'of' b'more' b'thin' b'than' b'her' b'ages' b'.' b'Although' b'it' b'is' b'economically' b'conveyed' b',' b'they' b'lie'
    b'on' b'a' b'ground' b',' b'and' b'they' b'forced' b'to' b'speak' b'it' b'.' b'<unk>' b'nightingale' b'has' b'involve' b'dark' b'damage' b',' b'particularly' b'criticized'
    b'for' b'chastity' b',' b'but' b'only' b'but' b'Toward' b'Island' b',' b'also' b'to' b'be' b'apparent' b'.' b'The' b'female' b'door' b'is' b'maintained' b'by'
    b'them' b'and' b'entrenched' b'requirements' b'.' b'Each' b'<unk>' b'number' b'is' b'set' b'after' b'the' b'presence' b'of' b'smooth' b'species' b'.' b'Hundreds' b'...' b'females'
    b',' b'and' b'is' b'unlikely' b'to' b'a' b'administrator' b'of' b'820' b'cane' b',' b'they' b'are' b'<unk>' b'.' b'In' b'1856' b',' b'spore' b'Europe'
    b'may' b'find' b'heavy' b'architectural' b',' b'specifically' b'outer' b',' b'second' b'he' b'have' b'<unk>' b'areas' b'with' b'southern' b'.' b'<eos>' b'<unk>' b',' b'by'
    b'others' b'Records' b'he' b'avoided' b'Fig' b'to' b'extend' b'a' b'food' b'food' b'state' b';' b'locals' b'is' b'centred' b'and' b'needle' b'<unk>' b'with' b'die'
    b'of' b'Clancy' b',' b'females' b'titled' b'up' b'with' b'males' b',' b'<unk>' b'specifies' b'light' b',' b'mitochondria' b',' b'slightly' b'and' b'feed' b'.' b'The'
    b'female' b'resemble' b'traditional' b'calls' b'to' b'be' b'different' b'sites' b',' b'constantly' b',' b'brighter' b'Irving' b',' b'and' b'body' b'them' b'.' b'A' b'fluid'
    b'in' b'1852' b'for' b'handsome' b'beauty' b'when' b'common' b'firms' b'may' b'be' b'their' b'decay' b'that' b'they' b'resulted' b'into' b'Cuba' b'.' b'In' b'their'
    b'departure' b',' b'they' b'are' b'adequate' b'found' b'in' b'manage' b'adults' b'into' b'their' b'own' b'body' b'.' b'Another' b'same' b'year' b'is' b'that' b'the'
    b'subspecies' b'car' b'proved' b'a' b'old' b'night' b'of' b'New' b'Zealand' b'at' b'Florida' b',' b'is' b'then' b'correct' b',' b'by' b'the' b'ratio' b'of'
    b'background' b'as' b'an' b'medieval' b'bird' b'which' b'could' b'be' b'observed' b'off' b'.' b'The' b'specific' b'telephone' b'call' b'may' b'be' b'spread' b'these' b'birds'
    b'from' b'eggs' b'and' b'109' b'cellular' b'starlings' b'.' b'<eos>' b'kakapo' b'by' b'molecular' b'fungi' b'may' b'be' b'generated' b',' b'around' b'230' b'@-@' b'purpose'
    b'cardiac' b',' b'Terror' b'holdings' b',' b'heat' b'or' b'mirrors' b'.' b'Once' b'the' b'eggs' b'that' b'they' b'broomstick' b'factors' b'after' b',' b'so' b'they'
    b'again' b'takes' b'a' b'bill' b'the' b'pair' b'object' b'in' b'the' b'spread' b'of' b'sprints' b'to' b'their' b'body' b'regions' b'.' b'<eos>' b'<unk>' b'broods'
    b'may' b'be' b'tends' b'to' b'be' b'<unk>' b',' b'them' b'for' b'vaudeville' b'European' b'jewellery' b'.' b'Europium' b'leased' b'lbw' b'after' b'more' b'than' b'1'
    b'days' b'.' b'A' b'Western' b'Sixth' b'membrane' b'can' b'be' b'described' b'by' b'Smith' b',' b'Fulbe' b',' b'intruder' b',' b'indescribable' b',' b'<unk>' b','
    b'137' b'males' b',' b'calls' b',' b'v' b'and' b'STDs' b'.' b'As' b'Disease' b'Hyde' b'(' b'nesting' b')' b',' b'the' b'female' b'has' b'the'
    b'bird' b"'s" b'prey' b'or' b'beyond' b'recipient' b'into' b'low' b',' b'Cook' b'or' b'data' b'.' b'<eos>' b'The' b'kakapo' b'is' b'found' b'by' b'gender'
    b',' b'and' b'<unk>' b'physiological' b'hymns' b'Arish' b'when' b'it' b'is' b'Corn' b'if' b'when' b'food' b',' b'are' b'a' b'mild' b'owl' b'called' b'it'
    b'power' b'.' b'In' b'size' b',' b'they' b'are' b'similar' b'south' b',' b'often' b'known' b'as' b'Bolivar' b'cancer' b',' b'Jesus' b',' b'eukaryotic' b'boxes'
    b',' b'and' b'<unk>' b'record' b'.' b'<eos>' b'According' b'to' b'breeding' b',' b'Irish' b'starling' b'have' b'added' b'this' b'uncle' b'to' b'catch' b'activities' b'.'
    b'uptake' b'word' b'as' b'attendant' b'as' b'examples' b'of' b'significant' b'disadvantages' b'known' b'as' b'a' b'"' b'priority' b'which' b'world' b'sequence' b'or' b'eye' b'authority'
    b',' b'and' b'under' b'a' b'brackets' b'and' b'<unk>' b'female' b'put' b'for' b'some' b'areas' b',' b'they' b"'re" b'so' b'distant' b',' b'after' b'on'
    b'the' b'regeneration' b'and' b'up' b'unless' b'a' b'small' b'surface' b'table' b'and' b'enemies' b'that' b'they' b'will' b'defeat' b'herself' b'<unk>' b'as' b'they' b'be'
    b'<unk>' b':' b"'" b'"' b'Guy' b'B.' b'T.' b'al' b'<unk>' b'noted' b'that' b'it' b'is' b'trapped' b'that' b'venomous' b'domestic' b'starling' b'meant' b'if'
    b'"' b'young' b'calves' b'is' b'less' b'sweet' b'and' b'<unk>' b'different' b'are' b'subject' b'.' b'"' b'<unk>' b'of' b'valence' b'areas' b'such' b'as' b'Carl'
    b'Dame' b'Hindi' b'When' b'religious' b'species' b'have' b'trying' b'to' b'be' b'flat' b'.' b'Hence' b',' b'the' b'plumage' b'of' b'the' b'remnant' b'complexes' b'was'
    b'consumed' b'throughout' b'roll' b'.' b'In' b'many' b'cases' b',' b'in' b'London' b',' b'nut' b'Francis' b'lawyer' b'reported' b'that' b'<unk>' b'Hammond' b'presided' b'away'
    b'between' b'Ceres' b',' b'including' b'which' b'they' b'may' b'be' b'assisted' b'.' b'It' b'is' b'often' b'placed' b'as' b'a' b'<unk>' b'.' b'Both' b'farms'
    b',' b'they' b'may' b'<unk>' b'this' b'second' b',' b'instead' b'tonight' b'which' b'grows' b'was' b'often' b'distinct' b',' b'and' b'may' b'create' b'authors' b'to'
    b'play' b'.' b'They' b'then' b'volatile' b'possible' b'from' b'glucose' b',' b'though' b'according' b'to' b'their' b'throughout' b'States' b'herds' b',' b'risk' b'may' b'be'
    b'a' b'pest' b'molecules' b'at' b'their' b'supposed' b'.' b'In' b'"' b'foraging' b'<unk>' b'"' b',' b'it' b'developed' b'which' b'it' b'has' b'<unk>' b'similar'
    b'was' b'<unk>' b'by' b'respect' b'.' b'ECAHA' b'took' b'\xc2\xa3' b'400' b'million' b'to' b'injuries' b'for' b'their' b'mechanical' b'family' b',' b'then' b'lacking' b'a'
    b'grass' b'or' b'low' b'hero' b',' b'about' b'Yu' b'.' b'Since' b'being' b'called' b'it' b',' b'"' b'the' b'model' b'of' b'<unk>' b',' b'later'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 193.2
    loss: 5.168
    elapsed time (seconds): 103.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  4.786 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
