.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'North' b'Africa' b'.' b'<eos>' b'The' b'next' b'year' b'the' b'bulk' b'of' b'New' b'Zealand' b'had' b'largely' b'league' b'<unk>' b'boys' b'.' b'The'
    b'first' b'longest' b'and' b'third' b'with' b'this' b'value' b'was' b'led' b'with' b'<unk>' b',' b'Sir' b'Sand' b'portraying' b'a' b'head' b'safety' b'.' b'As'
    b'and' b'a' b'lesser' b'officer' b'were' b'now' b'altered' b',' b'he' b'was' b'descenders' b',' b'but' b'Ahmad' b'numbers' b'of' b'research' b'@-@' b'earnings' b','
    b'having' b'his' b'only' b'barges' b'in' b'Perkins' b'to' b'have' b'about' b'100' b'%' b'of' b'the' b'season' b'.' b'The' b'most' b'probably' b'played' b'species'
    b'in' b'an' b'about' b'400' b'%' b'chart' b',' b'on' b'September' b'13' b',' b'1913' b'.' b'The' b'Mohamud' b"'s" b'Herald' b'also' b'acquitted' b'England'
    b',' b'recreated' b',' b'A' b'corruption' b'for' b'Baker' b"'s" b'decorated' b'@-@' b'ramp' b',' b'and' b'retained' b'office' b'soldiers' b'to' b'an' b'new' b'win'
    b'in' b'that' b'year' b';' b'Europeans' b'was' b'paved' b'laws' b'to' b'sequel' b'on' b'rarity' b'.' b'Silver' b'State' b'acknowledges' b'such' b'<unk>' b',' b'resulting'
    b'on' b'outraged' b"'s" b'Governor' b'/' b'hallucinations' b'at' b'L.' b'Maze' b',' b'with' b'fellow' b',' b'possessing' b'thee' b'by' b'corpse' b'signed' b'as' b'an'
    b'training' b'of' b'incumbent' b'solos' b'on' b'the' b'National' b'Generation' b'which' b'are' b'known' b'to' b'produce' b'fans' b',' b'which' b'measure' b'regular' b'or' b'scientific'
    b',' b'death' b',' b'in' b'fact' b'of' b'the' b'ball' b',' b'number' b'of' b'the' b'experience' b'in' b'counties' b'.' b'<eos>' b'The' b'state' b'of'
    b'NC' b'Night' b'is' b'most' b'likely' b'after' b'Oslo' b',' b'and' b'then' b'occupation' b'of' b'Pluto' b',' b'pan' b',' b'or' b'Aesopic' b',' b'and'
    b'began' b'up' b'country' b'into' b'the' b'country' b'.' b'The' b'necked' b'astronomer' b'Joseph' b'Snow' b'(' b'6F' b'divert' b')' b'also' b'proposed' b'a' b'close'
    b'naval' b'@-@' b'sized' b'processes' b',' b'who' b'was' b'surprised' b'by' b'these' b'sister' b'experimenting' b'between' b'shrinking' b'Works' b'and' b'Metro' b',' b'"' b'fish'
    b'"' b'and' b'it' b'"' b'little' b'be' b'the' b'perfect' b'display' b'of' b'old' b'functions' b',' b'Strapping' b'Thought' b'congregationalist' b',' b'myself' b',' b'and'
    b'solid' b'animated' b'.' b'"' b'In' b'addition' b'to' b'<unk>' b'ranks' b'in' b'Blue' b',' b'but' b'to' b'arrange' b'the' b'image' b'of' b'bodies' b','
    b'and' b'boxes' b'to' b'be' b'so' b'rather' b'than' b'played' b'by' b'Peshkin' b"'s" b'computer' b',' b'B.' b'Bennett' b'resumed' b'for' b'Midway' b'to' b'this'
    b'major' b'frequency' b'\xe2\x80\x94' b'resigned' b'with' b'George' b'Colombia' b',' b'and' b'the' b'opportunity' b'for' b'the' b'diversion' b'side' b'of' b'Historic' b'Affairs' b'for' b'construction'
    b',' b'an' b'<unk>' b'back' b'for' b'entities' b'hailed' b'by' b'coining' b';' b'mounds' b'is' b'segregated' b'to' b'house' b',' b'divine' b'affection' b'.' b'When'
    b'he' b'wrote' b'showed' b'PAGASA' b',' b'which' b'"' b'Lord' b'"' b'show' b'John' b'Si' b'is' b'<unk>' b'.' b'This' b'type' b'is' b'also' b'limited'
    b'to' b'the' b'Barons' b"'s" b'Association' b'projected' b'in' b'1973' b'.' b'In' b'Ireland' b'they' b'are' b'Asomtavruli' b'forums' b',' b'CNN' b',' b'so' b'together'
    b'as' b'as' b'<unk>' b'.' b'The' b'approval' b'of' b'bright' b'starlings' b',' b'which' b'grows' b'up' b'here' b',' b'can' b'have' b'formed' b'with' b'Earthrealm'
    b',' b'as' b'completely' b'as' b'"' b'spiritual' b'solved' b'"' b'.' b'Private' b'authors' b'reproduce' b'weaknesses' b'volunteered' b'from' b'sulfide' b'or' b'<unk>' b'less' b'than'
    b'the' b'Few' b'information' b'to' b'have' b'been' b'moved' b'to' b'export' b'.' b'New' b'Zealand' b'married' b'during' b'early' b'stayed' b',' b'inscription' b'identified' b'Habits'
    b'after' b'splits' b'on' b'December' b'10' b',' b'2006' b'.' b'<eos>' b'At' b'El' b"'Neill" b',' b'Angelou' b'began' b'to' b'put' b'his' b'Howard' b'Flotilla'
    b'to' b'become' b'due' b'to' b'"' b'an' b'male' b'multi' b'@-@' b'marketing' b'<unk>' b'.' b'"' b'results' b',' b'"' b'I' b'judge' b'no' b'<unk>'
    b'"' b'signed' b'by' b'<unk>' b'Williams' b'(' b'1973' b')' b',' b'which' b'used' b'Hornung' b'by' b'Rennes' b'in' b'his' b'audio' b'Feldman' b'to' b'sortie'
    b'which' b'escape' b'when' b'push' b'with' b'his' b'.' b'They' b'were' b'limited' b'to' b'the' b'news' b'sings' b'to' b'the' b'<unk>' b'base' b'.' b'The'
    b'new' b'Cracksman' b'was' b'critical' b'involving' b'decisive' b'views' b',' b'and' b'<unk>' b'from' b'Widmore' b'Unlike' b'African' b'towns' b'.' b'In' b'the' b'Australian' b'language'
    b'in' b'2001' b',' b'Hornung' b"'s" b'exciting' b'decision' b'to' b'be' b'attempted' b'to' b'have' b'assisted' b'in' b'use' b'.' b'In' b'particular' b',' b'Brown'
    b'recorded' b'Target' b'School' b'in' b'cases' b'with' b'Raffles' b'College' b'<unk>' b':' b'"' b'Don' b"'t" b'try' b'mobbing' b'ticket' b'in' b'a' b'minute' b','
    b'from' b'Pelusium' b"'s" b'right' b'"' b',' b'Jordan' b'"' b'could' b'be' b'of' b'welcomed' b'in' b'<unk>' b'with' b'Hunter' b'"' b',' b'"' b'The'
    b'planet' b'and' b'Early' b'founder' b'in' b'a' b'situation' b'that' b'should' b'end' b'the' b'bullpen' b'nor' b'their' b'profit' b'still' b'"' b'.' b'Staley' b','
    b'who' b'spent' b'from' b'a' b'number' b'of' b'the' b'Formula' b"'Malley" b'Channel' b'courts' b',' b'learns' b'to' b'Paul' b'Brooks' b'with' b'the' b'huge' b'confederation'
    b'and' b'taking' b'53' b'%' b',' b'a' b'race' b'on' b'his' b'sign' b'Olympic' b'sy\xc4\x81dv\xc4\x81da' b'.' b'<eos>' b'With' b'his' b'desire' b'on' b'the' b'previous'
    b'1960s' b',' b'Kyle' b'Chen' b'arrives' b'in' b'1879' b'with' b'other' b'awkward' b'@-@' b'professionals' b'.' b'Still' b',' b'McFadden' b'chose' b'some' b'of' b'his'
    b'books' b'on' b'the' b'old' b'cinema' b'at' b'Archaeology' b'\xe2\x80\x94' b'a' b'loudspeaker' b'.' b'The' b'former' b'held' b'success' b'worst' b'in' b'representative' b'that' b'he'
    b'sent' b'a' b'conspiracy' b'for' b'his' b'weakness' b'and' b'flies' b'tests' b'his' b'worse' b'arm' b';' b'FAU' b'has' b'been' b'teacher' b'of' b'archaeology' b'to'
    b'Nicaea' b'.' b'This' b'meant' b'advice' b'to' b'finally' b'a' b'short' b'antagonist' b'from' b'a' b'custom' b'romantic' b'television' b'series' b':' b'"' b'Crash' b'"'
    b'which' b'is' b'portrayed' b'in' b'<unk>' b'.' b'The' b'novel' b"'s" b'title' b'Fatality' b'seems' b'to' b'visit' b'a' b'degree' b',' b'his' b'diaries' b'who'
    b'should' b'continue' b'another' b'school' b'and' b'in' b'1960' b'.' b'These' b'phone' b'acts' b'<unk>' b'they' b'suddenly' b'filled' b'are' b'only' b'remembered' b'hours' b'with'
    b'some' b'Schmoke' b',' b'even' b'now' b'written' b'the' b'city' b'to' b'present' b'property' b'stories' b'and' b'affinity' b'.' b'Other' b'nations' b'premieres' b'and' b'design'
    b'saying' b'returning' b'to' b'an' b'proportionate' b'game' b',' b'and' b'Likewise' b'using' b'membership' b'of' b'Tom' b'Traveling' b'.' b'<eos>' b'<unk>' b'and' b'Kody' b'<unk>'
    b'made' b'connectionism' b'to' b'Australia' b',' b'except' b'David' b'R.' b'<unk>' b',' b'as' b'aimed' b'down' b'the' b'chapter' b'through' b'them' b'afforded' b',' b'and'
    b'<unk>' b'summarized' b'his' b'family' b',' b'commenting' b'on' b'a' b'prominent' b'development' b'by' b'discussion' b'that' b'Gives' b'Trinsey' b"'s" b'plans' b'remains' b'to' b'make'
    b'an' b'note' b'down' b'by' b'<unk>' b'.' b'They' b'<unk>' b'it' b'to' b'look' b'French' b'rock' b'candidates' b',' b'where' b'thesis' b'are' b'first' b'purely'
    b'.' b'He' b'said' b'a' b'"' b'inspection' b'range' b'Giacomo' b"'" b'but' b'absolutely' b'<unk>' b'...' b'his' b'piece' b"'re" b'capable' b'for' b'an' b'<unk>'
    b'@-@' b'shaped' b'fidelity' b'around' b'all' b'@-@' b'time' b'other' b'characters' b'that' b'variations' b'later' b'.' b'"' b'<eos>' b'Conscription' b'involving' b'Raffles' b"'s" b'discovery'
    b'<unk>' b'on' b'the' b'PlayStation' b'anniversary' b',' b'coaling' b',' b'still' b'the' b'Mycological' b'Sabbath' b'.' b'Additionally' b',' b'it' b'is' b'believed' b'that' b'this'
    b'might' b'be' b'need' b'to' b'differentiate' b'Malayalam' b'rules' b'during' b'2006' b'.' b'Nomura' b'replaced' b'his' b'Viscount' b'treble' b'<unk>' b'alone' b',' b'and' b'his'
    b'divorced' b'reign' b'of' b'a' b'prison' b'@-@' b'criminal' b'area' b'of' b'his' b'manic' b'points' b',' b'and' b'the' b'two' b'law' b'not' b'Maria' b'music'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.1
    loss: 5.168
    elapsed time (seconds): 105.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  10.184 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
