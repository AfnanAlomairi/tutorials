.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'The' b'development' b'was' b'improved' b'.' b'In' b'the' b'1930s' b'the' b'author' b'(' b'1873' b')' b'offers' b'increasing' b'dome' b'in' b'mid'
    b'@-@' b'Christian' b'slots' b',' b'goddess' b'Johnson' b'and' b'Leon' b'Kaiu' b'allocation' b'eastern' b'to' b'a' b'short' b'elaborate' b'signal' b'of' b'St.' b'Louis' b'.'
    b'They' b'were' b'official' b'when' b'Among' b'30' b'%' b'of' b'them' b'.' b'The' b'same' b'year' b'may' b'be' b'killed' b'by' b'Japanese' b'insects' b'('
    b'though' b'leave' b'so' b'<unk>' b'up' b'in' b'1933' b'.' b')' b'became' b'generally' b'a' b'near' b'@-@' b'air' b'and' b'fresh' b'display' b'than' b'private'
    b'plantations' b'from' b'each' b'Lifestream' b'.' b'A' b'young' b'feature' b'gene' b'Fraser' b'Flowers' b'actually' b'or' b'swung' b'<unk>' b',' b'Structure' b',' b'Utah' b','
    b'Petri' b',' b'<unk>' b'and' b'comfortable' b'.' b'The' b'man' b'begins' b'with' b'Hadji' b'Becker' b',' b'but' b'a' b'member' b'of' b'practices' b'given' b'into'
    b'his' b'virus' b',' b'Dr.' b'reasoning' b',' b'and' b'his' b'damage' b'of' b'Cities' b'previously' b'returned' b'needed' b'to' b'unhealthy' b'various' b'factors' b'.' b'In'
    b'the' b'1950s' b',' b'sparrow' b'refineries' b'gives' b'attacks' b'with' b'the' b'stress' b'of' b'Mars' b'.' b'As' b'they' b'proposed' b'to' b'be' b'ran' b'in'
    b'"' b'lively' b'"' b'Kilmer' b',' b'the' b'disliked' b'analysis' b'in' b'West' b'Pusan' b'would' b'be' b'played' b'and' b'most' b'useful' b'questions' b'are' b'repelled'
    b'in' b'Texas' b'from' b'his' b'relative' b'.' b'He' b'was' b'elected' b'being' b'diagnosed' b'after' b'the' b'widespread' b'Hightower' b'in' b'this' b'language' b'.' b'According'
    b'to' b'City' b'in' b'Yorkshire' b',' b'in' b'the' b'Republic' b'was' b'written' b'.' b'From' b'this' b'time' b'he' b'has' b'the' b'G4TV' b'of' b'a'
    b'dismay' b'for' b'a' b'Mohammed' b'before' b'saying' b'their' b'memorial' b'space' b'on' b'an' b'"' b'white' b'Vaballathus' b'"' b'between' b'above' b'which' b'he' b'liked'
    b'a' b'individual' b'fortunate' b'within' b'Illinois' b'.' b'The' b'male' b'is' b'sufficiently' b'larger' b'with' b'a' b'local' b',' b'<unk>' b'@-@' b'broodmare' b'to' b'an'
    b'member' b'of' b'orbit' b'.' b'The' b'food' b'spun' b'for' b'ships' b'to' b'development' b'other' b'styles' b',' b'such' b'as' b'farmed' b'as' b'they' b'are'
    b'ellipsoid' b'to' b'their' b'head' b'.' b'The' b'group' b'is' b'the' b'first' b'executive' b'in' b'Pflueger' b'.' b'During' b'prevents' b'with' b'them' b',' b'he'
    b'may' b'be' b'identical' b'for' b'other' b'kinds' b'and' b'<unk>' b'sales' b'pursuing' b'devote' b'"' b'direct' b'mean' b'Marlborough' b'facing' b'that' b'perhaps' b',' b'from'
    b'the' b'wing' b'Mariana' b',' b'"' b'but' b'Wilkinson' b'has' b'rapidly' b'living' b'about' b'those' b'of' b'two' b'forgotten' b'verses' b',' b'but' b'in' b'the'
    b'same' b'word' b'it' b'wasn' b"'t" b'just' b'participate' b'in' b'large' b'sculpted' b'they' b'is' b';' b'though' b'they' b'can' b'have' b'things' b'Truth' b'.'
    b'They' b'means' b'this' b',' b'reached' b'a' b'while' b'<unk>' b'Protection' b'routinely' b',' b'and' b'possibly' b'to' b'enhance' b'this' b"'s" b'snake' b'.' b'We'
    b'killed' b'some' b'of' b'his' b'children' b'a' b'few' b'different' b'attendees' b'where' b'there' b'is' b'no' b'idol' b'the' b'head' b'of' b'Virginia' b"'s" b'necessity'
    b'for' b'prey' b',' b'which' b'is' b'only' b'balanced' b'.' b'Their' b'fat' b'personality' b',' b'which' b'is' b'at' b'always' b'written' b'in' b'about' b'Mint'
    b'\xe2\x80\x94' b'and' b'then' b'Walpole' b'follows' b'the' b'least' b'of' b'them' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Laxa' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'majority' b'of' b'slipping' b'cooperation' b',' b'usually' b'The' b'same' b'name' b'of' b'Fellow' b',' b'is' b'a' b'Kimmeridgian' b'fungus' b',' b'but'
    b'was' b'put' b'into' b'Latin' b',' b'beard' b'and' b'office' b'(' b'railroads' b')' b'is' b'with' b'the' b'cause' b'of' b'Venus' b',' b'where' b'Shaotang'
    b'is' b'predominantly' b'damaged' b'so' b'two' b'to' b'identify' b'linear' b'size' b'.' b'This' b'hole' b'form' b'it' b'relaxed' b'as' b'childish' b',' b'athletics' b'abstract'
    b'warts' b'fifteen' b'or' b'black' b',' b'a' b'fortune' b'when' b'they' b'are' b'somewhat' b'filled' b'.' b'<eos>' b'Odaenathus' b',' b'initially' b'so' b'witnessed' b':'
    b'M.' b'Perrin' b',' b'l' b'Alexis' b',' b'George' b'Butler' b'Newton' b'on' b'Durham' b'and' b'<unk>' b'47' b',' b'and' b'the' b'population' b',' b'<unk>'
    b'window' b'petitioned' b'.' b'Additionally' b',' b'North' b'Angeles' b'that' b'accompanied' b'into' b'many' b'books' b'run' b'unconfirmed' b',' b'<unk>' b',' b'observed' b'(' b'1968'
    b')' b'Johann' b'420' b',' b'species' b'word' b'.' b'The' b'Swedish' b'state' b'is' b'first' b'written' b'by' b'a' b'Halmahera' b',' b'with' b'290' b'children'
    b'with' b'pale' b'northern' b',' b'<unk>' b',' b'around' b'600' b'trouble' b'.' b'<unk>' b',' b'wet' b',' b'most' b'chicks' b'the' b'fish' b'Notwithstanding' b'most'
    b'of' b'its' b'massacres' b',' b'or' b'an' b'adult' b'and' b'<unk>' b'bodies' b'to' b'yellowish' b'.' b'<eos>' b'The' b'common' b'starling' b'is' b'a' b'claim'
    b'of' b'all' b'@-@' b'or' b'@-@' b'migratory' b',' b'including' b'white' b',' b'for' b'is' b'a' b'teacher' b'D.' b'Croton' b',' b'but' b'it' b'is'
    b'other' b'or' b'in' b'ancient' b'periods' b'where' b'the' b'year' b'levels' b'could' b'be' b'great' b'.' b'<eos>' b'M.' b'<unk>' b'have' b'adapted' b'their' b'pregnancy'
    b'species' b',' b'anti' b'@-@' b'roll' b',' b'sheep' b',' b'towards' b'the' b'function' b'of' b'both' b'strata' b',' b'and' b'into' b'Arora' b')' b','
    b'despite' b'"' b'outside' b'proto' b'homeworld' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Etymology' b'=' b'=' b'<eos>' b'<eos>' b'Originally' b',' b'alloys' b'like'
    b'be' b'discovered' b'to' b'possess' b'singing' b'crests' b'after' b'1990' b'as' b'plum' b'atrox' b',' b'as' b'they' b'are' b'collapsed' b'except' b'in' b'Chennai' b'what'
    b'offered' b'in' b'Gladstone' b',' b'usually' b'dug' b'a' b'collection' b'of' b'<unk>' b'such' b'as' b'decay' b',' b'<unk>' b',' b'habitat' b',' b'and' b'Tyndall'
    b'.' b'Together' b',' b'pools' b'whom' b'foraging' b',' b'with' b'a' b'fact' b'being' b'only' b'proof' b'on' b'be' b'occurring' b'within' b'the' b'beak' b','
    b'the' b'two' b'surrounds' b'in' b'certain' b'forms' b'humorous' b',' b'in' b'exchange' b',' b'and' b'<unk>' b'again' b'.' b'When' b'it' b'was' b'the' b'subject'
    b'of' b'Divine' b',' b'prey' b',' b'and' b'can' b'be' b'broken' b',' b'four' b'more' b'likely' b'falls' b'and' b'produce' b'independently' b'many' b'of' b'them'
    b'to' b'consist' b'of' b'several' b'spots' b'.' b'The' b'temples' b'on' b'some' b'other' b'nesting' b'needs' b'can' b'be' b'taught' b'and' b'rarely' b'armed' b'long'
    b'Nights' b',' b'so' b'many' b'bands' b'were' b'vulnerable' b'as' b'the' b'<unk>' b'oxygen' b',' b'light' b'@-@' b'length' b'fluid' b',' b'shale' b',' b'courage'
    b',' b'and' b'Milhouse' b'.' b'As' b'a' b'result' b',' b'Tribe' b'interpretation' b'suggests' b'Exodus' b'revolt' b'and' b'to' b'activation' b'a' b'desert' b'by' b'eight'
    b'hybrids' b'instead' b'the' b'presidency' b'.' b'It' b'is' b'often' b'related' b'to' b'their' b'behaviour' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b':' b'a'
    b'disk' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of' b'description' b'call' b',' b'he' b'had' b'one' b'of' b'males' b'signals' b'reading' b'bears' b'nine' b'sacred'
    b'times' b'.' b'The' b'back' b'specimen' b'is' b'a' b'relatively' b'<unk>' b'item' b',' b'but' b'the' b'stem' b'is' b'richly' b'sung' b'by' b'"' b'dozens'
    b'of' b'art' b'"' b'.' b'His' b'kakapo' b',' b'long' b'studies' b'purchased' b'by' b'beams' b',' b'or' b'red' b',' b'amid' b'their' b'eye' b'into'
    b'her' b'role' b'.' b'Its' b'highly' b'common' b'observation' b'of' b'hunt' b'Stock' b'is' b'zero' b'that' b'of' b'(' b'Flagler' b')' b'.' b'He' b'eventually'
    b'exists' b'Ireland' b'as' b'God' b'of' b'her' b'<unk>' b'<unk>' b'amounting' b'to' b'<unk>' b'(' b'<unk>' b')' b',' b'so' b'rises' b'\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x83\xe3\x83\x97' b'and' b'association'
    b'off' b'on' b',' b'he' b'is' b'being' b'distinguished' b'by' b'her' b'son' b',' b'Leonard' b'<unk>' b'finds' b'children' b'about' b'him' b',' b'fly' b'sent'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.5
    loss: 5.168
    elapsed time (seconds): 104.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  8.981 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
