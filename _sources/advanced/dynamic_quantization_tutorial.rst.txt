.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'It' b'is' b'not' b'frequent' b'when' b'he' b'falls' b'his' b'final' b'season' b'.' b'It' b'is' b'resembling' b'that' b'it' b'is' b'portrayed' b'at'
    b'any' b'other' b'land' b',' b'but' b'either' b'advised' b'<unk>' b'the' b'Sognsvann' b',' b'then' b'accepted' b'or' b'caused' b'him' b'to' b'struggle' b',' b'and'
    b'said' b'because' b'the' b'all' b'frequent' b'vein' b'was' b'but' b'that' b',' b'not' b'when' b'the' b'reason' b'to' b'step' b'with' b'them' b',' b'they'
    b'happens' b'regain' b'during' b'the' b'country' b'.' b'According' b'to' b'Wintory' b'writes' b'"' b'does' b'rather' b'suitable' b'"' b'(' b'over' b'32' b'years' b'temperatures'
    b',' b'2' b'in' b')' b',' b'and' b'their' b'nation' b'<unk>' b'(' b'Service' b'and' b'Irish' b')' b'and' b'more' b'relatable' b'are' b'are' b'curved'
    b'in' b'its' b'words' b'(' b'more' b'numerous' b'MSHD' b'and' b'other' b'different' b'artists' b')' b'.' b'More' b'than' b'10' b'degree' b'can' b'be' b'adapted'
    b'slowly' b',' b'as' b'eaten' b'by' b'multiple' b'or' b'1998' b',' b'with' b'very' b'@-@' b'time' b'to' b'promote' b'depicting' b'them' b'to' b'acquire' b'balls'
    b'who' b'needed' b'off' b'the' b'young' b'power' b'away' b'.' b'staining' b'at' b'once' b'other' b'birds' b'decrease' b'their' b'first' b',' b'while' b'the' b'lighter'
    b'lowest' b'partial' b'figure' b'exists' b'in' b'her' b'final' b'playing' b',' b'or' b'it' b'is' b'distinguished' b'as' b'Twice' b'(' b'though' b'the' b'volcanic' b'half'
    b'advocates' b'as' b'if' b'the' b'12th' b')' b'can' b'find' b'after' b'its' b'predecessor' b'\xe2\x80\x93' b'<unk>' b'of' b'pushing' b'answers' b'.' b'The' b'head' b'is'
    b'<unk>' b'for' b'of' b'males' b',' b'because' b'the' b'pairs' b'becomes' b'moored' b'as' b'sending' b'life' b'up' b',' b'broad' b'bodies' b'Wanting' b'539' b'and'
    b'limit' b'.' b'Each' b'mills' b'includes' b'it' b'almost' b'as' b'underwater' b'as' b'it' b'will' b'go' b'the' b'head' b'at' b'night' b',' b'and' b'more'
    b'grounds' b'with' b'it' b'are' b'steadily' b'staying' b'.' b'Their' b'first' b'420' b'gun' b'ends' b'from' b'blood' b'is' b'<unk>' b'enough' b'to' b'take' b'a'
    b'pale' b'surface' b'.' b'Males' b'are' b'promoted' b'as' b'and' b'there' b'may' b'be' b'a' b'system' b'they' b'used' b'their' b'outfit' b'.' b'There' b'are'
    b'no' b'Fokker' b'threefold' b'changes' b'to' b'cook' b'.' b'This' b'charged' b'on' b'a' b'bird' b'or' b'relates' b'tides' b'but' b'close' b'to' b'her' b'other'
    b'milking' b'.' b'Males' b'can' b'be' b'able' b'to' b'become' b'two' b'females' b'also' b'Bowes' b'or' b'deliberate' b'.' b'The' b'limit' b'of' b'record' b'increased'
    b'low' b'due' b'to' b'noisy' b'Turtle' b'activity' b'.' b'Zapata' b'(' b'including' b'a' b'high' b'aspect' b'of' b'<unk>' b'was' b'uncertain' b',' b'meant' b','
    b'"' b'Elkton' b'<unk>' b')' b'.' b'"' b'<eos>' b'When' b'review' b'should' b'command' b'his' b'natural' b'proteins' b',' b'they' b'have' b'these' b'social' b'periods'
    b'of' b'humans' b',' b'which' b'produces' b'them' b'longer' b'while' b'Wider\xc3\xb8e' b'to' b'be' b'distinguished' b'by' b'owl' b'as' b'lacking' b'among' b'her' b',' b'often'
    b'not' b'All\xc4\x81h' b'.' b'Enzymes' b'have' b'block' b'patches' b'up' b'.' b'When' b'whatever' b'in' b'the' b'widespread' b'tweeter' b'of' b'the' b'famine' b',' b'it'
    b'cannot' b'be' b'dependent' b'realistic' b'in' b'act' b'by' b'any' b'other' b'axis' b'of' b'tissue' b'or' b'their' b'wings' b',' b'so' b'whom' b'the' b'flight'
    b'is' b'strikingly' b',' b'the' b'kakapo' b'indicate' b'that' b'they' b'are' b'incapable' b'of' b'the' b'going' b'of' b'Thea' b',' b'which' b'tend' b'to' b'its'
    b'power' b'.' b'Odaenathus' b'often' b'<unk>' b'gig' b',' b'having' b'been' b'for' b'<unk>' b'.' b'They' b'never' b'communicate' b'by' b'palace' b'water' b'based' b'on'
    b'Fiji' b'.' b'According' b'to' b'its' b'name' b',' b'it' b'would' b'be' b'doing' b'to' b'do' b'so' b'and' b'do' b'been' b'able' b'to' b'consider'
    b'their' b'bacteria' b'around' b'their' b'teeth' b'to' b'Jacques' b'Garza' b'.' b'kitsu' b',' b'this' b'does' b'summit' b'it' b',' b'even' b'of' b'nature' b'.'
    b'When' b'typical' b',' b'this' b'first' b"'Carmel" b'body' b'(' b'toothless' b',' b'when' b'of' b'young' b'previously' b'Reubens' b')' b'per' b'<unk>' b'is' b'often'
    b'partially' b'food' b'.' b'One' b'are' b'recommended' b'to' b'kill' b'a' b'wider' b'wolf' b',' b'which' b'largely' b'undergo' b'on' b'ever' b'<unk>' b'.' b'If'
    b'mature' b',' b'it' b'score' b'does' b'not' b'need' b'to' b'indicate' b'that' b'any' b'<unk>' b'mound' b'has' b'vegetarian' b'steady' b',' b'with' b'"' b'<unk>'
    b'"' b'.' b'<eos>' b'Graphics' b'vary' b'on' b'10' b'years' b'Hell' b'(' b'2' b'minutes' b')' b',' b'+' b'today' b'.' b'It' b'also' b'includes'
    b'bypass' b'blood' b'scales' b'and' b'other' b'insects' b'who' b'can' b'no' b'predator' b'by' b'one' b'gods' b',' b'so' b'many' b'close' b'is' b'in' b'1994'
    b',' b'but' b'<unk>' b'fish' b'rituals' b'she' b'not' b'low' b'worms' b',' b'models' b'could' b'continue' b'to' b'beat' b'the' b'eye' b'.' b'Overall' b','
    b'they' b'do' b'not' b',' b'so' b'he' b'also' b'finally' b'devastated' b'villains' b'62' b'\xe2\x80\x93' b'2' b'.' b'One' b'test' b'size' b'and' b'arms' b'have'
    b'repeated' b'two' b'predators' b'well' b'as' b'medical' b'young' b'competitors' b',' b'but' b'only' b'one' b'characters' b'within' b'Tennyson' b"'s" b'eggs' b'.' b'They' b'can'
    b'appear' b'the' b'head' b'to' b'defend' b'<unk>' b'leaders' b'.' b'A' b'female' b'Sichuan' b'has' b'just' b'cited' b':' b'one' b'soft' b'parks' b'(' b'as'
    b'far' b'as' b'the' b'socio' b'intervals' b'over' b'that' b')' b'instructing' b'program' b'atmospheres' b'.' b'Similar' b'green' b'drafts' b'by' b'Japanese' b'distinct' b'agreement' b'required'
    b'northward' b'as' b'battle' b',' b'like' b',' b'on' b'a' b'waited' b',' b'maximum' b'sagebrush' b',' b'need' b'to' b'be' b'dark' b'banking' b'.' b'These'
    b'species' b'have' b'been' b'shown' b'by' b'Odaenathus' b"'s" b'modern' b'areas' b'that' b'is' b'<unk>' b'producing' b'so' b'.' b'<eos>' b'At' b'every' b'core' b'from'
    b'30' b'years' b',' b'the' b'fungus' b'characteristic' b'do' b'not' b'knock' b'to' b'horns' b'.' b'They' b'enables' b'a' b'high' b'shielded' b'of' b'1' b'@.@'
    b'2' b'to' b'4' b'@.@' b'5' b',' b'in' b'high' b'spots' b'being' b'FITs' b'until' b'they' b'was' b'seen' b'on' b'5' b'December' b',' b'allows'
    b'18' b'hormones' b'.' b'A' b'male' b'increase' b'approximately' b'<unk>' b'chicken' b'deep' b'.' b'<eos>' b'Religious' b'sexpunctatus' b')' b'are' b'there' b'to' b'be' b'common'
    b'numbers' b'of' b'sand' b',' b'as' b'they' b'happened' b',' b'view' b',' b'fade' b',' b'griffin' b'or' b'foraging' b'.' b'<eos>' b'Males' b'are' b'also'
    b'affected' b'by' b'geologic' b'@-@' b'sized' b'spices' b',' b'which' b'is' b'now' b'associated' b'by' b'return' b'to' b'humans' b'on' b'25' b'December' b'1945' b'.'
    b'This' b'membership' b'has' b'been' b'angling' b'over' b'elaborate' b'errors' b',' b'such' b'as' b'<unk>' b',' b'refining' b',' b'just' b'smaller' b'@-@' b'time' b','
    b'for' b'example' b'that' b'call' b',' b'1849' b',' b'sprites' b',' b'welfare' b',' b'and' b'others' b'of' b'cats' b'.' b'Some' b'low' b'relative' b'gardens'
    b'are' b'also' b'fatal' b'.' b'There' b'is' b'<unk>' b'from' b'their' b'racing' b'starlings' b'in' b'Territories' b',' b'Europe' b',' b'and' b'colt' b'.' b'<eos>'
    b'On' b'surgery' b',' b'another' b'head' b'species' b'were' b'unusual' b'by' b'while' b'one' b'transcription' b'more' b'likely' b'of' b'clues' b'.' b'Based' b'with' b'their'
    b'prayer' b'@-@' b'reared' b'to' b'pure' b'starling' b'from' b'eggs' b',' b'it' b'have' b'on' b'a' b'cellular' b'shell' b'@-@' b'setting' b'man' b'which' b'predators'
    b'the' b'feathers' b'of' b'works' b'to' b'Cigars' b'.' b'Females' b'feed' b',' b'but' b'those' b'@-@' b'breaking' b'that' b'consistent' b'reproductive' b'its' b'descriptions' b'or'
    b'always' b'immediately' b'survive' b'not' b'to' b'do' b'so' b'.' b'Each' b'species' b'is' b'commonly' b'made' b'in' b'Horseshoe' b'v.' b'Males' b'all' b'south' b'of'
    b'its' b'population' b',' b'being' b'commonly' b'given' b'to' b'in' b',' b'under' b'example' b'starts' b'when' b'they' b'are' b'<unk>' b',' b'Gate' b'rises' b'by'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 221.5
    loss: 5.168
    elapsed time (seconds): 111.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  41.955 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
