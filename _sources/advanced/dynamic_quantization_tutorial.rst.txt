
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'be' b'signed' b'in' b'19th' b'ratings' b'taken' b'by' b'their' b'<unk>' b'grade' b',' b'causing' b'short' b'data' b'odd' b'technique' b'(' b'which' b'allowed' b'knit'
    b'Adili' b')' b'set' b'to' b'aid' b'.' b'Common' b'behavior' b'will' b'be' b'similar' b'among' b'these' b'industries' b'with' b'being' b'lauded' b'.' b'Before' b'Mogadiscio'
    b'night' b'in' b'February' b'24' b',' b'2006' b',' b'he' b'was' b'pretty' b'anticipated' b'on' b'Southern' b'history' b'.' b'It' b'was' b'one' b'of' b'the'
    b'first' b'heroes' b'in' b'sporting' b'George' b'Dunand' b'tragic' b'a' b'National' b'group' b'of' b'Energy' b'highways' b',' b'which' b'was' b'just' b'awarded' b'in' b'England'
    b'<eos>' b'His' b'50th' b'retail' b'survey' b'was' b'immediately' b'retired' b'with' b'David' b'Powell' b',' b'which' b'took' b'part' b'of' b'the' b'Roseberys' b',' b'and'
    b'hired' b'a' b'brief' b'change' b'for' b'rhetoric' b'in' b'the' b'inappropriate' b'perspective' b'.' b'This' b'rest' b'triggered' b'numerous' b'reviewers' b'of' b'several' b'years' b','
    b'making' b'lbw' b'display' b'officers' b'throughout' b'these' b'or' b'future' b'things' b'.' b'O' b"'Malley" b'won' b'an' b'campaign' b'like' b'breathy' b'winged' b'or' b'the'
    b'Jeff' b'tackle' b'(' b'Today' b')' b'from' b'the' b'miniseries' b'and' b'Chen' b'took' b'part' b'a' b'months' b'to' b'be' b'abolished' b'by' b'restoring' b'suggest'
    b'to' b'brother' b'5' b'from' b'September' b'3' b',' b'2008' b'.' b'<eos>' b'On' b'April' b'30' b',' b'2010' b',' b'a' b'hurricane' b'moved' b'Lane'
    b'Lowney' b'enthusiasts' b'on' b'it' b'.' b'Now' b'of' b'Thew' b',' b'his' b'FISA' b',' b'Magic' b'board' b'dropped' b'47' b'%' b'with' b'sword' b'points'
    b',' b'including' b'local' b'Horizons' b'numbers' b',' b'leaving' b'FIFA' b'Germany' b',' b'which' b'had' b'a' b'general' b'entry' b'from' b'Australian' b'inflated' b'album' b';'
    b'PlayStation' b'York' b'Machine' b'gave' b'force' b'for' b'both' b'other' b'games' b'in' b'1984' b'.' b'The' b'Bardufoss' b'was' b'released' b'to' b'ensure' b'other' b'to'
    b'conceal' b'enemies' b'due' b'to' b'108' b'years' b',' b'as' b'was' b'faster' b'column' b'because' b'they' b'were' b'forced' b'to' b'go' b'to' b'Port' b'Howard'
    b'.' b'After' b'represented' b'his' b'own' b'development' b'on' b'wait' b',' b'Stokes' b'met' b'the' b'Robyn' b'to' b'be' b'made' b'to' b'be' b'determined' b'of'
    b'South' b'Carolina' b'as' b'"' b'Taylor' b'of' b'Centre' b'"' b'(' b'hoisting' b'Knicks' b')' b'on' b'the' b'studio' b'Draft' b',' b'with' b'Greg' b'@-@'
    b'Brown' b'on' b'other' b'sides' b';' b'car' b"'s" b'drummer' b'Collection' b'optioned' b'a' b'conference' b'tomb' b',' b'backed' b'"' b'The' b'<unk>' b'"' b','
    b'Raffles' b'pill' b',' b'and' b'Roger' b'Snow' b'in' b'Bell' b'.' b'The' b'support' b'of' b'cruelty' b'used' b'to' b'create' b'the' b'third' b'city' b'of'
    b'two' b'novels' b'within' b'Omar' b',' b'followed' b'Decline' b',' b'with' b'three' b'stories' b',' b'outside' b'd6' b'(' b'II' b'of' b'1000' b')' b'per'
    b'year' b',' b'and' b'9' b'\xe2\x80\x93' b'4' b'traviata' b'.' b'In' b'2012' b',' b'it' b'was' b'published' b'as' b'BBC' b'in' b'Rhodesia' b'.' b'New'
    b'Development' b',' b'Alice' b'State' b',' b'and' b'Yankovic' b'would' b'turn' b'on' b',' b'\xe2\x80\x94' b'Responding' b'after' b'.' b'The' b'<unk>' b'Broadcasting' b'described' b'guest'
    b'efforts' b',' b'but' b'in' b'completion' b'return' b'a' b'welcome' b'benefit' b'demand' b'has' b'pointed' b'at' b'or' b'federal' b'reviews' b':' b'<eos>' b'Baltimore' b'flesh'
    b'now' b'lived' b'in' b'Spanish' b'@-@' b'engine' b'2' b'years' b'from' b'Dharmendra' b',' b'but' b'he' b'has' b'left' b'Promise' b'in' b'the' b'township' b'\xe2\x80\x99'
    b's' b'list' b',' b'and' b'number' b'probably' b'got' b'him' b'to' b'be' b'near' b'about' b'once' b'making' b'true' b'about' b'Obama' b'is' b'movies' b'.'
    b'bacteria' b'claim' b'care' b'plays' b'long' b'with' b'a' b'bit' b',' b'"' b'The' b'Soviets' b'of' b'their' b'body' b'from' b'national' b'beauty' b'.' b'If'
    b'it' b'is' b'not' b'more' b'exciting' b'vintners' b'like' b'The' b'esque' b'behavior' b'that' b'Nicholl' b'now' b'representation' b'of' b'Hope' b'are' b'competent' b',' b'and'
    b'so' b'it' b'is' b'just' b'.' b'Brown' b'is' b'not' b'without' b'us' b'and' b'the' b'manufacture' b'of' b'no' b'"' b'influences' b'.' b'But' b'where'
    b'a' b'Chicago' b'structure' b',' b'a' b'Protesters' b'and' b'will' b'be' b'wanting' b'to' b'succeeds' b'in' b'development' b'.' b'If' b'there' b"'s" b'humiliated' b'.'
    b'If' b'especially' b'regulatory' b'attempted' b'toward' b',' b'the' b'head' b'while' b'this' b'phrase' b'velvet' b'of' b"'d" b'9' b'@.@' b'2' b',' b'<unk>' b','
    b'organized' b'with' b'22' b'@.@' b'39' b'times' b',' b'and' b'the' b'average' b'4' b'launches' b'in' b'specific' b'areas' b',' b'within' b'an' b'average' b'<unk>'
    b'that' b'he' b'realizes' b'being' b'as' b'false' b'as' b'possible' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'mourning' b'short' b'authors' b'gritty' b'today' b',' b'six' b'groove' b'in' b'two' b'sets' b'of' b'scientific' b'purposes' b'of' b'rare' b'items' b',' b'may' b'be'
    b'less' b'profitable' b'.' b'Reports' b'such' b'as' b'exiting' b'down' b'muscles' b'and' b'some' b'high' b'insects' b'Atas' b'males' b'has' b'also' b'engaged' b'thanks' b'to'
    b'similar' b'more' b'Irish' b'work' b'.' b'It' b'is' b'generally' b'<unk>' b'throughout' b'the' b'landings' b',' b'but' b'is' b'not' b'unlikely' b'to' b'be' b'Ireland'
    b"'s" b'anger' b'.' b'The' b'Plum' b'Hall' b'of' b'McElroy' b'\xe2\x80\x93' b'Canyon' b'by' b'Atlanta' b',' b'is' b'known' b'by' b'<unk>' b',' b'singled' b'McCall'
    b"'s" b'all' b'@-@' b'star' b'position' b',' b'and' b'sometimes' b'described' b'as' b'being' b'easier' b'.' b'In' b'the' b'same' b'year' b',' b'420' b'females'
    b'meets' b'humans' b',' b'<unk>' b',' b'distribution' b',' b'Recreation' b',' b'<unk>' b',' b'and' b'mental' b'innermost' b'populations' b'.' b'Concerned' b',' b'they' b'look'
    b'with' b'negative' b'legendary' b'cases' b'that' b'they' b'do' b'.' b'In' b'Allies' b',' b'Katy' b'knew' b'visiting' b'postponed' b'murderer' b'as' b'they' b'went' b'here'
    b'before' b'they' b'can' b'say' b'.' b'symbolize' b'rapid' b',' b'all' b'and' b'those' b'is' b'"' b'platinum' b'.' b'It' b'is' b'good' b',' b'though'
    b'any' b'birds' b'like' b'with' b'result' b'<unk>' b'horsecar' b'or' b'abnormal' b'"' b'.' b'In' b'his' b'earlier' b'strength' b'featured' b'it' b',' b'and' b'noisy'
    b'Big' b'are' b'respite' b'\xe2\x80\x94' b'with' b'rocks' b'but' b'housed' b'a' b'wedding' b'or' b',' b'approaches' b'with' b'oil' b'.' b'<eos>' b'During' b'certain' b'nests'
    b'may' b'be' b'different' b'to' b'it' b',' b'the' b'L\xc3\xa9gion' b'<unk>' b'<unk>' b'Osato' b'is' b'written' b'by' b'has' b'learnt' b'three' b'females' b'he' b'came'
    b'to' b'them' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Predators' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Arabic' b'Tsar' b'of' b'Sentinel' b'gives' b'Brachylophosaurus' b'for'
    b'race' b'a' b'stories' b'too' b'found' b'on' b'a' b'small' b'nuclear' b'tree' b'between' b'Realm' b'.' b'They' b'do' b'not' b'acknowledge' b'that' b'3' b'@.@'
    b'4' b'to' b'5' b'\xe2\x80\x93' b'45' b'in' b'(' b'<unk>' b'mm' b')' b',' b'a' b'police' b'of' b'dark' b'when' b'their' b'common' b'origin' b'may'
    b'be' b'rage' b'\xe2\x80\x98' b'visible' b'victims' b';' b'thousands' b'of' b'evidence' b'methods' b'are' b'black' b',' b'with' b'the' b'risk' b'of' b'Katib' b'birds' b'.'
    b'Just' b',' b'they' b'follows' b'their' b'egg' b'because' b'or' b'banquet' b',' b'thereby' b'covered' b'by' b'self' b'@-@' b'male' b'activity' b',' b'combined' b'they'
    b'are' b'hollow' b'a' b'severe' b'bite' b'in' b'parts' b'spread' b'as' b'Leon' b'W\xc5\x82adys\xc5\x82aw' b',' b'though' b'more' b'basic' b'techniques' b'is' b'increasingly' b'closest' b'.'
    b'It' b'will' b'occasionally' b'be' b'heard' b'.' b'Prior' b'to' b',' b'gaming' b'birds' b'have' b'their' b'distinctive' b'Celtic' b'field' b'nitrogen' b',' b'the' b'final'
    b'species' b',' b'well' b'MCOA' b'may' b'be' b'synonymous' b'in' b'many' b'eukaryotic' b'theorem' b',' b'while' b'others' b'do' b'not' b'appear' b'like' b'they' b'by'
    b'thermal' b'treatments' b'.' b'Prior' b'to' b'<unk>' b'(' b'athletes' b')' b',' b'<unk>' b',' b'conservation' b'or' b'green' b',' b'even' b'structure' b'or' b'lanthanides'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 208.5
    loss: 5.168
    elapsed time (seconds): 110.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  28.583 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
