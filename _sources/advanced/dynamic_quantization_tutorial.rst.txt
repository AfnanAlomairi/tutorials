.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'the' b'Arabs' b'of' b'<unk>' b'chairman' b'It' b'decommissioned' b'another' b'chapel' b'titled' b'"' b'The' b'general' b'surface' b'Hebrew' b'injury' b'.' b'This' b'has'
    b'Killing' b"'t" b'happen' b'Commonwealth' b'content' b'.' b'"' b'A' b'list' b'of' b'criminal' b'spots' b'began' b'it' b'to' b'exist' b'eye' b'to' b'continue' b'and'
    b',' b'even' b'after' b'ALL' b'out' b'.' b'The' b'contrast' b'Fredrik' b'America' b'is' b'analyzed' b'to' b'be' b'print' b'through' b'symbiont' b',' b'and' b'the'
    b'other' b'females' b'drove' b'or' b'forest' b'of' b'Wu' b"'s" b'engine' b'\xe2\x80\x94' b'5' b'ton' b',' b'debris' b',' b'programmes' b'and' b'two' b'bitter' b'Temperatures'
    b',' b'attempting' b'to' b'open' b'it' b'they' b'return' b'to' b'<unk>' b'(' b'95' b'%' b')' b'found' b'see' b'in' b'gray' b'acid' b'.' b'If'
    b'the' b'communal' b'feeding' b'areas' b'is' b'farcical' b',' b'normally' b'the' b'head' b'compared' b'to' b'or' b'even' b'apparatus' b',' b'as' b'they' b'were' b'more'
    b'short' b'.' b'She' b'won' b'nursing' b'with' b'The' b'most' b'famous' b'immediate' b'blow' b'on' b'his' b'minister' b'.' b'The' b'most' b'recent' b'version' b'has'
    b'aged' b'would' b'be' b'to' b'be' b'turning' b'down' b'as' b'the' b'mayor' b"'s" b'relating' b'to' b'<unk>' b'.' b'The' b'head' b'clear' b'previously' b'take'
    b'as' b'to' b'seek' b'.' b'When' b'Kobe' b'in' b'all' b'stages' b',' b'by' b'Capital' b',' b'electronic' b'and' b'evil' b'close' b'.' b'I' b'don'
    b"'t" b'all' b'any' b'because' b'people' b'significantly' b'"' b'trusted' b'when' b'he' b'had' b'worshipped' b'for' b'Ceres' b'who' b'must' b'have' b'been' b'forecast' b'by'
    b'a' b'<unk>' b'established' b'off' b'combat' b'added' b',' b'though' b'lack' b'wouldn' b"'t" b'agree' b'good' b'up' b'the' b'form' b'of' b'both' b'computers' b','
    b'also' b'to' b'change' b'in' b'the' b'<unk>' b'@-@' b'life' b'.' b'If' b'I' b'am' b'bad' b'.' b'"' b'<eos>' b'Further' b',' b'they' b'surrendered'
    b'pasture' b'media' b'.' b'Once' b'Scranton' b"'s" b'removal' b'was' b'probably' b'suggested' b'to' b'push' b'.' b'<eos>' b'Originally' b',' b'the' b'Oxford' b'Agreement' b'did'
    b'not' b'quit' b'its' b'size' b'around' b'any' b'sale' b'who' b'was' b'at' b'birth' b'.' b'Bell' b',' b'however' b',' b'Flight' b'<unk>' b'suddenly' b'and'
    b'Scleroderma' b'Gandhi' b'cites' b'a' b'car' b'proved' b'to' b'praise' b'the' b'world' b"'s" b'desire' b'to' b'try' b'to' b'attract' b'other' b'field' b'children' b'.'
    b'Hornung' b'responded' b'writing' b'"' b'enforcement' b'of' b'a' b'vestments' b'free' b',' b'jazz' b',' b'demanding' b'an' b'considerable' b'left' b'star' b'of' b'human' b'harsh'
    b'health' b'to' b'occupy' b'[' b'lingering' b']' b'over' b'Cathedral' b"'s" b'fields' b'picture' b'would' b'justify' b'and' b'feel' b'the' b'thicket' b'"' b'.' b'The'
    b'majority' b'of' b'the' b'European' b'6th' b'Division' b'and' b'his' b'then' b'encounter' b'won' b'descriptions' b'a' b'controversial' b'agreement' b'in' b'1978' b'to' b'reach' b'European'
    b'Australia' b';' b'infantry' b'opens' b'WAC' b'or' b'special' b'candidate' b'<unk>' b'made' b'to' b'Karya' b',' b'Vista' b'Clair' b'.' b'Johnson' b'with' b'then' b'enjoyed'
    b'wanting' b'up' b'making' b'Roman' b'support' b'he' b'was' b'disillusioned' b'by' b'pot' b'in' b'South' b'America' b',' b'which' b'drove' b'to' b'create' b'all' b'all'
    b'frustrating' b'or' b'democratic' b'<unk>' b'digital' b'rates' b'Johnson' b'.' b'In' b'the' b'UK' b',' b'Indian' b'starlings' b'died' b'around' b'to' b'August' b'15' b','
    b'1866' b',' b'the' b'only' b'of' b'Mosley' b'to' b'tour' b'.' b'When' b'Mosley' b'declined' b'in' b'the' b'final' b'chapter' b',' b'Formula' b"'Malley" b'met'
    b'Ruth' b'orchestras' b'in' b'Telugu' b',' b'which' b'were' b'being' b'permitted' b'on' b'their' b'captors' b'to' b'a' b'English' b'party' b'in' b'Historical' b'Russia' b'.'
    b'The' b'state' b'was' b'known' b',' b'it' b'could' b'have' b'been' b'how' b'a' b'triangular' b'Agreement' b'who' b'requested' b'live' b'phallic' b'relation' b'expecting' b'.'
    b'In' b'1930' b',' b'Mosley' b'donated' b'frequent' b'press' b'characteristics' b'in' b'time' b'to' b'time' b'up' b'the' b'final' b'and' b'a' b'main' b'all' b'@-@'
    b'sufficient' b'series' b'.' b'FOCA' b'drove' b'a' b'new' b'character' b',' b'but' b'moved' b'a' b'short' b'to' b'<unk>' b'1935' b',' b'on' b'25' b'October'
    b'1989' b'.' b'<eos>' b'During' b'the' b'first' b'because' b'year' b'nation' b'Hornung' b'was' b'his' b'first' b'Sigra' b'class' b',' b'and' b'a' b'member' b'of'
    b'chronicles' b'dairy' b'media' b'Anna' b'Willie' b'Lad' b'rejected' b'in' b'the' b'race' b'as' b'he' b'approached' b'@-@' b'later' b'Vincent' b'in' b'the' b'<unk>' b'Church'
    b'.' b'After' b'becoming' b'diagnosed' b'in' b'100' b'months' b',' b'Walpole' b'became' b'to' b'a' b'massacre' b'that' b'helped' b'more' b'than' b'one' b'time' b'from'
    b'Gary' b"'s" b'body' b'.' b'Khoo' b'wrote' b'Amsterdam' b'there' b'and' b'twigs' b'"' b'him' b'to' b'write' b'just' b'the' b'imposition' b'of' b'Trigger' b'"'
    b',' b'though' b'became' b'like' b'his' b'conspicuous' b'defender' b',' b'John' b'B.' b'J.' b'O' b'Fashi' b'for' b'India' b'.' b'The' b'Charlotte' b'Lord' b'was'
    b'caused' b'by' b'being' b'Judas' b'<unk>' b'to' b'attempt' b'Palestinians' b'vowed' b'to' b'be' b'such' b'.' b'<eos>' b'<unk>' b'about' b'seven' b'threatening' b'postseason' b'fighting'
    b'de' b"'Malley" b'next' b'<unk>' b'in' b'July' b'2004' b'were' b'involved' b'in' b'May' b'1909' b'.' b'<eos>' b'The' b'Royal' b'Parliament' b'forced' b'freedom' b'between'
    b'the' b'University' b'of' b'Wisconsin' b'by' b'Bell' b"'s" b'<unk>' b'after' b'seventeen' b'months' b'.' b'In' b'1895' b',' b'Hornung' b'reported' b'his' b'main' b'career'
    b',' b'"' b'A' b'Richmond' b'Pudding' b'Party' b'"' b'.' b'His' b'following' b'ratings' b'was' b'deployed' b'in' b'1882' b'by' b'FIA' b',' b'in' b'1988'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'<eos>' b'=' b'The' b'Cambodians' b'=' b'<eos>' b'<eos>' b'The' b'Romanian'
    b'Race' b',' b'Ontario' b'(' b'251' b')' b'is' b'a' b'planet' b'and' b'5' b'@-@' b'brightness' b'item' b'story' b'in' b'Atlanta' b'.' b'It' b'is'
    b'mainly' b'found' b'selected' b'in' b'1928' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Origins' b'=' b'=' b'<eos>' b'<eos>' b'Since' b'reconstruction' b',' b'capital' b'discovered'
    b'their' b'efforts' b'inside' b'the' b'object' b'of' b'her' b'estate' b'removal' b'.' b'However' b',' b'he' b'had' b'exactly' b'extensive' b'interest' b'from' b'twenty' b'drawings'
    b'per' b'game' b',' b'and' b'both' b'of' b'the' b'population' b'Army' b'was' b'being' b'destroyed' b',' b'and' b'did' b'not' b'exist' b'for' b'the' b'years'
    b'.' b'It' b'appears' b'to' b'be' b'erected' b'by' b'Ceres' b'(' b'probably' b'unveiled' b'until' b'1954' b')' b',' b'but' b'after' b'the' b'Sun' b'into'
    b'vague' b',' b'<unk>' b'@-@' b'tube' b',' b'the' b'domain' b'of' b'increased' b'the' b'development' b'of' b'weaving' b'Clonmacnoise' b'in' b'Ireland' b'and' b'France' b'structures'
    b'and' b'roll' b'made' b'the' b'western' b'modern' b'run' b'in' b'late' b'August' b',' b'Mississippi' b',' b'was' b'received' b'by' b'Franciscan' b'Hills' b'emigrated' b'of'
    b'the' b'NAACP' b'.' b'At' b'the' b'beginning' b'of' b'the' b'season' b'of' b'Tarantino' b'deer' b',' b'many' b'of' b'their' b'significant' b'Americans' b'were' b'<unk>'
    b';' b'Irish' b',' b'<unk>' b',' b'dog' b',' b'successes' b',' b'filiation' b'and' b'Mercedes' b"'s" b'provision' b'and' b'Smokey' b'miracles' b'(' b'also' b'socio'
    b',' b'Lt.' b':' b'<eos>' b'Light' b'algae' b',' b'Scottish' b'journalists' b')' b'is' b'seen' b'by' b'respectively' b'auction' b'in' b'1855' b'to' b'be' b'erected'
    b'by' b'maintaining' b'altitudes' b'a' b'genus' b'Cabral' b'for' b'expands' b'in' b'2015' b'.' b'During' b'Hoysala' b',' b'oak' b',' b'and' b'production' b'unearthed' b','
    b'was' b'split' b'in' b'237' b'<unk>' b',' b'Assuming' b'performances' b',' b'from' b'their' b'predecessor' b',' b'beginning' b'a' b'wide' b'opportunity' b'to' b'spend' b'through'
    b'Twelve' b'sins' b',' b'supplies' b'that' b'were' b'divided' b'into' b'aisle' b',' b'that' b'is' b',' b'indicated' b'this' b'name' b'of' b'altarpiece' b'.' b'There'
    b'are' b'the' b'evidence' b'that' b'several' b'can' b'where' b'none' b'of' b'volunteer' b'research' b'or' b'was' b'complicated' b'.' b'Several' b'of' b'these' b'date' b'in'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.9
    loss: 5.168
    elapsed time (seconds): 111.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  33.843 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
