
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'that' b'quit' b',' b'either' b'shield' b';' b'by' b'experts' b',' b'deep' b',' b'and' b'major' b'homes' b',' b'or' b'the' b'most' b'coterie' b','
    b'could' b'be' b'moved' b'.' b'These' b'languages' b'may' b'be' b'practically' b'to' b'have' b'once' b'or' b'care' b'to' b'resign' b'.' b'Inside' b'bearing' b'good'
    b'popular' b',' b'whites' b',' b'<unk>' b'kakapo' b',' b'or' b'great' b'asci' b'of' b'budget' b',' b'supplies' b'after' b'the' b'<unk>' b'as' b'"' b'moving'
    b'infantry' b'with' b'Australian' b'capitals' b'.' b'"' b'<eos>' b'Fauna' b'in' b'the' b'account' b'are' b'noted' b'due' b'to' b'their' b'scholarship' b'near' b'reason' b'to'
    b'treat' b'teeth' b'.' b'About' b'66' b'%' b'of' b'his' b'diet' b'at' b'A' b'distance' b',' b'it' b'is' b'a' b'longer' b'warning' b'that' b'also'
    b'reduced' b'their' b'shades' b'of' b'his' b'existence' b'.' b'Those' b'pagoda' b'enzyme' b'models' b'often' b'later' b'managed' b'to' b'be' b'massive' b'for' b'the' b'parallax'
    b'(' b'harsh' b'"' b'<unk>' b'Geastrum' b'"' b')' b'.' b'Also' b'on' b'the' b'island' b'in' b'1867' b',' b'according' b'to' b'that' b'T' b'O.'
    b'P.' b'diminished' b',' b'they' b'could' b'find' b'it' b'called' b'1' b'or' b'4' b'metres' b'(' b'5' b'@.@' b'85' b'in' b')' b'across' b'height'
    b',' b'and' b'another' b'breeding' b'may' b'be' b'observed' b'to' b'1871' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Habitat' b'=' b'=' b'<eos>' b'<eos>' b'The'
    b'earliest' b'discussed' b'feral' b'starling' b'of' b'poetry' b'hold' b'agricultural' b'ways' b'who' b'can' b'do' b'so' b'for' b'birds' b'and' b'establish' b'them' b'.' b'However'
    b',' b'they' b'are' b'seen' b'they' b'starting' b'.' b'Several' b'experts' b'also' b'belongs' b'to' b'undergo' b'diseases' b'.' b'Other' b'female' b'starlings' b'may' b'be'
    b'encountered' b'to' b'stick' b'of' b'nations' b'.' b'Thus' b'alterations' b',' b'such' b',' b'they' b'altered' b'socialist' b'sponsors' b',' b'including' b'water' b',' b'<unk>'
    b'and' b'ventral' b'woodlands' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Music' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'Ceres' b'formerly' b'is' b'less' b'thought' b','
    b'manuscripts' b'who' b'considered' b'over' b'her' b'head' b'genius' b',' b'and' b'a' b'similar' b'predator' b'of' b'other' b'sunlight' b',' b'that' b'included' b'that' b'Blacks'
    b'usually' b'leave' b'to' b'be' b'beneficial' b'to' b'humans' b'after' b'stated' b'they' b'say' b'in' b'phenomena' b'of' b'which' b'should' b'be' b'reported' b'.' b'bordering'
    b'around' b'the' b'same' b'starling' b',' b'it' b'avoided' b'them' b'to' b'believe' b'that' b'<unk>' b',' b'and' b'they' b'have' b'seizing' b'pair' b'to' b'have'
    b'made' b'.' b'<eos>' b'At' b'this' b'point' b',' b'Ceres' b'have' b'<unk>' b'small' b'numbers' b'of' b'one' b'men' b',' b'particularly' b'to' b'help' b'specific'
    b'images' b'of' b'human' b'forces' b',' b'while' b'the' b'kakapo' b'is' b'able' b'to' b'drain' b'better' b'a' b'well' b'flow' b'in' b'<unk>' b'.' b'Yet'
    b'by' b'wings' b'that' b'might' b'collapse' b'.' b'Vishnuvardhana' b'must' b'be' b'introduced' b'to' b'major' b'times' b',' b'followed' b'by' b'<unk>' b',' b'bleeding' b'.'
    b'In' b'any' b'other' b',' b'they' b'spread' b'as' b'their' b'<unk>' b';' b'there' b'is' b'possible' b'tradesmen' b'that' b'may' b'be' b'inclined' b'to' b'circulate'
    b'.' b'However' b',' b'they' b'have' b'rarely' b'enter' b'<unk>' b',' b'which' b'usually' b'grown' b'between' b'them' b'.' b'This' b'suggests' b'they' b'have' b'been'
    b'distributed' b'to' b'dry' b'else' b'Asked' b'USD' b'.' b'swelling' b'used' b'no' b'accounts' b'in' b'outcome' b'to' b'a' b'<unk>' b'fanbase' b',' b'a' b'minor'
    b'\xe2\x80\x93' b'10' b'metres' b'(' b'4' b'@.@' b'4' b'mi' b')' b'above' b'this' b'topic' b'.' b'It' b'can' b'stabilize' b'whether' b'they' b'should' b'be'
    b'applied' b'to' b'Valentin' b'platforms' b'show' b'common' b'structural' b'medicine' b'such' b'as' b'Dublin' b'due' b'to' b'Biogenesis' b'.' b'There' b'are' b'no' b'females' b'that'
    b'are' b'reported' b'to' b'have' b'this' b'specimen' b'.' b'<unk>' b'distributed' b'around' b'the' b'spots' b'yields' b'that' b'.' b'<eos>' b'In' b'fact' b',' b'Ceres'
    b'targeted' b'under' b'reduce' b'consolidation' b',' b'the' b'snakes' b'although' b'cult' b'humans' b'take' b'nest' b'understory' b'agencies' b'and' b'overwinter' b'on' b'direct' b'sense' b'of'
    b'small' b'conspiracy' b',' b'usually' b'shot' b'.' b'Common' b'leave' b'is' b'their' b'longer' b'movement' b'.' b'M.' b'galericulata' b'was' b'<unk>' b',' b'finally' b'as'
    b'it' b'may' b'be' b'only' b'less' b'birds' b'.' b'Even' b'the' b'storm' b'is' b'less' b'first' b'readily' b',' b'survive' b',' b'or' b'modified' b'their'
    b'habit' b'as' b'food' b'.' b'Within' b'this' b'species' b',' b'1' b'eggs' b'measure' b'them' b'to' b'be' b'<unk>' b'so' b'gold' b'or' b'Cork' b','
    b'but' b'dead' b'burns' b'were' b'<unk>' b'.' b'Mehbooba' b'controlled' b'also' b'as' b'"' b'zero' b'or' b'minor' b'"' b',' b'and' b'killed' b'in' b'2006'
    b'population' b'Counties' b'boundaries' b'.' b'There' b'is' b'believed' b'significantly' b'from' b'violence' b'when' b'common' b'tales' b'may' b'be' b'reasonably' b'inclined' b'.' b'<eos>' b'<unk>'
    b'them' b'to' b'attract' b'slippage' b',' b'they' b'may' b'be' b'made' b'to' b'repeat' b'their' b'children' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Safety' b'='
    b'=' b'<eos>' b'<eos>' b'Mass' b'helpers' b'are' b'thought' b'to' b'be' b'partly' b'the' b'biggest' b'body' b'of' b'Ceres' b'.' b'The' b'nucleoplasm' b'are' b'narrower'
    b'and' b'there' b'is' b'a' b'plasma' b'of' b'1' b'@.@' b'4' b'\xc2\xb5m' b',' b'about' b'20' b'meters' b'(' b'2' b'@.@' b'6' b'in' b')'
    b'and' b'ibotenic' b'chops' b'(' b'Jupiter' b')' b'.' b'Most' b'species' b'of' b'solutions' b'appear' b',' b'with' b'form' b'able' b'to' b'increase' b'different' b'pairs'
    b'that' b'the' b'flaws' b'may' b'start' b'detailing' b'or' b'so' b'die' b'.' b'These' b'feeding' b'starlings' b'are' b'may' b'be' b'variable' b'<unk>' b'from' b'<unk>'
    b'even' b'birds' b'.' b'Within' b'example' b',' b'they' b'should' b'territorial' b'their' b'size' b'to' b'suggestion' b'.' b'<eos>' b'Northern' b'regions' b'have' b'increased' b'mountainous'
    b'plumage' b'.' b'Of' b'this' b'Raphinae' b',' b'transcription' b',' b'discharged' b'on' b'flight' b',' b'may' b'be' b'pathogens' b'who' b'underway' b'.' b'Instrumentation' b'concerns'
    b'as' b'they' b'employ' b'of' b'human' b'or' b'solid' b'common' b'spots' b',' b'who' b'are' b'tied' b'into' b'plant' b'females' b'and' b'fresh' b'events' b'.'
    b'<eos>' b'One' b'characteristics' b'of' b'many' b'Persian' b'were' b'<unk>' b'.' b'Common' b'starlings' b'will' b'be' b'prepared' b'to' b'emerge' b'down' b'by' b'scientists' b','
    b'males' b',' b'fruits' b',' b'classmates' b',' b'hallucinations' b',' b'heating' b',' b'merchants' b',' b'techniques' b',' b'or' b'another' b'suitable' b'suitable' b'specialized' b','
    b'or' b'at' b'750' b',' b'<unk>' b'in' b'the' b'divinity' b'may' b'be' b'Ki' b'.' b'Unlike' b'a' b'pile' b'of' b'females' b'level' b'of' b'footage'
    b',' b'vertices' b'are' b'often' b'<unk>' b',' b'a' b'eye' b',' b'can' b'violate' b'populations' b'under' b'their' b'<unk>' b'procedures' b'.' b'Large' b'birds' b'were'
    b'found' b'to' b'be' b'<unk>' b'by' b'corroborated' b'.' b'In' b'the' b'process' b'of' b'Glenelg' b'with' b'<unk>' b',' b'they' b'long' b'<unk>' b'(' b'or'
    b'variable' b'cellular' b'breeds' b',' b'cooking' b'direction' b',' b'example' b',' b'and' b'buyout' b')' b',' b'beautiful' b'or' b'excess' b'trees' b'.' b'<eos>' b'The'
    b'east' b'rate' b'of' b'inflorescences' b'rates' b'are' b'Pavilion' b'in' b'mass' b',' b'which' b'slow' b'the' b'disputes' b'of' b'food' b'from' b'feeding' b'nest' b'or'
    b'axles' b'.' b'They' b'are' b'restricted' b'over' b'a' b'<unk>' b'<unk>' b',' b'mystery' b'<unk>' b'(' b'or' b'helping' b'yellow' b',' b'possibly' b'with' b'three'
    b'years' b',' b'and' b'some' b'other' b'male' b'birds' b')' b',' b'they' b'have' b'1897' b'.' b'The' b'female' b'complement' b'mammals' b'followed' b'only' b'the'
    b'use' b'of' b'<unk>' b'forests' b',' b'especially' b'around' b'Stand' b'and' b'covetousness' b'.' b'"' b'A' b'bookstore' b'is' b'impossible' b'with' b'wetlands' b'where' b'they'
    b'can' b'be' b'greatly' b'going' b'to' b'be' b'afraid' b'at' b'around' b'60' b'years' b'class' b'or' b'could' b'be' b'cancelled' b'mainly' b'we' b'<unk>' b'all'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.9
    loss: 5.168
    elapsed time (seconds): 109.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.910 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
