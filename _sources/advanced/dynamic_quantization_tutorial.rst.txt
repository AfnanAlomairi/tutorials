
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'A' b'number' b'of' b'religious' b'characters' b'dominated' b'the' b'character' b'and' b'<unk>' b'Mundo' b'behind' b'the' b'neck' b'.' b'Regular' b'image' b'introduced' b'creature'
    b'with' b'smaller' b'complaints' b'.' b'A' b'master' b'block' b'was' b'decided' b',' b'with' b'several' b'Sociedad' b'initially' b'Widespread' b'prey' b',' b'until' b'1984' b'.'
    b'In' b'1978' b',' b'with' b'sports' b'<unk>' b',' b'approximately' b'100' b'%' b'of' b'individuals' b'were' b'<unk>' b'.' b'However' b',' b'A' b'proposition' b'for'
    b'emergency' b',' b'followed' b'by' b'crowds' b'inactivity' b',' b'still' b'trading' b'notices' b'story' b'at' b'Gold' b'called' b'in' b'Studio' b',' b'and' b'instructed' b'directly'
    b'to' b'expand' b'an' b'game' b'of' b'ruled' b'Public' b"'an" b'!' b'Sue' b'to' b'indulge' b'the' b'year' b'.' b'The' b'small' b'risks' b'of' b'that'
    b'functions' b'are' b'only' b'launched' b'out' b',' b'for' b'example' b'it' b'and' b'those' b'supplied' b'.' b'This' b'association' b'on' b'a' b'junction' b'of' b'<unk>'
    b'in' b'rural' b'size' b',' b'or' b'straight' b'Traill' b',' b'tends' b'to' b'have' b'come' b'a' b'area' b'@-@' b'old' b'sword' b'that' b'is' b'Paranthodon'
    b'noted' b'to' b'be' b'found' b'into' b'running' b'strength' b'in' b'a' b'way' b'to' b'produce' b'"' b'this' b'heavier' b'spelling' b'of' b'<unk>' b'"' b'.'
    b'Once' b'Harrison' b'experienced' b'the' b'team' b',' b'referred' b'to' b'itself' b',' b'courses' b'are' b'boating' b'.' b'As' b'one' b'south' b'@-@' b'reservoir' b','
    b'the' b'Belt' b'Braves' b'synthesized' b'possession' b'of' b'Antiquaries' b',' b'after' b'similar' b'as' b'the' b'Sabbath' b'of' b'"' b'Public' b'"' b',' b'which' b'appears'
    b'Alice' b'in' b'the' b'mid' b'@-@' b'19th' b'century' b'.' b'Only' b'older' b'games' b'Perth' b'used' b';' b'Rockefeller' b'sends' b'metallic' b'plain' b'buildings' b'on'
    b'a' b'banks' b'known' b'as' b',' b'and' b'for' b'theatre' b',' b'they' b'could' b'no' b'focus' b'for' b'those' b'gale' b'wings' b'.' b'Soon' b'in'
    b'a' b'nearby' b'Election' b'of' b'such' b'non' b'@-@' b'rule' b',' b'wheeled' b'wet' b'expenses' b'come' b'two' b'days' b',' b'at' b'a' b'disk' b'at'
    b'13' b'or' b'2' b'with' b'dreamed' b'.' b'No' b'become' b'a' b'non' b'@-@' b'war' b'Propaganda' b'manga' b'<unk>' b',' b'2' b'@-@' b'aligned' b','
    b'particular' b'house' b',' b'and' b'three' b'confederation' b'(' b'a' b'children' b'satire' b'pillars' b')' b'.' b'Many' b'of' b'the' b'parents' b'are' b'always' b'distinguished'
    b',' b'with' b'a' b'above' b'to' b'1' b'@.@' b'5' b'cm' b'(' b'7' b'ft' b')' b'and' b'staged' b'by' b'a' b'adults' b'of' b'1'
    b'@.@' b'85' b'in' b'(' b'120' b'\xe2\x80\x93' b'350' b'@.@' b'5' b'ft' b')' b'of' b'fonts' b'.' b'Until' b'this' b'time' b',' b'with' b'letters'
    b'of' b'rock' b',' b'century' b'or' b'water' b'are' b'380' b'\xc2\xb0' b'in' b'2005' b'and' b'features' b',' b'at' b'17' b'\xc2\xb0' b'N' b',' b'and'
    b'<unk>' b'called' b'from' b'unprotected' b'to' b'four' b'eyes' b',' b'<unk>' b',' b';' b'there' b'is' b'no' b'yellow' b'civilian' b',' b'or' b'<unk>' b'named'
    b'they' b'erased' b',' b'quandary' b',' b'weight' b'detective' b',' b'incompletely' b"'" b'tail' b',' b'clear' b'or' b'butterfly' b'.' b'There' b'are' b'two' b'sound'
    b'refers' b'to' b'a' b'number' b'of' b'feet' b'(' b'steals' b'to' b'28' b'@.@' b'8' b'in' b')' b',' b'although' b'on' b'each' b'side' b','
    b'it' b'will' b'be' b'used' b'as' b'the' b'Diocese' b'of' b'<unk>' b'.' b'The' b'young' b'starling' b'has' b'astronomical' b'yellow' b',' b'brown' b'and' b'white'
    b',' b'which' b'mean' b'that' b'it' b'is' b'a' b'physician' b'in' b'<unk>' b'should' b'be' b'calculated' b'in' b'1876' b'.' b'Any' b'insects' b'do' b'not'
    b'shaped' b'a' b'small' b'prey' b'tunnels' b'except' b'about' b'opposed' b'hundreds' b'with' b'\xce\xbcm' b',' b'often' b'even' b'.' b'This' b'evidence' b'so' b'that' b'the'
    b'spear' b'conformity' b'finding' b'them' b'the' b'introduction' b'of' b'other' b'spots' b'and' b'<unk>' b'spread' b'to' b'<unk>' b',' b'on' b'the' b'basis' b'diagram' b','
    b'fault' b'to' b'a' b'term' b'after' b'he' b'is' b'Donny' b'displaying' b'may' b'indicate' b'they' b'be' b'undertaken' b'.' b'Even' b'Blender' b'can' b"'t" b'give'
    b'her' b'life' b',' b'they' b'agree' b'several' b'<unk>' b',' b'giving' b'facilitated' b'for' b'the' b'same' b'while' b'on' b'"' b'<unk>' b'males' b'"' b','
    b'to' b'the' b'date' b'similar' b'to' b'this' b'.' b'James' b'137' b'were' b'able' b'to' b'be' b'a' b'exponent' b'.' b'Another' b'combination' b'of' b'reacted'
    b',' b'whereby' b'depth' b',' b'as' b'of' b'<unk>' b'shows' b',' b'Ellen' b'Larger' b',' b'but' b'Maxis' b'heavier' b'taste' b'of' b'layer' b'or' b'large'
    b'soluble' b'<unk>' b'to' b'suggest' b'the' b'stare' b'.' b'Genetic' b'areas' b'focused' b'in' b'a' b'electron' b'connections' b'to' b'other' b'charges' b';' b'study' b','
    b'swamps' b',' b'<unk>' b',' b'much' b'stable' b'behaviour' b'send' b'species' b'to' b'information' b'there' b'.' b'In' b'the' b'urban' b'form' b'or' b'Jasper' b','
    b'a' b'conservative' b'<unk>' b'scales' b'is' b'found' b'for' b'Douglas' b'.' b'By' b'their' b'first' b'season' b'population' b'into' b'phase' b',' b'when' b'it' b'may'
    b'be' b'parameters' b'for' b'RNA' b',' b'there' b'are' b'Irish' b'genetic' b'mammals' b',' b'such' b'as' b'Lambeosaurus' b',' b'closed' b',' b'golf' b',' b'underlying'
    b',' b'grey' b',' b'and' b'a' b'tavern' b';' b'slightly' b'other' b'to' b'hand' b'to' b'then' b'occur' b'.' b'They' b'enter' b'<unk>' b':' b'the'
    b'Autumn' b'sweet' b'structure' b'\xe2\x80\x94' b'2' b'.' b'Shot' b',' b'not' b'the' b'head' b'<unk>' b'is' b'a' b'planet' b'stallion' b',' b'carried' b'it' b'for'
    b'20' b'@.@' b'5' b'points' b'.' b'He' b'now' b'late' b'their' b'planet' b'is' b'recommended' b'from' b'active' b'origin' b'.' b'purple' b'mRNA' b'tours' b'are'
    b'also' b'activities' b'.' b'communion' b'occurs' b'in' b'some' b'amino' b'acids' b',' b'which' b'high' b'slowly' b',' b'show' b'that' b'<unk>' b'or' b'Mayo' b'even'
    b'continue' b'up' b'it' b'in' b'prominent' b'pole' b'revenge' b';' b'off' b'back' b'food' b'to' b'two' b'or' b'one' b'enemy' b'or' b'<unk>' b'(' b'5'
    b'\xe2\x80\x93' b'22' b'%' b'in' b'the' b'ground' b')' b'during' b'neighboring' b'times' b'.' b'In' b'addition' b',' b'condom' b'sections' b'are' b'slightly' b'basal' b'.'
    b'<eos>' b'According' b'to' b'Koshiki' b',' b'The' b'kakapo' b'of' b'such' b'40' b'effects' b'of' b'species' b',' b'kakapo' b',' b'tree' b'Bicycle' b',' b'<unk>'
    b',' b'natural' b'@-@' b'frequency' b',' b'is' b'several' b'unlikely' b'designed' b',' b'including' b'laying' b'\xe2\x80\x93' b'750' b',' b'and' b'g' b'or' b'fewer' b'points'
    b'including' b'synthetic' b'DNA' b'.' b'The' b'figure' b',' b'readily' b',' b'is' b'required' b'to' b'persist' b'in' b'it' b',' b'Wicca' b',' b'and' b'their'
    b'hunt' b'.' b'There' b'are' b'the' b'contrast' b'that' b'plants' b'can' b'say' b'locks' b',' b'some' b'of' b'these' b'regions' b'stays' b'in' b'torpedo' b'ranges'
    b'or' b'branched' b'pistols' b',' b'but' b'that' b'he' b'of' b'contents' b'cushion' b'one' b'of' b'his' b'first' b'feet' b'of' b'green' b'sites' b'and' b'they'
    b'reestablish' b'Witchcraft' b',' b'with' b'no' b'rugged' b'light' b'or' b'one' b'species' b'in' b'leaves' b'of' b'UP' b'and' b'ascended' b'the' b'year' b'.' b'mRNA'
    b'with' b'Swaziland' b'may' b'be' b'seen' b'lacking' b'comprises' b'police' b'lighting' b'cells' b',' b'often' b'place' b',' b'so' b'their' b'accession' b'@-@' b'mast' b'are'
    b'often' b'killed' b'on' b'a' b'mission' b',' b'and' b'may' b'be' b'improved' b'that' b'they' b'be' b'considered' b'.' b'In' b'males' b'so' b'<unk>' b'her'
    b'bird' b',' b'they' b'shift' b'one' b'on' b'"' b'eggs' b'"' b'Shiva' b'used' b'setbacks' b'and' b'drifting' b'proteins' b'vegetables' b'gusts' b'and' b'some' b'common'
    b'Pareil' b'from' b'their' b'male' b',' b'northern' b'fourteen' b'at' b'Nature' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'=' b'=' b'<eos>' b'<eos>' b'South'
    b'grasslands' b'also' b'readily' b'mound' b'and' b'convective' b'live' b',' b'<unk>' b',' b'down' b',' b'unification' b',' b'solemn' b',' b'predators' b',' b'forests' b'contributing'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.7
    loss: 5.168
    elapsed time (seconds): 115.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  33.996 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
