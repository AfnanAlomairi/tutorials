.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Handel' b'(' b'<unk>' b',' b'<unk>' b')' b',' b'proposed' b'rot' b'and' b'observatory' b'.' b'Dillon' b'crashing' b'saying' b'that' b'the' b'"' b'second' b'main'
    b'state' b'of' b'$' b'50' b'simple' b',' b'something' b'near' b'any' b'New' b'<unk>' b'"' b'and' b'"' b'not' b'no' b'Earth' b'shows' b',' b'So'
    b',' b'has' b'fighting' b'lamb' b'Morchella' b'efficient' b'approaching' b'spaceship' b'in' b'this' b'region' b'of' b'<unk>' b'or' b'leather' b',' b'making' b'Creek' b',' b'in'
    b'some' b'players' b'with' b'many' b'kinds' b'of' b'age' b'hideout' b'"' b'.' b'The' b'versions' b'of' b'March' b'13' b'to' b'18' b'March' b'.' b'From'
    b'a' b'1771' b'published' b'in' b'bait' b',' b'was' b'rushes' b'as' b'his' b'first' b'own' b'film' b',' b'with' b'a' b'sustained' b'special' b'thumb' b','
    b'serving' b'at' b'Oxford' b'Center' b'in' b'volumes' b'of' b'a' b'26' b'directed' b'(' b'12' b'@.@' b'4' b'in' b')' b'from' b'the' b'outposts' b'of'
    b'Anglesey' b'and' b'American' b'singers' b'throughout' b'the' b'country' b'over' b'1989' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'2008' b'\xe2\x80\x93' b'1964' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'=' b'Architecture' b'in' b'Westminster' b'=' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Walpole' b"'s" b'all'
    b'only' b'play' b'TV' b'in' b'the' b'style' b'states' b'that' b'Jawaharlal' b'de' b'Bang' b'fluoride' b'was' b'paid' b'by' b'Herrera' b',' b'which' b'year' b'in'
    b'predicted' b'envisaged' b'"' b'labourers' b'of' b'The' b'tibia' b'"' b'and' b'be' b'a' b'key' b'hero' b'.' b'Each' b'book' b'of' b'The' b'album' b'Nick'
    b'is' b'a' b'designer' b'that' b'in' b'the' b'large' b'Constructors' b'<unk>' b'.' b'Women' b"'s" b'story' b'work' b',' b'a' b'good' b'self' b'@-@' b'level'
    b'rock' b'episode' b',' b'sky' b'Facebook' b',' b'which' b'are' b'alien' b'degraded' b'in' b'the' b'Looking' b'<unk>' b'rivers' b'in' b'the' b'1930s' b',' b'and'
    b'a' b'catalogues' b'on' b'the' b'ground' b'was' b'accomplished' b',' b'and' b'there' b'is' b'only' b'anta' b'made' b'with' b'an' b'average' b'biography' b'at' b'<unk>'
    b':' b'"' b'<unk>' b'I' b"'re" b'obviously' b'a' b'excuse' b'of' b'free' b'quality' b',' b'holding' b'over' b'5' b'million' b'by' b'Ross' b'and' b'<unk>'
    b'fans' b'.' b'It' b'is' b'often' b'much' b'delaying' b'from' b'a' b'long' b',' b'the' b'zero' b'[' b'hasn' b'!' b'nicknamed' b"'s" b'.' b'"'
    b'Hawks' b'describes' b'"' b'The' b'official' b'thin' b'"' b'of' b'uses' b'and' b'sampling' b'a' b'umpire' b'of' b'employ' b'Captain' b'in' b'how' b'sacramental' b'and'
    b'cosmic' b',' b'or' b'consistency' b',' b'in' b'A5' b'consciously' b'<unk>' b'about' b'the' b'terrorist' b'earth' b'recognized' b'Pokiri' b'to' b'match' b'the' b'flattened' b'Tour'
    b'of' b'Species' b'and' b'is' b'a' b'personal' b'binary' b'sheriff' b',' b'and' b'heavily' b'there' b'is' b'a' b'preserve' b'which' b'marked' b'under' b'the' b'planet'
    b"'s" b'memory' b'to' b'sleep' b';' b'it' b'dies' b'includes' b'no' b'A5' b'.' b'It' b'has' b'also' b'been' b'recorded' b'by' b'<unk>' b'found' b'by'
    b'his' b'father' b'Carr' b',' b'who' b'suggested' b'that' b'"' b'food' b'persons' b'of' b'natural' b'spelling' b'is' b'repulsed' b'Raja' b'd' b'threatens' b'"' b'.'
    b'drawing' b'dance' b'stories' b'such' b'as' b'Olav' b'Nichols' b'Bogart' b'is' b'expressed' b'that' b'these' b'characters' b'angels' b'352' b'researchers' b'was' b'a' b'kind' b'of'
    b'puck' b',' b'and' b'schools' b'rights' b'persons' b'working' b'on' b'Peter' b'Lane' b'.' b'They' b'have' b'seek' b'a' b'series' b'of' b'manga' b'values' b'like'
    b'verse' b'stringent' b'when' b'primary' b'and' b'nest' b'der' b'(' b'a' b'serial' b'\xe2\x80\x99' b'edible' b'Sadleir' b'planet' b'and' b'<unk>' b'Thee' b'below' b'him' b'.'
    b'The' b'Arabic' b'subsequently' b'<unk>' b'.' b'This' b'man' b'is' b'literally' b'having' b'as' b'suggested' b'that' b'Israel' b"'s" b'attic' b'are' b'needed' b'.' b'Hits'
    b'now' b'play' b'it' b'to' b'the' b'mixture' b'of' b'mathematics' b'or' b'explosion' b'by' b'at' b'one' b'endorsed' b'of' b'all' b'other' b'frigates' b'.' b'Likewise'
    b',' b'the' b'most' b'gifted' b'ruined' b',' b'sometimes' b'"' b'<unk>' b'teacher' b'"' b'.' b'Remedial' b'<unk>' b'Cooke' b'explains' b'that' b'the' b'behaviour' b'for'
    b'binary' b'drink' b'might' b'be' b'used' b'with' b'definite' b'TOT' b',' b'so' b'it' b'is' b'able' b'to' b'be' b'a' b'"' b'<unk>' b'"' b'union'
    b'.' b'This' b'song' b':' b'"' b'One' b'picture' b'regalis' b'here' b'include' b'Breaks' b',' b'praising' b'that' b'all' b'his' b'tree' b'is' b'kept' b'@-@'
    b'up' b'in' b'its' b'poetic' b'diction' b';' b'to' b'a' b'low' b'@-@' b'time' b'\xe2\x80\x93' b'house' b',' b'and' b'show' b'to' b'a' b'Barons' b'marketplace'
    b'.' b'"' b'Mark' b'Jaye' b'was' b'described' b'against' b'Walpole' b'(' b'name' b')' b',' b'although' b'bark' b'is' b'the' b'same' b'name' b'of' b'by'
    b'a' b'brittle' b'performs' b'tone' b'.' b'Heavy' b'scholars' b'are' b'white' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Phase' b'prey' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'God' b'of' b'a' b'diet' b'of' b'Google' b'uses' b'that' b'this' b'year' b'is' b'recorded' b'as' b'a' b'breath' b'and' b'is' b'"'
    b'afraid' b'"' b'.' b'Possible' b'authors' b'suggest' b'that' b'execute' b'\xe2\x80\x93' b'35' b'by' b'"' b'as' b'they' b'are' b'able' b'to' b'deal' b'them' b'and'
    b'help' b'to' b'do' b'anything' b'.' b'"' b'The' b'One' b'little' b'one' b'of' b'the' b'commanders' b'centres' b'include' b'platform' b',' b'which' b'is' b'derived'
    b'on' b'to' b'criticism' b'material' b'.' b'Reynolds' b'is' b'a' b'loud' b'species' b'of' b'these' b'themes' b'\xe2\x80\x94' b'which' b'are' b'usually' b'rated' b'on' b'11'
    b'April' b'Fine' b'translation' b'room' b'that' b'will' b'be' b'due' b'to' b'some' b'bird' b'experts' b'(' b'excluding' b'the' b'Pamela' b'Hurri' b'dinosaur' b',' b'now'
    b'microorganisms' b')' b'.' b'While' b'seven' b'buoys' b'suggest' b'it' b'coordinates' b'is' b'seen' b'only' b'into' b'the' b'<unk>' b',' b'its' b'partners' b'is' b'rendered'
    b'.' b'<eos>' b'To' b'this' b'point' b',' b'comes' b'with' b'an' b'hole' b'staying' b'up' b'the' b'same' b'as' b'holding' b'its' b'<unk>' b'in' b'mothers'
    b'on' b'an' b'basis' b'of' b'giant' b'Pius' b'relates' b'Gordon' b'regalis' b'.' b'<eos>' b'Whereas' b'a' b'more' b'gifted' b'epithet' b'snake' b',' b'Ceres' b'takes'
    b'a' b'picture' b'of' b'a' b'common' b'body' b'of' b'Hindu' b'deposits' b',' b'and' b'of' b'Tennyson' b'or' b'employ' b'a' b'path' b'into' b'his' b'abundant'
    b',' b'the' b'matter' b'struck' b'it' b'to' b'the' b'eye' b'.' b'Both' b'common' b'tales' b'and' b'localization' b'have' b'risen' b'in' b'Neoceratopsia' b',' b'mainly'
    b'reported' b'by' b'painters' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'body' b'behaviour' b'=' b'=' b'=' b'<eos>' b'<eos>' b'English' b'relapse' b"'" b'bodies'
    b'of' b'Joseph' b'Mode' b'(' b'Ceres' b'Kashi' b':' b'the' b'book' b',' b'<unk>' b':' b'"' b'likened' b'maintained' b'in' b'her' b'meditation' b'have' b'happened'
    b'to' b'a' b'quietly' b',' b'even' b'reason' b'to' b'be' b'imaginative' b'during' b'these' b'overseer' b'that' b'Shiva' b',' b'easily' b'called' b'those' b'with' b'I'
    b'fulfill' b'him' b'as' b'a' b'words' b'[' b'adult' b']' b'an' b'bit' b')' b'\xe2\x80\x94' b'you' b'will' b'all' b',' b'you' b'takes' b'about' b'.'
    b'"' b'Hornung' b'House' b'considers' b'Ibari' b"'s" b'difficulty' b'continent' b'with' b'scenes' b'(' b'junior' b'loosely' b'and' b'Patrick' b')' b',' b'but' b'a' b'egg'
    b'had' b'seen' b'several' b'courses' b'.' b'There' b'is' b'no' b'at' b'Ceres' b'to' b'act' b'after' b'both' b'the' b'translation' b'of' b'60s' b'.' b'Fully'
    b'three' b'actively' b'absorbed' b',' b'members' b'used' b'warfare' b'cholera' b'from' b'sea' b'deer' b'.' b'They' b'are' b'sworn' b'from' b'how' b'other' b'ones' b'are'
    b'Against' b'.' b'It' b'briefly' b'has' b'a' b'amyloid' b'al.' b'to' b'continue' b'a' b'transept' b',' b'mac' b'Benson' b',' b'comparing' b'this' b'tightly' b'cell'
    b'to' b'assault' b'1682' b'until' b'the' b'neck' b'for' b'the' b'panel' b',' b'which' b'is' b'tightly' b'only' b'upon' b'until' b'a' b'busy' b'step' b'anywhere'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 207.9
    loss: 5.168
    elapsed time (seconds): 103.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  20.586 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
