
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Writers' b'who' b'arrived' b'in' b'the' b'wedding' b'in' b'violence' b'with' b'Hornung' b'1615' b'.' b'<eos>' b'At' b'the' b'start' b'of' b'a' b'attempt' b'to'
    b'ask' b'a' b'source' b'established' b'from' b'<unk>' b'that' b'raised' b'three' b'out' b'robust' b'stories' b'in' b'the' b'season' b'.' b'<eos>' b'There' b'I' b'retained'
    b'R' b'ceramic' b'Director' b"'s" b'"' b'Tell' b'<unk>' b'"' b'of' b'two' b'craters' b',' b'so' b'this' b'contributed' b'to' b'Witu' b'.' b'In' b'1975'
    b'Thursday' b'Cardell' b'played' b'Rotten' b'Bateman' b'reach' b'Igual' b'be' b'realized' b'to' b'succeed' b'in' b'<unk>' b',' b'the' b'fifteenth' b'version' b'of' b'the' b'Sound'
    b'but' b'a' b'Jensen' b'@-@' b'mosquitoes' b'in' b'a' b'estimated' b'Dublin' b'seeking' b'to' b'create' b'half' b'the' b'final' b'baby' b'.' b'Up' b'of' b'this'
    b'time' b'the' b'game' b'are' b'written' b'by' b'Kyra' b'in' b'the' b'same' b'Iron' b'One' b',' b'who' b'begin' b'in' b'September' b'1996' b'but' b'('
    b'London' b')' b'was' b'indicated' b'as' b'in' b'his' b'sources' b"'" b'team' b'.' b'Instead' b',' b'making' b'several' b'observations' b'regarding' b'Ball' b'Bennett' b','
    b'harder' b'earlier' b'putting' b'awards' b'living' b'.' b'According' b'to' b'Martin' b'Michael' b'II' b',' b'Chopin' b'and' b'the' b'forces' b'and' b'in' b'<unk>' b'province'
    b'were' b'50' b'km' b'(' b'4' b'@.@' b'5' b'ft' b')' b'frames' b'300' b'days' b',' b'the' b'Herries' b'vegetation' b'team' b'was' b'carried' b'to'
    b'north' b'of' b'their' b'speed' b'and' b'Palestro' b'designed' b'received' b'an' b'average' b'ten' b'polemical' b'of' b'a' b'third' b'routing' b',' b'such' b'as' b'aged'
    b'6' b',' b'1888' b',' b'ultimately' b'destroyed' b'short' b'sustain' b'birds' b'.' b'Precipitation' b'continued' b'to' b'hit' b'all' b'overt' b'players' b'post' b',' b'while'
    b'grizzly' b'no' b'224' b'military' b'abdication' b'were' b'widespread' b',' b'although' b'The' b'real' b'inducted' b'was' b'Jing' b',' b'until' b'her' b'efforts' b'of' b'all'
    b'water' b'and' b'clear' b'pieces' b'had' b'yet' b'begun' b'to' b'be' b'so' b'a' b'millimetre' b'to' b'their' b'weakness' b'.' b'"' b'The' b'Leicester' b'Boat'
    b'"' b'is' b'short' b'than' b'controversial' b'music' b',' b'which' b'preceded' b'average' b'to' b'2' b'million' b'in' b'2010' b',' b'one' b'note' b'showing' b'on'
    b'the' b'entire' b'flank' b'and' b'one' b'point' b'to' b'be' b'kept' b'from' b'a' b'indeterminate' b'planet' b'.' b'Nevertheless' b',' b'the' b'images' b'for' b'the'
    b'global' b'figure' b'in' b'any' b'permanent' b'openings' b'dates' b'to' b'the' b'construction' b'line' b'and' b'the' b'<unk>' b'interiors' b'continued' b'to' b'develop' b'the' b'job'
    b'was' b'reported' b'.' b'references' b'to' b'the' b'American' b'eclipse' b'for' b'International' b',' b'878' b'is' b'Sovereign' b'of' b'the' b'conventional' b'content' b'of' b'Communism'
    b'together' b'to' b'Upset' b'access' b'for' b'its' b'informal' b'streets' b'can' b'be' b'downloadable' b'.' b'In' b'1966' b'the' b'Grand' b'One' b'adaptation' b'of' b'building'
    b'power' b'is' b'also' b'thought' b'to' b'be' b'effective' b'.' b'After' b'suggested' b'that' b'they' b'were' b'<unk>' b'to' b'attend' b'the' b'most' b'good' b'program'
    b',' b'it' b'also' b'extends' b'supporting' b'Hut' b'\xe2\x80\x94' b'a' b'honour' b'institutions' b'.' b'Many' b'of' b'them' b'are' b'white' b',' b'mostly' b'outside' b'by'
    b'lowest' b',' b'with' b'copper' b',' b'limited' b'power' b',' b'help' b',' b'with' b'they' b'will' b'mean' b'to' b'revamp' b'technology' b'publications' b'.' b'They'
    b'can' b'explain' b'limb' b',' b'or' b'manage' b'areas' b'ride' b'.' b'They' b'<unk>' b'an' b'little' b'short' b'pattern' b'after' b'when' b'they' b'do' b'not'
    b'interlude' b'looking' b',' b'and' b'when' b'it' b'was' b'not' b'seen' b'by' b'300' b'or' b'strongly' b'lesser' b'is' b'trapped' b'.' b'Rarely' b',' b'Muganga'
    b'admitted' b'about' b'Port' b'<unk>' b',' b'synthesized' b'the' b'head' b'by' b'its' b'own' b'@-@' b'founders' b'.' b'According' b'to' b'"' b'<unk>' b',' b'<unk>'
    b'?' b'"' b'Regardless' b'the' b'day' b'of' b'punishment' b'while' b'<unk>' b',' b'<unk>' b'a' b'suited' b'to' b'a' b'airstrip' b'that' b'is' b'turned' b'against'
    b'sonate' b'as' b'other' b'as' b'two' b'kinds' b'of' b'food' b'.' b'Each' b'year' b',' b'very' b'probably' b'abandoned' b'going' b'.' b'On' b'a' b'team'
    b'@-@' b'review' b'often' b'stimulus' b',' b'Krishna' b'letters' b'can' b'seek' b'to' b'be' b'very' b'emphasises' b'.' b'Currently' b',' b'any' b'bird' b'when' b'they'
    b'do' b'not' b'be' b'a' b'rat' b'<unk>' b',' b'which' b'would' b'be' b'able' b'to' b'obtain' b'males' b'standing' b'around' b'their' b'photo' b'linear' b'plumage'
    b';' b'the' b'<unk>' b'may' b'evade' b'it' b'.' b'An' b'short' b'eukaryotic' b'point' b'visual' b'wings' b'meet' b'on' b'the' b'island' b'when' b'it' b'would'
    b'be' b'able' b'to' b'cast' b'their' b'involvement' b'.' b'All' b'mature' b'hours' b'stars' b'were' b'Deborah' b'544' b'.' b'<unk>' b'at' b'this' b'level' b'agree'
    b'until' b'the' b'world' b'is' b'because' b'they' b'were' b'dense' b'modern' b',' b'and' b'may' b'appreciate' b'long' b'physically' b'the' b'way' b'to' b'be' b'buried'
    b'within' b'transportation' b'.' b'Both' b'starlings' b'are' b'look' b'throughout' b'Boston' b',' b'but' b'became' b'so' b'very' b'considered' b'.' b'Kakapo' b'are' b'doubts' b'that'
    b'not' b'be' b'represented' b'by' b'some' b'knowledge' b'such' b'as' b'rocket' b'worship' b'as' b'they' b'they' b'spread' b'when' b'it' b'beneath' b'five' b'approaching' b'predators'
    b'.' b'Common' b'starlings' b'vary' b',' b'that' b'production' b'to' b'be' b'possible' b'and' b'significant' b'evidence' b'or' b'drink' b'as' b'he' b'averaged' b'off' b'a'
    b'kingship' b',' b'and' b'escaping' b'to' b'move' b'after' b'trees' b'.' b'Males' b'concludes' b'they' b'are' b'increasingly' b'certain' b',' b'they' b'constitute' b'provisions' b','
    b'which' b'may' b'create' b'or' b'fall' b'divalent' b',' b'parent' b'and' b'distinct' b'Aitape' b'priorities' b'to' b'individually' b'.' b'These' b'eat' b'dynamics' b'are' b'recommended'
    b'.' b'If' b'the' b'12th' b'arena' b'rarely' b'be' b'fully' b'commonly' b'defended' b',' b'it' b'may' b'be' b're' b'@-@' b'rectangular' b'by' b'distinct' b'conspicuous'
    b'starlings' b',' b'rather' b'militarily' b'round' b',' b'as' b'they' b'breeding' b'snap' b'from' b'first' b'or' b'woodlands' b'.' b'In' b'addition' b',' b'such' b'nutrients'
    b'signals' b'\xe2\x80\x93' b'food' b'activity' b'usually' b'developing' b'flat' b',' b'or' b'are' b'<unk>' b'.' b'Another' b'association' b'calls' b'as' b'they' b'feed' b'over' b'to'
    b'prove' b'populations' b',' b'tying' b'goals' b',' b'nor' b'records' b'Clinch' b'necessary' b',' b'can' b'be' b'shown' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description'
    b'=' b'=' b'<eos>' b'<eos>' b'To' b'make' b'a' b'lek' b'conversation' b'with' b'Bray' b'weaknesses' b',' b'North' b'Africa' b'are' b'considered' b'for' b'that' b'way'
    b'to' b'slow' b'.' b'Such' b'salts' b'on' b'the' b'ground' b'were' b'became' b'to' b'fly' b'around' b'an' b'technique' b'as' b'they' b'electric' b'unconscious' b','
    b'each' b'excommunication' b'could' b'be' b'<unk>' b'.' b'These' b'feathers' b'were' b'almost' b'sued' b'352' b'(' b'may' b'kill' b'neither' b'oil' b')' b',' b'so'
    b'it' b'is' b'very' b'easily' b'under' b'the' b'longest' b'source' b'with' b'that' b'to' b'cause' b'human' b',' b'far' b',' b'or' b'several' b'birds' b'used'
    b'pathway' b'caused' b'by' b'greater' b'fields' b'or' b'pilots' b'.' b'In' b'addition' b',' b'they' b'are' b'they' b'cleared' b'their' b'homes' b'to' b'seize' b'or'
    b'other' b'degree' b',' b'as' b'they' b'go' b'to' b'their' b'heir' b'.' b'Around' b'high' b',' b'due' b'to' b'one' b'and' b'level' b',' b'there'
    b'vertex' b'may' b'be' b'<unk>' b',' b'allowing' b'the' b'activity' b'of' b'sale' b'produced' b'by' b'such' b'without' b'these' b'other' b'activity' b'.' b'Overall' b','
    b'they' b'do' b'not' b'eat' b'an' b'markings' b'that' b'they' b'are' b'attractive' b',' b'after' b'between' b'their' b'forced' b'times' b'set' b'.' b'<eos>' b'A'
    b'group' b'of' b'radiation' b'and' b'ancient' b'foraging' b',' b'Kudirka' b'toys' b'over' b'higher' b'countries' b'.' b'<eos>' b'magnitude' b'may' b'be' b'smallest' b'about' b'other'
    b'species' b'of' b'food' b',' b'rarely' b'in' b'delegation' b'of' b'their' b'food' b'and' b'spilled' b'them' b'to' b'die' b'.' b'Assuming' b'opponents' b'also' b'sing'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 232.4
    loss: 5.168
    elapsed time (seconds): 123.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  4.851 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
