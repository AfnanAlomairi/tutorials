.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'a' b'Important' b'narrow' b'<unk>' b'information' b'and' b'has' b'the' b'basic' b'constitution' b'to' b'its' b'male' b'virtue' b'.' b'states' b'of' b'1600' b'in' b'the'
    b'reverse' b'language' b'both' b'helped' b',' b'since' b'has' b'the' b'idea' b'reducing' b'the' b'privilege' b'that' b'he' b'disliked' b'work' b'.' b'If' b'there' b'was'
    b'no' b'talking' b'animation' b'of' b'the' b'Aralt' b',' b'Boadicea' b'exemplifies' b'a' b'food' b'will' b'probably' b'be' b'away' b'through' b'his' b'prone' b'but' b'searching'
    b'differences' b'from' b'a' b'early' b',' b'and' b'put' b'it' b'by' b'a' b'arms' b'that' b'these' b'violations' b'hordes' b'was' b'often' b'killed' b'but' b','
    b'by' b'doing' b'the' b'percentage' b'of' b'fish' b'(' b'Venus' b"'s" b'advice' b'left' b'Race' b'or' b'present' b'@-@' b'hatred' b'of' b'up' b'it' b','
    b'this' b'makes' b'it' b'so' b'for' b'disc' b'times' b'.' b'<eos>' b'First' b'film' b'found' b'that' b'their' b'push' b'was' b'thrown' b'through' b',' b'choosing'
    b'the' b'second' b'to' b'Mars' b"'s" b'push' b'on' b'<unk>' b'.' b'Another' b'is' b'personally' b'on' b'the' b'stanza' b'of' b'a' b'left' b'planet' b','
    b'and' b'is' b'discouraged' b'as' b'muscimol' b'happen' b'into' b'a' b'small' b'Gujarat' b'.' b'Though' b'they' b'also' b'want' b'to' b'occupy' b'denies' b',' b'they'
    b'affect' b'for' b'them' b'their' b'rather' b'time' b'of' b'life' b'.' b'<eos>' b'When' b'Nixon' b'was' b'probably' b'McKidd' b',' b'then' b'prototypes' b'in' b'question'
    b'\xe2\x80\x93' b'have' b'larger' b'@-@' b'life' b',' b'it' b'is' b'twelve' b'or' b'never' b'prominently' b'.' b'A' b'large' b'space' b'(' b'the' b'ground' b'of'
    b'it' b'are' b'resurrected' b'as' b'to' b'date' b')' b',' b'three' b'feet' b'(' b'2' b'@.@' b'2' b'@.@' b'4' b'km' b')' b'and' b'females'
    b'where' b'females' b'are' b'also' b'fully' b'distinguished' b'up' b'between' b'man' b'or' b'most' b'other' b'unconsciousness' b'for' b'those' b',' b'the' b'same' b'was' b'just'
    b'enough' b'to' b'make' b'prey' b'or' b'if' b'males' b'to' b'other' b'anesthetic' b'should' b'have' b'good' b'predators' b'.' b'There' b'are' b'important' b'covering' b'these'
    b'colors' b'.' b'"' b'mines' b'never' b'halted' b'a' b'disastrous' b'position' b',' b'therefore' b',' b'and' b'food' b',' b'<unk>' b'as' b'it' b'does' b','
    b'on' b'in' b'a' b'reduction' b'sequence' b'and' b',' b'c' b'they' b'do' b'like' b'a' b'sonic' b'look' b'in' b'prefecture' b'has' b'come' b'off' b'long'
    b'<unk>' b'"' b'.' b'<unk>' b'were' b'subject' b'to' b'after' b'preserving' b'the' b'repairs' b'objector' b'Shiva' b'(' b'Bode' b')' b',' b'which' b'is' b'the'
    b'lowest' b'recruitment' b'on' b'extra' b'side' b'to' b'a' b'Travers' b'.' b'<unk>' b'these' b'effects' b'make' b'only' b'trying' b'to' b'risk' b'.' b'On' b'the'
    b'same' b'eye' b',' b'4' b'@.@' b'45' b'million' b'dark' b'people' b'occur' b',' b'before' b'archaeologists' b'is' b'arrested' b'.' b'<eos>' b'Since' b'XXX' b'determined'
    b'that' b'the' b'other' b'surviving' b'convicts' b'pass' b'to' b',' b'they' b'may' b'incorporate' b'brings' b'them' b'@-@' b'driven' b'islands' b'.' b'On' b'the' b'other'
    b'surface' b',' b'Ceres' b'suggests' b'the' b'idea' b'of' b'minimum' b'processing' b'interest' b'and' b'the' b'<unk>' b'<unk>' b'"' b'Hero' b'"' b',' b'which' b'incorporates'
    b'to' b'studbook' b'Flies' b'.' b'<eos>' b'In' b'a' b'description' b'of' b'decrease' b',' b'predator' b'is' b'very' b'uniform' b'.' b'Working' b'through' b'the' b'manufacturer'
    b'Blind' b'Technion' b',' b'<unk>' b'cm' b'by' b'a' b'fresh' b'appearance' b'many' b'times' b'on' b'their' b'true' b'story' b'of' b'a' b'Irish' b'surface' b'made'
    b'emit' b'the' b'fountain' b'to' b'often' b'.' b'In' b'his' b'breeding' b',' b'Indra' b',' b'giving' b'alive' b',' b'though' b'Gladstone' b'is' b'undamaged' b'who'
    b'used' b'premonition' b'<unk>' b',' b'which' b'traveled' b'to' b'England' b'on' b'a' b'<unk>' b')' b'involving' b'its' b'huge' b'hands' b'and' b'pets' b',' b'which'
    b'has' b'every' b'navigate' b'jewelled' b',' b'they' b'continuously' b'Amla\xc3\xadb' b'and' b'Lunch' b'whom' b'Shiva' b'<unk>' b'below' b'spot' b'into' b'Hard' b'efforts' b'.' b'For'
    b'example' b'there' b',' b'it' b'is' b'very' b'close' b'from' b'chicks' b'and' b'<unk>' b'.' b'color' b'also' b'emerge' b'together' b'with' b'up' b'alone' b'as'
    b'a' b'player' b'.' b'A' b'opening' b'solar' b'sound' b'view' b'of' b'color' b'from' b'<unk>' b'<unk>' b',' b'<unk>' b',' b'leaves' b'from' b'almost' b'as'
    b'small' b',' b'whereby' b'them' b'to' b'Ceres' b'or' b'disrupt' b'.' b'<eos>' b'The' b'M.' b'Bang' b'Bang' b'version' b'is' b'distinguished' b'by' b'waste' b','
    b'providing' b'1514' b'at' b'providing' b'lifestyle' b',' b'with' b'her' b'breeding' b'funerary' b'legislation' b'.' b'<eos>' b'After' b'estimates' b',' b'God' b'refreshing' b'is' b'fuelled'
    b'as' b'"' b'a' b'dwarf' b'second' b'on' b'ostrich' b'"' b',' b'but' b'felt' b'that' b'they' b'are' b'a' b'species' b'Commandos' b'that' b'pave' b'there'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Exit' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b'of' b'In' b'Hebrew' b',' b'Ireland' b',' b'is'
    b'known' b'as' b'"' b'quintessential' b'"' b'and' b'"' b'brown' b'"' b'species' b',' b'leads' b'to' b'the' b'Roman' b'Republic' b'of' b'Staff' b'AD' b'.'
    b'DNA' b'motherboard' b'succeeded' b'their' b'magnetic' b'review' b'derives' b'by' b'Lutheran' b';' b'once' b'branch' b'of' b'<unk>' b'Unit' b';' b'in' b'selling' b'four' b'or'
    b'five' b'others' b'from' b'the' b'female' b',' b'<unk>' b'writes' b'adjacent' b'to' b'detailed' b'teeth' b'fully' b'believes' b'.' b'In' b'captivity' b',' b'Investigation' b'<unk>'
    b'(' b'<unk>' b'Luz' b')' b'postponed' b'the' b'image' b'of' b'roughly' b'1' b'\xc2\xb0' b'Subic' b'including' b'exceptional' b',' b'normally' b'elongated' b';' b'aggressive' b','
    b'in' b'an' b'fragment' b'to' b'be' b'killed' b'as' b'a' b'regency' b'as' b'other' b'as' b'it' b'is' b'lower' b'by' b'homes' b'which' b'broke' b'a'
    b'eye' b'helps' b'.' b'These' b'plants' b'took' b'a' b'wide' b'viewing' b'length' b'which' b'the' b'male' b'should' b'continue' b'to' b'be' b'often' b'quite' b'close'
    b'by' b'procure' b'feathers' b'.' b'In' b'contrast' b',' b'Burns' b'may' b'be' b'visible' b'by' b'the' b'common' b'deity' b'.' b'Nearly' b'that' b'the' b'kakapo'
    b'suggests' b'that' b'it' b'takes' b'Mars' b'symbolizing' b'them' b'to' b'be' b'deep' b'afraid' b'because' b'they' b'she' b'knew' b'Regarding' b'the' b'head' b'.' b'<eos>'
    b'The' b'Crash' b'Nirvana' b'Boom' b'History' b'(' b'Come' b')' b'is' b'a' b'natural' b'Lord' b'was' b'<unk>' b'(' b'preying' b')' b'and' b'welcome' b'for'
    b'a' b'seral' b'decorative' b'call' b',' b'and' b'a' b'female' b'of' b'bugs' b'Wily' b'colors' b'picture' b',' b'or' b'the' b'roosting' b'tous' b'felids' b','
    b'Katherine' b'<unk>' b',' b'a' b'trees' b'connecting' b'other' b'threads' b'(' b'dravya' b')' b',' b'and' b'39' b'ft' b'(' b'Procyon' b',' b'black' b','
    b'unsettling' b'<unk>' b')' b'over' b'the' b'tree' b'of' b'bird' b',' b'such' b'as' b'<unk>' b'(' b'in' b'line' b')' b'and' b'a' b'portico' b'of'
    b'Australia' b'.' b'Its' b'eyes' b'gives' b'Chronic' b'minerals' b'of' b'lesser' b'juveniles' b',' b'notably' b'a' b'invitation' b'per' b'vocal' b'routine' b'<unk>' b',' b'could'
    b'be' b'even' b'accessed' b'by' b'<unk>' b'.' b'<eos>' b'Finally' b',' b'Chestnuts' b'trousers' b'a' b'massive' b'players' b'begins' b'by' b'a' b'human' b'or' b'white'
    b'meals' b',' b'preferring' b'a' b'bout' b'of' b'increased' b'legislation' b'and' b'sometimes' b'as' b'@-@' b'pale' b'Kailash' b'sit' b'on' b'a' b'variety' b'of' b'kakapo'
    b'.' b'They' b'does' b'not' b'occur' b'at' b'any' b'other' b'level' b'or' b'forget' b'sexual' b'feeding' b'.' b'One' b'Ravana' b'Muybridge' b'suggested' b'that' b'one'
    b'of' b'those' b'dissent' b'and' b'an' b'evolutionary' b'Prosecution' b'aged' b'heir' b'do' b'not' b'feature' b'nine' b'ever' b'touching' b'<unk>' b'through' b'the' b'young' b'state'
    b'especially' b'.' b'Bird' b'amongst' b'postulated' b'foraging' b'and' b'migration' b',' b'as' b'by' b'they' b'recommend' b',' b'off' b'if' b'other' b'Dictator' b'consists' b'have'
    b'abuse' b',' b'chiefly' b'intact' b'.' b'However' b',' b'labelled' b'a' b'lower' b'high' b'isotopes' b',' b'creating' b'0' b'@-@' b'transcriptional' b'spores' b'stirred' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 200.7
    loss: 5.168
    elapsed time (seconds): 102.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  12.274 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
