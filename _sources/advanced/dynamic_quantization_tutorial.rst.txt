.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'over' b'innovations' b'USDA' b'them' b'.' b'This' b'grew' b'with' b'a' b'number' b'of' b'term' b'jewellery' b'broods' b',' b'including' b'early' b'1975' b',' b'in'
    b'1954' b',' b'within' b'most' b'<unk>' b'@-@' b'firm' b'school' b'.' b'Most' b'vocally' b'patriotism' b',' b'such' b'as' b'heliport' b'House' b',' b'are' b'a'
    b'consisting' b'of' b'Period' b'.' b'<eos>' b'year' b'to' b'exist' b'with' b'Easter' b',' b'they' b'are' b'Hewitt' b'lived' b'in' b'List' b'fourteenth' b'.' b'They'
    b'bow' b'with' b'other' b'visits' b',' b'often' b'dealing' b'from' b'Girl' b'environments' b'are' b'sometimes' b'distinguished' b',' b'and' b'often' b'hitting' b'to' b'take' b'negotiating'
    b'to' b'African' b'American' b'frequency' b',' b'and' b'they' b'were' b'dismissed' b'by' b'<unk>' b',' b'unwilling' b'.' b'Many' b'1500' b'dancing' b'species' b'are' b'prohibited'
    b'into' b'clinical' b'birds' b'.' b'It' b'has' b'already' b'been' b'suggested' b'that' b'a' b'ligature' b'of' b'Ceres' b'can' b'produce' b'drainage' b',' b'Heraclea' b'by'
    b'farming' b'.' b'In' b'this' b'game' b',' b'they' b'they' b'choose' b'until' b'Slant' b'presided' b'to' b'be' b'more' b'effective' b',' b'so' b'they' b'resemble'
    b'going' b'to' b'take' b'up' b'five' b'times' b'.' b'It' b'is' b'related' b'to' b'human' b'rather' b'<unk>' b'in' b'particular' b'.' b'There' b'are' b'over'
    b'9' b'acres' b'(' b'140' b'm' b')' b'high' b',' b'high' b'as' b'well' b'as' b'more' b'than' b'dried' b'than' b'any' b'other' b'had' b'a'
    b'sixth' b'down' b'before' b'it' b'learned' b'.' b'Various' b'backs' b'forces' b'are' b'rare' b'by' b'a' b'hamlet' b'line' b',' b'hair' b',' b'and' b'constant'
    b'cooking' b'.' b'They' b'are' b'to' b'be' b'observed' b'by' b'whether' b'it' b'personally' b'are' b'more' b'appropriate' b',' b'except' b'considered' b',' b'which' b'very'
    b'<unk>' b',' b'successfully' b',' b'they' b'abandoned' b'cooking' b'triple' b',' b'upper' b'or' b'little' b',' b'head' b'.' b'Nevertheless' b',' b'it' b'is' b'gills'
    b'from' b'4' b'August' b'even' b'@-@' b'orbit' b',' b'maintaining' b'then' b'34' b'@.@' b'5' b'points' b'(' b'14' b'@.@' b'9' b'in' b')' b','
    b'at' b'6' b'@.@' b'5' b'%' b'of' b'24' b'@.@' b'8' b'million' b'(' b'total' b')' b',' b'can' b'be' b'often' b'explored' b',' b'on'
    b'six' b'different' b'Schank' b',' b'over' b'approval' b'individuals' b'and' b'are' b'two' b'long' b'unnamed' b'are' b'handsome' b',' b'depending' b'in' b'issue' b',' b'fit'
    b',' b'gray' b'his' b'low' b',' b'often' b'sculpted' b'when' b'<eos>' b'It' b'is' b'expedited' b',' b'feathers' b'or' b'decrease' b'luminosity' b'(' b'no' b'ambitious'
    b'exchange' b')' b'.' b'<eos>' b'If' b'some' b'birds' b',' b'males' b',' b'<unk>' b',' b'hair' b',' b'size' b'and' b'tail' b',' b'is' b'likely'
    b'@-@' b'like' b'organized' b'.' b'A' b'hosts' b'into' b'which' b'they' b'indicate' b',' b'which' b'can' b'be' b'"' b'slow' b',' b'very' b'<unk>' b'either'
    b'<unk>' b'without' b'30' b'%' b'on' b'his' b'own' b'@-@' b'asteroid' b'needs' b'can' b'be' b'different' b'needs' b'significantly' b'two' b'nutritional' b'.' b'He' b'<unk>'
    b'it' b'and' b'then' b'do' b'soon' b'announce' b'a' b'bubble' b'function' b',' b'with' b'another' b'increase' b'to' b'understand' b',' b'from' b'other' b'creatures' b'and'
    b'salaries' b',' b'but' b'with' b'one' b'will' b',' b'show' b'on' b'there' b'and' b'that' b"'" b'Teen' b'.' b'That' b'are' b'localization' b'trying' b'to'
    b'flowed' b'diving' b'.' b'"' b'As' b'he' b'<unk>' b'some' b'of' b'these' b'is' b'the' b'best' b'parrot' b'"' b'primitive' b'"' b'<unk>' b'@-@' b'Steinernema'
    b',' b'and' b'about' b'a' b'hour' b',' b'drinking' b'pine' b'are' b'needed' b'to' b'refer' b'a' b'magnitude' b'of' b'species' b',' b'as' b'the' b'presence'
    b'of' b'finger' b'retention' b'outlook' b',' b'and' b'will' b'translate' b'.' b'No' b'areas' b'have' b'affecting' b'clear' b'role' b'.' b'<eos>' b'While' b'males' b'also'
    b'brings' b'their' b'servant' b',' b'the' b'male' b'is' b'lost' b'by' b'Lots' b',' b'although' b'on' b'dust' b'v' b',' b'the' b'\xe1\x83\x9d' b'around' b'these'
    b'dog' b'areas' b',' b'requires' b'approximately' b'6' b'million' b'years' b'old' b'.' b'Unlike' b'less' b'than' b'black' b'when' b'its' b'eggs' b',' b'the' b'female'
    b'enters' b'139' b'@.@' b'85' b'<unk>' b',' b'with' b'disturbed' b'long' b'to' b'appear' b'a' b'large' b'amount' b'of' b'level' b'.' b'After' b'they' b','
    b'when' b'the' b'lungs' b'continuously' b'becomes' b'accepting' b',' b'it' b'is' b'about' b'1' b'feet' b'(' b'2' b'@.@' b'5' b'mi' b')' b'.' b'\xe2\x88\x92'
    b'these' b'birds' b'are' b'rarely' b'used' b'directly' b'.' b'This' b'are' b'Carey' b"'s" b'head' b'through' b'peaks' b'.' b'The' b'female' b'has' b'the' b'name'
    b'to' b'reach' b'28' b'out' b',' b'whose' b'offer' b'@-@' b'purpose' b'expression' b'phenomena' b'due' b'to' b'Tom\xc3\xa1s' b'may' b'have' b'sidelined' b'inserting' b'or' b'quite'
    b'occasionally' b'genuine' b'.' b'It' b'is' b'two' b'to' b'two' b'or' b'more' b'native' b'older' b'astronomers' b',' b'low' b',' b'cool' b'and' b'alarm' b'onto'
    b'more' b'detail' b'(' b'less' b'than' b'7' b'@.@' b'8' b')' b',' b'or' b'with' b'a' b'bit' b'@-@' b'increasing' b'range' b'is' b'done' b'by'
    b'low' b'<unk>' b'.' b'In' b'these' b'soils' b'on' b'them' b'in' b'devastation' b',' b'one' b'pound' b'50' b'in' b'100' b'chicks' b'remarked' b'this' b'word'
    b'talked' b'and' b'distant' b'food' b'cultivation' b'quickly' b'actually' b'huge' b',' b'<unk>' b'due' b'to' b'discography' b',' b'and' b'singing' b'even' b'.' b'In' b'paws'
    b',' b'they' b'ends' b'on' b'4' b'shows' b'of' b'crescent' b',' b'each' b'even' b'in' b'fluid' b'are' b'increasing' b'.' b'<eos>' b'The' b'kakapo' b'can'
    b'hit' b'a' b'star' b'or' b'can' b'be' b'reworked' b'in' b'parts' b'of' b'nitrate' b'or' b'they' b'@-@' b'Mkhedruli' b'associated' b'barber' b'black' b',' b'sinking'
    b'by' b'first' b'spherical' b'newborn' b',' b'then' b'<unk>' b':' b'themselves' b'while' b'males' b'transforms' b'into' b'a' b'plume' b'border' b'around' b'a' b'night' b'.'
    b'Within' b'five' b'hours' b',' b'Ceres' b'insisted' b'of' b'mammals' b'were' b'Mandi' b'.' b'Another' b'functions' b':' b'The' b'male' b',' b'which' b'is' b'high'
    b',' b'while' b'with' b'Dr.' b'Doyle' b'.' b'venerable' b'Study' b'starvation' b'may' b'be' b'capable' b'of' b'a' b'secondary' b'line' b'that' b'may' b'be' b'fully'
    b'considered' b'on' b'two' b'microorganisms' b'searching' b'by' b'test' b'parasites' b'after' b'the' b'head' b'during' b'the' b'50' b'June' b'Rover' b'Link' b'include' b'<unk>' b'('
    b'this' b'size' b',' b'also' b'wolf' b'up' b'on' b'their' b'recall' b'neck' b')' b'.' b'<eos>' b'A' b'female' b'has' b'<unk>' b'arranged' b'or' b'spectacular'
    b'down' b'feeding' b'as' b'they' b'Astraeus' b'unremarkable' b'.' b'One' b'bird' b'then' b'underline' b'only' b'striking' b'mild' b'starlings' b'where' b'they' b'were' b'restraint' b'.'
    b'When' b'breeding' b',' b'they' b'were' b'also' b'high' b'if' b'they' b'are' b'able' b'to' b'intercept' b'their' b'near' b'two' b'years' b'the' b'breeding' b'significantly'
    b'territorial' b'system' b'.' b'Also' b'out' b'of' b'these' b'MK' b'changes' b'and' b'<unk>' b',' b'<unk>' b'intellectual' b'lightly' b'animals' b'does' b'not' b'mention' b'the'
    b'communal' b'amount' b'of' b'colored' b'<unk>' b'nest' b'or' b'a' b'male' b'pot' b'.' b'Only' b'ligand' b'<unk>' b'kakapo' b'reported' b'that' b'it' b'stands' b'at'
    b'king' b'and' b'if' b'"' b'Hoover' b'lighting' b'molecule' b'now' b'be' b'chased' b'.' b'"' b'latitude' b'straying' b'gusting' b'to' b'say' b'and' b'their' b'examine'
    b'historical' b'lines' b'.' b'Because' b'the' b'<unk>' b'is' b'commonly' b'a' b'gregarious' b'monk' b',' b'they' b'seem' b'to' b'form' b'a' b'vini' b'that' b'are'
    b'found' b'afterwards' b'.' b'Like' b'jar' b',' b'types' b'such' b'as' b'those' b'radiation' b'for' b'competing' b'specimens' b'by' b'their' b'food' b'passes' b'in' b'the'
    b'pale' b'material' b'caused' b'by' b'astronomical' b'festivities' b',' b'such' b'as' b'jumping' b'activity' b',' b'\xe2\x80\x93' b'specialty' b',' b'strong' b'Greater' b'Protection' b'exist' b','
    b'and' b'female' b'bacteria' b'and' b'burn' b'absorb' b'\xe2\x80\x93' b'compounds' b',' b'individuals' b'woo' b'feeding' b'or' b'glowing' b'pressed' b'meat' b'.' b'Groundsel' b'on' b'BHU'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 193.4
    loss: 5.168
    elapsed time (seconds): 104.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  6.739 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
