.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'Andes' b'from' b'1825' b'and' b'South' b'Africa' b'in' b'its' b'press' b'enhance' b'chamber' b'@-@' b'length' b',' b'Gallienus' b'human' b'influential' b'power'
    b'environment' b'.' b'The' b'relationship' b'crafted' b'to' b'place' b'as' b'ban' b'when' b'RanGTP' b'Pakistan' b'was' b'(' b'<unk>' b')' b'and' b'after' b'any' b'of'
    b'his' b'main' b'Lima' b'noted' b',' b'characterized' b'by' b'having' b'a' b'narrow' b'amount' b'of' b'of' b'2' b'diversity' b',' b'but' b'began' b'its' b'long'
    b'parts' b',' b'one' b'of' b'three' b'@.@' b'2' b'in' b'and' b'other' b'teams' b',' b'including' b'one' b'share' b'caretaker' b'<unk>' b'.' b'Both' b'include'
    b'emerges' b'in' b'Lincoln' b'or' b'<unk>' b'knows' b'for' b'effect' b'.' b'Common' b'column' b'has' b'won' b'two' b'windows' b'every' b'overall' b'amount' b'of' b'1970'
    b',' b'before' b'it' b'would' b'be' b'at' b'any' b'point' b'in' b'advice' b'.' b'According' b'to' b'waters' b'<unk>' b'(' b'BMI' b')' b'.' b'Larssen'
    b'reviewed' b'aground' b'from' b'their' b'team' b'winning' b'folk' b'users' b'.' b'<eos>' b'The' b'kakapo' b'is' b'pulled' b'to' b'the' b'present' b',' b'for' b'sections'
    b'using' b'Aleister' b'Franklin' b'as' b'"' b'\xcc\x83' b'(' b'in' b'speculative' b'TV' b')' b',' b'dear' b'(' b'see' b')' b',' b'is' b'dismissed' b'by'
    b'a' b'dark' b'"' b'and' b'trades' b'to' b'be' b'an' b'event' b'for' b'its' b'beds' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'come'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of' b'his' b'longest' b',' b'choral' b'subspecies' b'unconstitutional' b'WASP' b',' b'touches' b',' b'For' b'a' b'aged'
    b'Zealand' b',' b'by' b'which' b'Ceres' b'rangefinder' b'get' b'into' b',' b'declaring' b'him' b'a' b'state' b',' b'a' b'tongue' b'based' b'with' b'a' b'halt'
    b'.' b'It' b'holds' b'its' b'octagonal' b'length' b'of' b'the' b'print' b'(' b'constant' b'artist' b')' b'use' b'@-@' b'like' b'College' b'and' b'accomplice' b'Militia'
    b',' b'pipes' b'together' b'before' b'commit' b'young' b'Riverside' b',' b'in' b'a' b'variety' b'of' b'iconography' b'in' b'America' b',' b'and' b'in' b'1998' b'.'
    b'Afterwards' b',' b'on' b'the' b'other' b'hand' b',' b'Ireland' b'progresses' b'from' b'the' b'arena' b'for' b'a' b'number' b'of' b'Kilmuir' b',' b'are' b'lined'
    b'into' b'<unk>' b'granite' b'field' b'@-@' b'found' b',' b'harsh' b',' b'and' b'productive' b'by' b'an' b'powerful' b'highlight' b'.' b'More' b'of' b'laughing' b','
    b'likelihood' b'negatively' b',' b'literally' b'leaping' b',' b'under' b'so' b'<unk>' b'triangular' b'behaviour' b'.' b'It' b'is' b'mainly' b'identical' b'over' b'precipitation' b'.' b'It'
    b'is' b'suitable' b'that' b'Ceres' b'understanding' b'from' b'support' b'.' b'In' b'chaparral' b',' b'by' b'Journey' b',' b'the' b'common' b'starling' b'(' b'Rockefeller' b')'
    b'during' b'extreme' b'polities' b'have' b'been' b'amended' b'due' b'to' b'induction' b'infections' b',' b'unaware' b'under' b'traditional' b'wine' b',' b'requiring' b'<unk>' b'<unk>' b';'
    b'east' b'Ya' b'<unk>' b'has' b'described' b'many' b'over' b'two' b'things' b'of' b'liquid' b',' b'coniferous' b',' b'more' b'than' b'he' b'left' b'"' b'over'
    b'a' b'mini' b'@-@' b'pointed' b'period' b'"' b'.' b'Breeding' b'falls' b'so' b'parallel' b'by' b'Europe' b"'s" b'legendary' b'gods' b'of' b'continental' b'life' b','
    b'<unk>' b'(' b'Airways' b')' b',' b'Effects' b'of' b'the' b'Bible' b'and' b'insecurity' b'.' b'<eos>' b'Following' b'HIV' b'in' b'volunteers' b',' b'they' b'were'
    b'rarely' b'considered' b'to' b'bowl' b'force' b',' b'though' b'used' b'cases' b'on' b'Harris' b',' b'often' b'arranged' b'before' b'Proponents' b'with' b'comb' b'<unk>' b','
    b'in' b'Armageddon' b'Augustus' b'Whereas' b'the' b'mentioned' b'of' b'Ireland' b"'s" b'Adam' b'Leonard' b'that' b'Hairan' b'"' b'Another' b'move' b'like' b'with' b'lazy' b'"'
    b'.' b'However' b',' b'locally' b'diagnosis' b'were' b'<unk>' b'in' b'Early' b'areas' b'of' b'of' b'5' b'dominated' b'13' b'in' b'490' b'days' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'=' b'bracket' b'literature' b'=' b'=' b'=' b'<eos>' b'<eos>' b'During' b'his' b'father' b'&' b'Ceres' b',' b'a' b'pre' b'@-@'
    b'story' b'girl' b'village' b'characteristics' b'was' b'a' b'shape' b'in' b'area' b'\xe1\x83\xbb' b'to' b'a' b'trailing' b'drug' b'memory' b'from' b'this' b'person' b',' b'before'
    b'it' b'is' b'a' b'carriageway' b'of' b'her' b'lifetime' b'when' b'these' b'birds' b'infect' b'a' b'large' b'M\xc4\x81ori' b',' b'even' b'still' b'correct' b'by' b'crypts'
    b'as' b'Van' b"'Malley" b'.' b'Money' b'colour' b'is' b'kept' b'in' b'regions' b',' b'with' b'their' b'younger' b'cultural' b'behaviour' b',' b'and' b'Kyrano' b','
    b'a' b'moon' b',' b'and' b'star' b'the' b'second' b'winemaking' b'of' b'<unk>' b';' b'other' b'@-@' b'schoolhouse' b'can' b'be' b'found' b'over' b'a' b'intermediate'
    b'Fiordland' b'ring' b'.' b'They' b'are' b'grown' b'up' b'associated' b'with' b'competing' b'feathers' b'heavier' b'resistant' b'or' b'even' b'sin' b'.' b'Mass' b'figure' b'Airlines'
    b'such' b'as' b'<unk>' b'dwarfs' b'(' b'food' b',' b'Wallis' b')' b',' b'is' b'a' b'Resolution' b',' b'so' b'illusion' b'watercolors' b',' b'the' b'second'
    b'@-@' b'mRNA' b',' b'have' b'legality' b'bright' b'or' b'yellow' b'call' b'and' b'induced' b'no' b'vampire' b'again' b'.' b'The' b'female' b'breeds' b'with' b'flowers'
    b'that' b'looked' b'out' b',' b'sacrifice' b'from' b'enclosed' b'different' b'ion' b'systems' b'(' b'they' b'give' b'them' b'by' b'the' b'twelfth' b'century' b',' b'or'
    b'suggests' b'it' b'could' b'amassed' b'free' b'ranging' b'with' b'the' b'bird' b'Scottish' b'pore' b'.' b'Reports' b'should' b'directly' b'participate' b'during' b'the' b'climax' b'of'
    b'reflects' b'hours' b'into' b'other' b'pairs' b'based' b',' b'and' b'it' b'also' b'both' b'stretched' b'during' b'its' b'example' b',' b'when' b'they' b'have' b'been'
    b'aesthetics' b'.' b'Because' b'there' b'is' b'no' b'Ensemble' b'Alkan' b',' b'it' b'asserted' b'.' b'This' b'protester' b'is' b'written' b'by' b'Lewis' b'precentor' b'@-@'
    b'keeper' b'.' b'Such' b'that' b'introduced' b'the' b'proper' b'spots' b',' b'pat' b'<unk>' b'composition' b'is' b'engineered' b'in' b'from' b'the' b'desired' b'empire' b'.'
    b'\xe2\x86\x92' b'Pearl' b'Karnataka' b'is' b'divided' b'by' b'Sb' b'predominantly' b'favourably' b'throughout' b'her' b'world' b'role' b'and' b'is' b'renovated' b'because' b'a' b'absorption' b'RNA'
    b'nominal' b'by' b'a' b'lesser' b'presence' b'.' b'As' b'this' b'descendant' b'All\xc4\x81h' b'(' b'versatile' b'v' b')' b',' b'it' b'is' b'worshipped' b'to' b'the'
    b'fundamentalist' b'eye' b'for' b'mythological' b'conditions' b'on' b'the' b'origin' b'of' b'the' b'Directorate' b'.' b'The' b'head' b'plants' b'Due' b'to' b'individually' b'shrines' b','
    b'serious' b'or' b'conscientious' b'meets' b'in' b'such' b'various' b'positions' b'on' b'blood' b',' b'malleable' b',' b'seeds' b',' b'or' b'<unk>' b'.' b'Another' b'graduation'
    b'provides' b'Tumtum' b'population' b'farther' b',' b'flying' b'sequence' b'<unk>' b'(' b'organic' b'eukaryotic' b'species' b'of' b'<unk>' b',' b'the' b'spots' b')' b'.' b'Based'
    b'as' b'oil' b',' b'they' b'are' b'also' b'eccentric' b'how' b'cellular' b'is' b'more' b'than' b'.' b'Geastrum' b'movement' b'and' b'<unk>' b'are' b'not' b'error'
    b'.' b'The' b'food' b'facial' b'emit' b'amongst' b'a' b'variety' b'of' b'solid' b'gait' b'(' b'formerly' b'as' b'Strapping' b'<unk>' b',' b'<unk>' b'<unk>' b','
    b'"' b'enzyme' b'soils' b'"' b')' b'.' b'In' b'endemic' b',' b'packaging' b'are' b'attached' b'to' b'mating' b',' b'Wang' b'Stanis\xc5\x82aw' b'(' b'acute' b'redeployment'
    b')' b',' b'which' b'inhabit' b'the' b'Nuestra' b'caste' b'courting' b'.' b'Ottoman' b'regions' b'are' b'of' b'all' b'in' b'Listen' b',' b'respectively' b'so' b'follow'
    b'like' b'one' b'of' b'his' b'energy' b'station' b',' b'also' b'even' b'used' b'together' b'inside' b'that' b'it' b'is' b'gregarious' b'that' b'fails' b'.' b'<eos>'
    b'A' b'gradient' b'of' b'becomes' b'carved' b'so' b'parrot' b'when' b'there' b'are' b'no' b'panels' b'they' b'are' b'comparable' b'on' b'or' b'even' b'act' b','
    b'shaped' b'iodine' b',' b'even' b'rather' b'288' b'.' b'<unk>' b'<unk>' b'observed' b'in' b'three' b'subspecies' b'of' b'kakapo' b',' b'Haynes' b'or' b'(' b'each'
    b'eyes' b')' b'for' b'choreography' b'(' b'1995' b')' b'.' b'<unk>' b',' b'making' b'on' b'their' b'apparent' b'account' b'hollow' b',' b'serves' b'as' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.3
    loss: 5.168
    elapsed time (seconds): 123.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  55.883 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
