.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'in' b'the' b'ensuing' b'Indonesian' b'Investigation' b'Olivier' b'842' b'performed' b'<unk>' b'a' b'Cresswell' b'on' b'against' b'150' b'reachable' b'into' b'the' b'stumps' b'of'
    b'194' b'\xe2\x80\x93' b'53' b',' b'all' b'of' b'which' b'are' b'concubine' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Genre' b'=' b'=' b'<eos>' b'<eos>' b'Above'
    b'bird' b'females' b':' b'Venus' b"'" b'late' b'financing' b"'" b'threads' b'(' b'Teams' b')' b'lions' b'(' b'II' b'\xe2\x80\x93' b'3' b'\xe2\x80\x93' b'2008' b')'
    b',' b'which' b'is' b'not' b'known' b'for' b'both' b'counties' b',' b'lists' b'in' b'a' b'good' b'zone' b'of' b'\xce\xb3' b'to' b'parent' b'an' b'indoor'
    b'achievements' b'of' b'eight' b'<unk>' b'.' b'From' b'the' b'next' b'year' b',' b'the' b'feathered' b'surface' b'occupies' b'the' b'level' b'of' b'maturity' b'during' b'the'
    b'population' b'of' b'combat' b',' b'and' b'<unk>' b'kakapo' b'resembles' b'them' b'to' b'kill' b'the' b'salmon' b'for' b'hagiography' b'for' b'a' b'unusually' b'exceptionally' b'@-@'
    b'spot' b',' b'claiming' b'five' b'or' b'most' b'share' b'injuries' b'lost' b'alone' b'and' b'Zombie' b'Jam' b'in' b'the' b'18th' b'century' b'.' b'For' b'Tintin'
    b"'s" b'early' b'first' b'century' b',' b'the' b'second' b'3' b'@-@' b'century' b'definition' b'are' b'happy' b'to' b'be' b'played' b'into' b'their' b'layer' b'of'
    b'Madison' b'.' b'The' b'recently' b'reported' b'<unk>' b',' b'which' b'saw' b'[' b'polytree' b']' b'@-@' b'mainly' b'episodes' b'of' b'better' b'winds' b'.' b'It'
    b'Hoover' b'is' b'very' b'small' b'for' b'a' b'necessity' b'all' b'place' b'previously' b'allowed' b'.' b'Males' b'could' b'be' b'accessible' b'by' b'food' b'and' b'their'
    b'three' b'man' b'they' b'do' b'and' b'be' b'belonging' b'to' b'<unk>' b',' b'leading' b'to' b'incidentally' b'.' b'<eos>' b'<unk>' b'female' b'samples' b'thus' b'fly'
    b'from' b'treatment' b'and' b'Eu' b"'s" b'rapid' b'literature' b'.' b'It' b'tests' b'may' b'be' b'withdrawn' b'to' b'four' b'out' b',' b'since' b'they' b'happened'
    b'"' b'for' b'good' b'statement' b'and' b'honey' b'...' b'a' b'white' b'couple' b'may' b'be' b'protein' b'and' b'Korvettenkapit\xc3\xa4n' b'become' b'being' b'<unk>' b'(' b'<unk>'
    b'brown' b')' b'and' b'/' b',' b'whose' b'step' b'between' b'many' b'@-@' b'facing' b'traits' b'capacity' b'jumping' b'different' b'or' b'on' b'how' b'Kamerkoor' b'with'
    b'long' b'zone' b',' b'who' b'died' b',' b'they' b'remain' b'on' b'a' b'comes' b'flight' b',' b'Da' b'<unk>' b'<unk>' b'"' b'(' b'Crowe' b'marriages'
    b')' b'.' b'A' b'inscription' b'swimming' b'in' b'the' b'most' b'recent' b'printed' b'spoken' b'exponent' b'Brough' b'is' b'incorrectly' b'more' b'parrots' b'.' b'martyred' b'for'
    b'the' b'common' b'fishing' b'Polish' b'takes' b'between' b'23' b'\xe2\x80\x93' b'3' b'knots' b'(' b'0' b'@.@' b'0' b'mi' b')' b',' b'they' b'homes' b'over'
    b'live' b'in' b'any' b'age' b'history' b'in' b'the' b'preceding' b'.' b'But' b'occurs' b'in' b'females' b'that' b'belonged' b'to' b'another' b'role' b'.' b'Snow'
    b'veneration' b'reminds' b'hundreds' b'of' b'membranes' b'that' b'have' b'their' b'burrow' b'at' b'Drifting' b'behaviour' b'.' b'Baer' b',' b'singing' b'but' b'greatly' b'core' b'Kanye'
    b',' b'described' b'by' b'their' b'causeway' b',' b'is' b'has' b'been' b'bordered' b'on' b'its' b'accomplishments' b'.' b'This' b'surrender' b'is' b'indeed' b'complaining' b'by'
    b'a' b'good' b'species' b'.' b'The' b'results' b'worshipped' b'he' b'felt' b'members' b'of' b'a' b'very' b'low' b'tower' b',' b'to' b'one' b'into' b'its'
    b'stir' b'once' b'.' b'With' b'the' b'head' b'of' b'his' b'fires' b',' b'the' b'feathers' b'improved' b'very' b'unknown' b'for' b'their' b'killing' b',' b'fountain'
    b'the' b'path' b'of' b'leave' b'between' b'CAT' b'populations' b'.' b'This' b'Rumelhart' b'must' b'be' b'DC' b'<unk>' b'(' b'formerly' b'only' b',' b'as' b'her'
    b'ecological' b'parrot' b'is' b'sometimes' b'Mozart' b')' b',' b'a' b'dark' b'partially' b'predator' b'as' b'a' b'dancing' b',' b'social' b'pink' b'or' b'recreate' b'skull'
    b'that' b'makes' b'it' b'with' b'similar' b'much' b'Garland' b'and' b'wet' b'NASA' b'.' b'spots' b'can' b'falls' b'up' b'to' b'walk' b',' b'by' b'there'
    b'may' b'have' b'certain' b'black' b'vegetation' b'techniques' b'from' b'their' b'individual' b'Limoux' b',' b'which' b'impression' b',' b'by' b'a' b'grayish' b'dissuade' b',' b'and'
    b'a' b'<unk>' b'sad' b'man' b'for' b'their' b'longer' b'<unk>' b'or' b'an' b'certain' b'exemplified' b'consisting' b'of' b'one' b'.' b'<eos>' b'Anyone' b'and' b'scales'
    b'are' b'change' b',' b'occurs' b'as' b'hawks' b':' b'parrot' b'\xe2\x80\x93' b'lineman' b'(' b'grassy' b'bequeathed' b'to' b'AADT' b')' b',' b'not' b'drastic' b','
    b'or' b'dying' b'.' b'During' b'Founded' b',' b'Coco' b'resembles' b'guitars' b'and' b'leave' b'its' b'possession' b'or' b'upper' b'behavior' b'.' b'Europium' b'<unk>' b'wings'
    b'are' b'so' b'after' b'greater' b'or' b'absolute' b'fashion' b'tail' b'.' b'<eos>' b'Latex' b'<unk>' b'elements' b'suggest' b'how' b'this' b'may' b'be' b'Pearl' b'seedlings'
    b'so' b'one' b',' b'can' b'have' b'Report' b'and' b'a' b'mild' b'movement' b'to' b'adopt' b'the' b'Avon' b',' b'if' b'they' b'feed' b'using' b'small'
    b'eggs' b'.' b'The' b'structural' b'diseases' b'are' b'also' b'greatly' b'emerge' b'.' b'For' b'example' b',' b'including' b'Asomtavruli' b'tactics' b'for' b'violent' b'entire' b'humans'
    b',' b'there' b'vary' b'had' b'an' b'large' b'guarding' b'some' b'Paddy' b'tan' b'of' b'female' b'feathers' b'and' b'resembles' b'boxes' b'to' b'become' b'it' b'.'
    b'Within' b'unusual' b'season' b'that' b'have' b'been' b'almost' b'sex' b',' b'they' b'usually' b'first' b'had' b'expecting' b'nesting' b'@-@' b'membered' b'starting' b',' b'and'
    b'may' b'<unk>' b'with' b'pre' b'@-@' b'analyses' b'by' b'females' b'at' b'Mycena' b'and' b'Boom' b'Shakespeare' b'.' b'A' b'small' b'number' b'of' b'other' b'factors'
    b'makes' b'various' b'jaw' b',' b'28' b',' b'1926' b',' b'and' b'broods' b'.' b'Each' b'other' b'8th' b'nucleus' b'are' b'<unk>' b',' b'with' b'only'
    b'one' b'when' b'she' b'pointed' b'a' b'planet' b'of' b'mating' b'there' b'observations' b'.' b'Because' b'their' b'finds' b'is' b'opened' b'for' b'that' b'less' b'guidelines'
    b',' b'it' b'means' b'good' b'that' b'it' b'is' b'fewer' b',' b'graduates' b',' b'than' b'one' b'who' b'moved' b'away' b'on' b'<unk>' b'for' b'two'
    b'minutes' b',' b'the' b'legs' b'changes' b'by' b'their' b'male' b'and' b'other' b'males' b'.' b'<eos>' b'Because' b'of' b'many' b'birds' b',' b'no' b'kakapo'
    b'will' b'be' b'limited' b'to' b'13' b'\xe2\x80\x93' b'57' b'lines' b',' b'but' b'compared' b'to' b'the' b'anti' b'@-@' b'breeding' b'snake' b'catalogue' b'by' b'D\xc3\xadaz'
    b'with' b'an' b'female' b'favourable' b'dwarf' b'appears' b'into' b'the' b'Solar' b'River' b'.' b'<eos>' b'Gradually' b',' b'this' b'bird' b'can' b'also' b'hardly' b'be'
    b'killed' b'primarily' b'by' b'warning' b'at' b'one' b'point' b'in' b'Aberdeen' b',' b'and' b'an' b'birds' b'on' b'how' b'they' b'are' b'rem' b'.' b'They'
    b'are' b'typically' b'tightly' b'cultivated' b'for' b'one' b'rocks' b'.' b'As' b'not' b'clinically' b',' b'both' b'Uyghur' b',' b'produces' b'it' b'will' b'be' b'serious'
    b'into' b'slip' b'.' b'In' b'a' b'lungs' b'involving' b',' b'they' b'<unk>' b'for' b'so' b'without' b'kid' b'.' b'unattractive' b'acid' b'identifies' b'that' b'some'
    b'or' b'impact' b'all' b'times' b'.' b'When' b'they' b'are' b'tightly' b'else' b'increases' b'until' b'crops' b'on' b'their' b'<unk>' b',' b'it' b'was' b'slip'
    b'.' b'This' b'might' b'control' b'back' b'to' b'cun' b'or' b'trees' b',' b'but' b'by' b'then' b'.' b'They' b'are' b'framed' b'so' b',' b','
    b'or' b'matter' b'from' b'supportive' b'waste' b',' b'it' b'may' b'have' b'apparent' b'movement' b'in' b'all' b'records' b'.' b'In' b'1938' b',' b'the' b'dome'
    b'is' b'whitish' b'in' b'28' b'extra' b'avian' b'females' b'.' b'1' b'thickness' b'to' b'became' b'an' b'necessary' b'<unk>' b'vehicle' b'as' b'they' b'minorities' b'.'
    b'Some' b'of' b'these' b'team' b'of' b'other' b'are' b'much' b'different' b'.' b'According' b'to' b'Uncle' b'<unk>' b'by' b'<unk>' b',' b'they' b'have' b'five'
    b'boundaries' b',' b'carpets' b'occurs' b'with' b'Reed' b'@-@' b'shaped' b',' b'and' b'accounting' b'through' b'long' b'females' b'.' b'The' b'prey' b'is' b'called' b'with'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.5
    loss: 5.168
    elapsed time (seconds): 115.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  18.547 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
