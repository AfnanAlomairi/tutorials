.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'over' b'100' b'%' b'and' b'them' b'to' b'avoid' b'east' b',' b'but' b'sometimes' b'included' b'up' b'firmly' b'.' b'When' b'Hamilton' b'throw' b'Internal' b'State'
    b"'" b'sculpture' b',' b'his' b'foreign' b'Magazine' b'of' b'Ceres' b'failed' b'the' b'planet' b"'s" b'garrisons' b'to' b'raise' b'to' b'a' b'fair' b'road' b'.'
    b'However' b',' b'a' b'"' b'sky' b'"' b'phenomenon' b'that' b'improved' b'of' b'unit' b',' b'it' b'counts' b'was' b'having' b'"' b'it' b'of' b'beneath'
    b'Maleev' b'with' b'a' b'social' b'refugee' b'of' b'bed' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>' b'<eos>' b'The' b'early'
    b'19th' b'century' b',' b'reflecting' b'colleague' b'of' b'NY' b'Angeles' b'written' b'by' b'the' b'rest' b'of' b'his' b'culture' b'as' b'30' b'<unk>' b',' b'also'
    b'designed' b'engineers' b'after' b'with' b'items' b'and' b'thus' b'medical' b',' b'but' b'suspected' b',' b'because' b'Peshkin' b'sits' b'that' b'is' b'unable' b'to' b'have'
    b'a' b'favourable' b'break' b'with' b'cotton' b'.' b'When' b'the' b'Republic' b'of' b'magnet' b'discontinued' b'sufficiently' b'a' b'planet' b',' b'harshly' b'of' b'the' b'guessed'
    b'from' b'the' b'planet' b'was' b'arrived' b',' b'with' b'several' b'secondary' b'innovations' b'.' b'Living' b'described' b'preventing' b'no' b'desire' b'to' b'a' b'field' b'state'
    b'until' b'or' b'SAIC' b'plants' b',' b'although' b'others' b'varies' b'more' b'than' b'to' b'a' b'newly' b'empire' b'when' b',' b'even' b'sometimes' b'a' b'tactically'
    b',' b'now' b'then' b'referred' b'to' b'concept' b'.' b'The' b'city' b'gathered' b'up' b'of' b'its' b'first' b'novel' b',' b'making' b'it' b'<unk>' b'a'
    b'six' b'when' b'only' b'had' b'its' b'creation' b'.' b'Once' b'Mosley' b'is' b'a' b'fictional' b'behavior' b',' b'he' b'und' b'Dorian' b'Lamar' b'introduced' b'office'
    b'as' b'an' b'member' b'in' b'steeplechase' b'recordings' b'and' b'<unk>' b'main' b'requirements' b';' b'regardless' b'of' b'play' b'remained' b'in' b'Irish' b'only' b'veto' b'to'
    b'coastal' b'law' b'.' b'Ceres' b'has' b'suggested' b'that' b'Hornung' b"'s" b'immediate' b'topic' b'is' b'to' b'be' b'of' b'first' b'spread' b',' b'with' b'people'
    b'M.' b'Mann' b',' b'a' b'Whig' b'first' b'a' b'member' b'of' b'Treatment' b'those' b'who' b'diversified' b'themselves' b'in' b'Europe' b'by' b'black' b'indicating' b'Vikram'
    b'W.' b'Green' b'(' b'technically' b'only' b'spelled' b'known' b'to' b'remove' b'a' b'house' b')' b'since' b'a' b'country' b'is' b'almost' b'important' b';' b'their'
    b'<unk>' b'field' b'dupatta' b'or' b'stopped' b'saptibha\xe1\xb9\x85g\xc4\xab' b'(' b'or' b'disrupt' b'during' b'his' b'biography' b')' b'Cullen' b'.' b'He' b'warned' b'also' b'"' b'it'
    b'around' b'a' b'Grecian' b'One' b'and' b'unpaid' b'convenient' b'video' b'of' b'the' b'same' b'fifteen' b'individuals' b',' b'and' b'consistently' b'<unk>' b'\xe2\x80\x94' b'pastoral' b','
    b'and' b'emotion' b'to' b'have' b'confused' b'.' b'"' b'He' b'picked' b'on' b'to' b'become' b'predecessors' b'off' b'in' b'ragale' b'.' b'The' b'Natural' b'History'
    b'confusion' b'three' b'years' b'from' b'six' b'years' b'.' b'Gaelic' b'records' b'of' b'craftsmen' b'coins' b'periodically' b'represent' b'of' b'foreign' b'batsmen' b'from' b'using' b'aid'
    b'across' b'his' b'death' b'on' b'numbers' b',' b'will' b'be' b'always' b'feelings' b'in' b'their' b'book' b';' b'they' b'use' b'for' b'rural' b'<unk>' b'smell'
    b'.' b'These' b'Polish' b'specimens' b'fled' b'to' b'natives' b'to' b'Mughal' b'networks' b'starting' b'in' b'"' b'splendid' b'blood' b'interests' b'battalions' b',' b'not' b'as'
    b'widely' b'independent' b',' b'and' b'the' b'worst' b'Corinthian' b'vibrant' b'interests' b'here' b'.' b'"' b'The' b'hunter' b'Primrose' b'(' b'Dawn' b')' b'consists' b'of'
    b'halogenated' b'McMillan' b'(' b'<unk>' b')' b'.' b'The' b'snakes' b"'s" b'car' b'evoked' b'fatal' b'and' b'its' b'folds' b'of' b'<unk>' b',' b'but' b'makes'
    b'a' b'short' b'election' b'Tribune' b'not' b'called' b'on' b'.' b'<eos>' b'Robert' b'galericulata' b'of' b'Oxford' b'<unk>' b'<unk>' b'(' b'Augustus' b'<unk>' b')' b','
    b'the' b'Book' b'of' b'Crystal' b'"' b'Cave' b'bad' b'"' b',' b'is' b'a' b'inscription' b'of' b'ancient' b'believer' b',' b'with' b'a' b'daring' b'aisle'
    b',' b'which' b'has' b'landed' b'out' b'in' b'an' b'<unk>' b'belt' b',' b'a' b'party' b'at' b'which' b'dates' b'<unk>' b'or' b'with' b'25' b'%'
    b'or' b'a' b'mailings' b'asked' b'the' b'species' b'nor' b'one' b'stumbled' b'.' b'He' b'rejects' b'another' b'sense' b'its' b'passion' b'for' b'chords' b'them' b'outward'
    b'to' b'<unk>' b'behind' b'nineteen' b'American' b'initiatives' b',' b'where' b'Lincolnshire' b'the' b'<unk>' b'creature' b'shifted' b'the' b'complete' b'ground' b'.' b'The' b'<unk>' b'of'
    b'kakapo' b'is' b'prepared' b'to' b'pass' b'by' b'the' b'task' b'of' b'their' b'warrior' b',' b'while' b'singing' b'kits' b'leadership' b'or' b'18' b'\xe2\x80\x93' b'story'
    b',' b'blocking' b'it' b'they' b'may' b'apologize' b'.' b'<eos>' b'Because' b'not' b'kakapo' b'with' b'360' b'people' b'of' b'their' b'host' b'against' b'other' b'ways'
    b',' b'mRNA' b'include' b'itself' b'alone' b',' b'into' b'parapet' b"'" b'breeding' b'shrine' b',' b'Valentin' b'al' b'<unk>' b',' b'often' b',' b'(' b'1115'
    b')' b',' b'which' b'seems' b'the' b'secrets' b'in' b'microphone' b',' b'and' b'Frustrated' b'their' b'magical' b'symbols' b'.' b'On' b'na' b'v.' b'Bang' b'Times'
    b',' b'it' b'also' b'moves' b'from' b'The' b'theme' b'valleys' b'when' b'it' b'also' b'moved' b'to' b'A' b'<unk>' b'.' b'In' b'part' b',' b'living'
    b'on' b'the' b'media' b',' b'Water' b'Religion' b'meticulous' b'a' b'trek' b'from' b'his' b'gravity' b'that' b'he' b'could' b'manipulate' b'a' b'classic' b'advantage' b'goodbye'
    b'.' b'The' b'fact' b'named' b'this' b'most' b'most' b'kind' b'of' b'helpers' b"'" b'mind' b'nor' b'a' b'long' b'head' b',' b'dark' b'.' b'Finally'
    b',' b'they' b'do' b'frequently' b'often' b'prevent' b'them' b'in' b'a' b'social' b'reality' b'.' b'They' b'is' b'seen' b'based' b'on' b'the' b'sailing' b'sword'
    b'on' b'a' b'convict' b'around' b'a' b'large' b'determination' b'that' b'near' b'that' b'time' b'.' b'It' b'is' b'first' b'again' b'pulled' b'.' b'Inside' b'further'
    b'scholars' b'provide' b'nonoxynol' b'@-@' b'rich' b'loaves' b',' b'helping' b'their' b'body' b',' b'rather' b'effectively' b'on' b'television' b'to' b'<unk>' b',' b'being' b'experience'
    b',' b'"' b'Eurogamer' b"'" b'lover' b'I' b'serve' b'like' b'Tyre' b'<unk>' b'room' b';' b'that' b'you' b'looks' b'good' b'or' b'to' b'get' b','
    b'even' b'otherwise' b'intact' b'and' b'fend' b'.' b'It' b'may' b'killed' b'measured' b'it' b'back' b'open' b'an' b'extraordinary' b'low' b'"' b'.' b'This' b'will'
    b'be' b'distinguished' b'by' b'this' b'species' b'.' b'In' b'modern' b'reality' b',' b'they' b'have' b'largely' b'often' b'done' b'champion' b"'s" b'sort' b'on' b'the'
    b'night' b'.' b'<eos>' b'Having' b'against' b'wings' b'include' b'also' b'weaken' b'after' b'polyurethane' b'a' b'pair' b'of' b'Garman' b'and' b'Perrie' b'related' b'to' b'newly'
    b',' b'crumble' b'and' b'Frame' b'compact' b'.' b'As' b'most' b'authors' b'may' b'proceed' b'on' b'wake' b',' b'such' b'as' b'<unk>' b',' b'fir' b','
    b'clumps' b'of' b'an' b'young' b'range' b'of' b'Veblen' b'and' b'metals' b'shipping' b'reclaimed' b'them' b'.' b'Sometimes' b',' b'they' b'were' b'regulated' b'(' b'"'
    b'princess' b'"' b',' b'each' b'tail' b'Elephanta' b'tenant' b'other' b'Marches' b',' b'although' b'planets' b'can' b'have' b'pointed' b'into' b'under' b'up' b'information' b'after'
    b'that' b'such' b'waves' b',' b'such' b'as' b'devout' b'consumption' b',' b'<unk>' b'Conduct' b',' b'von' b'Kenneth' b',' b'<unk>' b',' b'steer' b',' b'and'
    b'<unk>' b'but' b'helpers' b'with' b'"' b'\xc2\xb5m' b'CB' b'"' b'.' b'This' b'may' b'be' b'a' b'personal' b'differentiation' b'that' b'the' b'female' b'could' b'often'
    b'look' b'on' b'the' b'line' b'.' b'If' b'by' b'1848' b',' b'it' b'is' b'Vistara' b'that' b'i.e.' b'realized' b'it' b'has' b'been' b'a' b'"'
    b'metaphor' b'"' b'and' b'"' b'glucose' b'"' b'that' b'need' b'to' b'po' b'fate' b':' b'"' b'He' b'surprisingly' b'perfectly' b'will' b'be' b'<unk>' b','
    b'and' b',' b'we' b'acknowledged' b'her' b'a' b'middle' b',' b'but' b'maybe' b'where' b'it' b'know' b'rather' b'still' b'more' b'like' b'Indeed' b'out' b'players'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.3
    loss: 5.168
    elapsed time (seconds): 106.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  17.086 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
