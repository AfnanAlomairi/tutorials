.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'controlled' b'the' b'<unk>' b'traps' b'for' b'itinerant' b'time' b',' b'setting' b'the' b'text' b'or' b'<unk>' b'with' b'leading' b'climates' b'UPT' b'and' b'avian'
    b'control' b'@-@' b'manager' b'that' b'its' b'homes' b'.' b'Its' b'concept' b'Policy' b'delusion' b'is' b'also' b'of' b'the' b'soft' b'talents' b'.' b'<eos>' b'If'
    b'in' b'contrast' b'to' b'night' b'of' b'this' b'"' b'uncompromising' b'"' b',' b'they' b'are' b'found' b'dead' b'to' b'receive' b'their' b'male' b'life' b','
    b'while' b'he' b'It' b'appears' b'.' b'<eos>' b'Cast' b'for' b'Blofeld' b',' b'O' b'Yat' b'found' b'an' b'Japanese' b'@-@' b'quality' b'wobble' b'belt' b'under'
    b'R\xc3\xa9union' b'where' b'Round' b'side' b'appointed' b'aimed' b'Arniel' b',' b'<unk>' b',' b'and' b'finder' b'.' b'Both' b'authors' b'enter' b'as' b'a' b'<unk>' b'neutron'
    b'force' b'.' b'In' b'Upper' b'racing' b',' b'the' b'authorised' b'season' b'I' b'Hywel' b'can' b'see' b'to' b'protect' b'a' b'public' b'halt' b',' b'talking'
    b'to' b'several' b'other' b'groups' b'.' b'<eos>' b'A' b'typical' b'throne' b'of' b':' b'dress' b'(' b'Brian' b')' b',' b'parallel' b'to' b'the' b'Boat'
    b'Head' b',' b'is' b'a' b'departure' b'and' b'the' b'island' b'that' b'Munich' b'is' b'exposed' b'to' b'epicenter' b'.' b'After' b'do' b'not' b'make' b'up'
    b'the' b'play' b',' b'it' b'is' b'especially' b'predators' b'to' b'have' b'avoided' b'layers' b'of' b'erosion' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'='
    b'=' b'<eos>' b'<eos>' b'On' b'other' b'times' b',' b'it' b'usually' b'are' b'published' b'effective' b',' b'compulsory' b'or' b'<unk>' b'species' b'.' b'This' b'egg'
    b'population' b'has' b'shown' b'changes' b'to' b'other' b'other' b'agricultural' b'scale' b'practices' b'with' b'1909' b',' b'<unk>' b',' b'or' b'nymphs' b',' b'and' b'Bounty'
    b'.' b'The' b'M\xc3\xbcnchener' b'galericulata' b'is' b'first' b'based' b'together' b'.' b'These' b'amounts' b'of' b'its' b'head' b'over' b'the' b'gunners' b'are' b'permitted' b'.'
    b'It' b'is' b'more' b'frequent' b',' b'electronic' b',' b'freezing' b'or' b'1100' b'and' b'or' b'lack' b'by' b'their' b'male' b'clothed' b'.' b'They' b'are'
    b'<unk>' b'from' b'Goldenson' b'.' b'<eos>' b'Hathor' b'(' b'M\xc4\x81ori' b'The' b'<unk>' b')' b'is' b'Chronicles' b'lawyer' b'al' b'Riot' b'(' b'originally' b'spelled' b'English'
    b'<unk>' b')' b',' b'the' b'latter' b'eight' b'Museum' b',' b'who' b'is' b'reached' b'crystalline' b'Ngebe' b'and' b'slippage' b'in' b'1998' b'.' b'As' b'the'
    b'functional' b'layer' b'let' b'is' b'rounded' b',' b'they' b'are' b'a' b'endowment' b'precipitation' b'of' b'towns' b'in' b'fences' b',' b'although' b'in' b'1808' b'in'
    b'the' b'<unk>' b'Mogadishu' b'Act' b'are' b'distinct' b'.' b'This' b'was' b'become' b'so' b'a' b'species' b'of' b'about' b'10' b'million' b'(' b'33' b'\xe2\x80\x93'
    b'15' b'\xe2\x80\x93' b'38' b'@.@' b'5' b'in' b')' b',' b'and' b'so' b'of' b'collar' b'processes' b'do' b'not' b'occur' b'on' b'having' b'five' b'years'
    b'or' b'floating' b'that' b'males' b'may' b'be' b'badly' b'parodied' b'.' b'A' b'monsters' b'mentions' b'that' b'polygonal' b'eye' b'is' b'confused' b'with' b'the' b'feathers'
    b'in' b'Ireland' b'.' b'The' b'grassland' b'first' b'periodically' b'an' b'large' b'colony' b'of' b'fluorescence' b',' b'in' b'which' b'they' b'are' b'unopposed' b',' b'by'
    b'a' b'starling' b'"' b'Killing' b'<unk>' b'"' b',' b'a' b'crime' b'shirt' b'can' b'be' b'represented' b'by' b'a' b'planet' b',' b'with' b'outlining' b'as'
    b'a' b'bound' b'role' b'.' b'track' b',' b'even' b'begins' b',' b'they' b'are' b'highly' b'native' b'black' b'.' b'Common' b'walled' b'language' b'may' b'possess'
    b'or' b'do' b'after' b'have' b'once' b',' b'though' b'few' b'million' b'Moon' b'calls' b'piano' b'no' b'(' b'documentary' b',' b'the' b'Polish' b'creatures' b')'
    b'has' b'yellowish' b'as' b'they' b'find' b'.' b'According' b'to' b'the' b'nuclei' b',' b'they' b'find' b'increase' b',' b'as' b'well' b'as' b'Gaelic' b'liquids'
    b'in' b'different' b'6' b'seconds' b'.' b'According' b'to' b'males' b'from' b'<unk>' b',' b'are' b'roasted' b',' b'RNA' b',' b'but' b'with' b'the' b'Reala'
    b',' b'along' b'to' b'call' b',' b'even' b'they' b'often' b'don' b"'t" b'have' b'their' b'final' b'source' b'or' b'terrestrial' b'demons' b'<unk>' b'by' b'foraging'
    b'.' b'For' b'example' b',' b'there' b'of' b'different' b'starlings' b'will' b'have' b'gone' b'in' b'an' b'distinctive' b'base' b'.' b'An' b'kitsune' b'and' b'stem'
    b'n' b'material' b'have' b'an' b'nominal' b'iron' b'male' b',' b'so' b'it' b'will' b'be' b'applied' b'to' b'accumulate' b'and' b'include' b'on' b'a' b'way'
    b'of' b'blood' b'.' b'<eos>' b'A' b'dress' b'to' b'<unk>' b'investigated' b'reality' b',' b'about' b'10' b'\xe2\x80\x93' b'5' b'minutes' b'were' b'pale' b'enlarged' b'.'
    b'Many' b'other' b'starlings' b'have' b'been' b'observed' b'within' b'clusters' b'of' b'<unk>' b',' b'probably' b'less' b'minutes' b'of' b'rotation' b'as' b'"' b',' b'in'
    b'disciplined' b'when' b'the' b'wine' b'was' b'hanging' b'or' b'<unk>' b'how' b'the' b'eyes' b'like' b'a' b'whole' b'extension' b'.' b'"' b'<eos>' b'Many' b'birds'
    b'are' b'able' b'to' b'remove' b'the' b'efficiency' b'of' b'<unk>' b',' b'sin' b',' b'friendly' b',' b'<unk>' b',' b'Christy' b',' b'Salvador' b',' b'girls'
    b'during' b'the' b'whole' b'hours' b',' b'on' b'grass' b',' b'which' b'should' b'be' b'because' b'Kahne' b'predator' b'.' b'deity' b'may' b'cause' b'when' b'orbit'
    b'towards' b'be' b'adopted' b',' b'well' b'biodegradable' b',' b'at' b'a' b'hole' b'due' b'to' b'varying' b'motifs' b'between' b'adults' b'.' b'As' b'they' b'were'
    b'more' b'Robyn' b'they' b'are' b'wrong' b'oo' b'they' b'eat' b'food' b',' b'as' b'kitsune' b'goes' b'on' b'proper' b'DNA' b'.' b'Part' b',' b'deep'
    b',' b'orange' b',' b'Krakowski' b',' b'there' b'are' b'no' b'appearance' b'fashion' b',' b'especially' b'endless' b'alike' b',' b'each' b',' b'then' b'sound' b'off'
    b'by' b'Steel' b',' b'set' b'to' b'kill' b',' b'<unk>' b'Fonzie' b',' b'and' b'enzyme' b'sheep' b'.' b'<eos>' b'The' b'Ice' b'Commercial' b'brightest' b'Eurasia'
    b'will' b'be' b'a' b'hour' b'time' b'due' b'to' b'rocks' b',' b'whilst' b'he' b'considers' b'slip' b'and' b'lowered' b',' b'may' b'minimize' b'a' b'captivity'
    b'whistle' b'.' b'According' b'to' b'birds' b'of' b'some' b'phenomenon' b',' b'one' b'of' b'some' b'<unk>' b'eventually' b'serve' b'as' b'when' b'the' b'red' b'<unk>'
    b'wing' b'another' b'skull' b'.' b'firsthand' b'fruiting' b'is' b'known' b'fluorescent' b'as' b'he' b'should' b'be' b'easily' b'in' b'chain' b'.' b'Due' b'to' b'Supporters'
    b',' b'these' b'starling' b'areas' b'complete' b'females' b',' b'such' b'as' b'Plum' b'stains' b',' b'inert' b'<unk>' b',' b'<unk>' b',' b'white' b'gray' b','
    b'Makeba' b',' b'Indiana' b',' b'water' b',' b'and' b'\xc5\xbbele\xc5\x84ski' b'.' b'Now' b'with' b'female' b',' b'the' b'colour' b',' b'<unk>' b'@-@' b'filament' b','
    b'owl' b',' b'Nature' b'and' b'muscle' b',' b'after' b'many' b'carefully' b'placed' b'v' b'up' b'.' b'<eos>' b'<eos>' b'=' b'=' b'term' b'=' b'='
    b'<eos>' b'<eos>' b'Because' b'of' b'his' b'introduction' b'Berlalu' b',' b'it' b'is' b'performed' b'as' b'another' b'interactive' b'enlarged' b',' b'and' b'the' b'presence' b'of'
    b'beach' b'planets' b'occur' b'.' b'In' b'contemporary' b'glans' b'distribution' b'they' b'were' b'hurt' b'in' b'or' b'others' b'.' b'<eos>' b'In' b'2004' b',' b'large'
    b'starling' b'wasps' b'are' b'derived' b'into' b'the' b'larger' b'Sea' b';' b'Ltd.' b',' b'placement' b'and' b'cats' b',' b'were' b'"' b'able' b'to' b'serve'
    b'as' b'their' b'alpha' b'and' b'<unk>' b'industry' b',' b'"' b'are' b'less' b'useful' b'or' b'followed' b'by' b'passing' b'the' b'mushrooms' b'in' b'contrast' b'.'
    b'This' b'crystal' b'anthropology' b'has' b'also' b'pointed' b'.' b'The' b'highest' b'subspecies' b'of' b'breeding' b',' b'Dirty' b',' b'<unk>' b'and' b'streaked' b'rhyme' b','
    b'Ra' b'<unk>' b'(' b'<unk>' b')' b',' b'which' b'was' b'observed' b'between' b'theatrical' b'artifacts' b'of' b'adults' b',' b'in' b'some' b'birds' b',' b'and'
    b'the' b'IOC' b'Mayo' b'mbar' b'(' b'round' b'projectiles' b')' b'in' b'Lebanon' b'when' b'Mountain' b'America' b'is' b'<unk>' b'.' b'<eos>' b'The' b'population' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 201.2
    loss: 5.168
    elapsed time (seconds): 106.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  16.702 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
