
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'In' b'several' b'phases' b'the' b'Rhodesia' b'<unk>' b'Joseph' b'von' b'M.' b'A.' b'Whedon' b'reported' b'that' b'"' b'"' b'the' b'most' b'negative' b'Christian'
    b'indigenous' b'@-@' b'grandfather' b'productive' b',' b'Wave' b'the' b'scheme' b'Dante' b'Kereya' b'from' b'the' b'Pistons' b'-' b'in' b'Sydney' b',' b'with' b'any' b'sort'
    b'of' b'voice' b',' b'plain' b'or' b'degenerated' b'up' b'with' b'making' b'into' b'the' b'whole' b'colour' b',' b'to' b'doubt' b'East' b'and' b'embody' b'an'
    b'Pulse' b'of' b'a' b'master' b'at' b'Heaven' b'"' b'.' b'Much' b'young' b'than' b'its' b'work' b'on' b'account' b'image' b'was' b'referred' b'to' b'as'
    b'delicate' b'counties' b',' b'verdict' b',' b'<unk>' b'versus' b'blues' b',' b'gray' b'Dale' b',' b'south' b',' b'Fogle' b'and' b'flint' b'.' b'lice' b'ranger'
    b'positive' b'demarcation' b',' b'both' b'Boucher' b'and' b'<unk>' b'populations' b'were' b'announced' b'only' b'second' b'to' b'Race' b'celebrity' b'on' b'the' b'ground' b'prevent' b'or'
    b'melody' b'and' b'was' b'officially' b'found' b'to' b'train' b'.' b"'" b'Irish' b'season' b'contain' b'their' b'kingdom' b'up' b'.' b'But' b'II' b'to' b'rebuild'
    b'respect' b'to' b'devote' b'negotiations' b'from' b'mind' b'.' b'The' b'other' b'hand' b'to' b'develop' b'wounds' b'may' b'be' b'introduced' b'into' b'the' b'Earth' b'.'
    b'This' b'bird' b'is' b'Different' b'along' b'through' b'the' b'Internet' b',' b'then' b'<unk>' b',' b'then' b'again' b'in' b'verge' b'and' b'chemical' b'<unk>' b'.'
    b'Once' b'a' b'long' b'interpretation' b'in' b'approximately' b'30' b'knots' b'run' b',' b'Trade' b'CDs' b'laid' b'mostly' b'by' b'<unk>' b',' b'a' b'bearded' b'and'
    b'undirected' b',' b'<unk>' b'and' b'moderate' b'airstrikes' b'.' b'first' b'2' b'passes' b'after' b'had' b'BCS' b'frigates' b',' b'T' b'Oriental' b',' b'is' b'pillars'
    b'.' b'The' b'neck' b'to' b'other' b'flock' b'makes' b'Wikimania' b'<unk>' b'tools' b'Mysorean' b'distinct' b'birds' b'that' b'claim' b'them' b'are' b'their' b'longer' b'threats'
    b'.' b'A' b'working' b'fraction' b'of' b'Geastrum' b'in' b'making' b'Jain' b'habitat' b'infections' b'such' b'as' b'many' b'shows' b',' b'such' b'as' b'<unk>' b','
    b'220' b'\xe2\x80\x93' b'06' b',' b'1887' b'responded' b',' b'and' b'large' b',' b'which' b'evolved' b'in' b'much' b'other' b'rufous' b',' b'at' b'Paris' b'.'
    b'The' b'interior' b',' b'those' b'of' b'pure' b'plumage' b'and' b'stellar' b'architecture' b'include' b'a' b'Consul' b'than' b'a' b'gray' b'shape' b',' b'but' b'over'
    b'around' b'district' b'technology' b'males' b'.' b'A' b'color' b'Nineteen' b'driven' b'the' b'creation' b'of' b'a' b'kakapo' b',' b'which' b'is' b'greatly' b'somewhat' b'removed'
    b'by' b'a' b'type' b'of' b'skin' b'from' b'2' b'metres' b'(' b'4' b'@.@' b'8' b'in' b')' b'estimated' b',' b'so' b'females' b'at' b'.'
    b'It' b'is' b'a' b'pair' b'of' b'1' b'@.@' b'5' b'die' b'(' b'38' b'<unk>' b'at' b'@-@' b'330' b'@.@' b'1' b'km' b')' b'to'
    b'attract' b'it' b'to' b'forming' b'for' b'males' b'.' b'<eos>' b'There' b'are' b'females' b'8' b'at' b'70' b'to' b'9' b'\xc2\xb0' b',' b'when' b'a'
    b'single' b'sequence' b'has' b'been' b'able' b'to' b'withstand' b'nomina' b'713' b',' b'which' b'submerged' b'only' b'two' b'elsewhere' b'due' b'to' b'it' b'by' b'stabilizers'
    b'.' b'These' b'such' b'include' b'gold' b'predators' b',' b'different' b'yellow' b',' b'cultivated' b',' b'and' b'fly' b'eagle' b'knot' b'(' b'bearing' b'2' b'museums'
    b')' b'so' b'also' b'hollow' b'.' b'As' b'they' b'champions' b'up' b'three' b'areas' b',' b'years' b',' b'they' b'added' b'by' b'entire' b'exception' b'frequently'
    b'valence' b'grey' b',' b'with' b'tree' b'tawny' b',' b'mainly' b'and' b'even' b'grown' b'or' b'carrying' b'strong' b'smell' b'of' b'ocean' b'birds' b'.' b'Bhringi'
    b'had' b'expected' b'as' b'very' b'fraction' b'a' b'different' b'element' b'may' b'be' b'found' b',' b'as' b'programmer' b'message' b'that' b'are' b'begin' b'to' b'vary'
    b'over' b'the' b'past' b',' b'while' b'humans' b'begins' b'individuals' b'from' b'other' b'kinds' b'that' b'they' b'were' b'bright' b'comparable' b'to' b'their' b'spreading' b','
    b'but' b'they' b'are' b'<unk>' b'roots' b'.' b'If' b'a' b'percentage' b'is' b'mostly' b'<unk>' b'by' b'any' b'other' b'@-@' b'garrulous' b'frequency' b'displays' b','
    b'they' b'look' b'to' b'Immemorial' b'that' b'killed' b'social' b'thermal' b'blocks' b',' b'but' b'they' b'<unk>' b'to' b'move' b',' b'with' b'many' b'other' b'resistance'
    b'.' b'One' b'other' b'species' b'may' b'be' b'responsible' b'to' b'exit' b'promyelocytic' b"'s" b'Mifflin' b'margin' b';' b'this' b'pair' b'of' b'Joel' b'Burn' b','
    b'adorned' b'by' b'birds' b',' b'stranding' b'bridging' b'Dexter' b'Tupolev' b'hewn' b'<unk>' b',' b'brain' b'wear' b'and' b'salmon' b',' b'mechanics' b',' b'mathematics' b','
    b'or' b'grey' b'frames' b'as' b'passing' b'with' b'the' b'eye' b'encapsulates' b'they' b'would' b'be' b'exhausted' b'by' b'serious' b'nests' b'.' b'They' b'opposed' b'her'
    b'colours' b',' b'so' b'rarely' b'in' b'autumn' b',' b'they' b'are' b'now' b'adapted' b'.' b'Per\xc3\xb3n' b'believed' b'it' b'may' b'be' b'modified' b'to' b'be'
    b'involved' b'on' b'it' b',' b'and' b'even' b'but' b'even' b'<unk>' b'if' b'they' b'may' b'be' b'mistakenly' b'for' b'bird' b'warriors' b'.' b'He' b'<unk>'
    b'it' b'by' b'its' b'idea' b',' b'roughly' b'08' b'percent' b'when' b'it' b'ends' b'or' b'behind' b'the' b'Game' b'has' b'implemented' b'Kody' b',' b'or'
    b'fighting' b';' b'they' b'chooses' b'pointed' b'when' b'cyclical' b'they' b'actively' b'spend' b'<unk>' b'for' b'female' b'other' b'or' b'<unk>' b'onto' b'has' b'it' b'.'
    b'A' b'small' b'step' b'is' b'related' b'to' b'tip' b'ranging' b'in' b'risks' b'.' b'In' b'experience' b',' b'leaving' b'minerals' b'dismayed' b'in' b'human' b'items'
    b'of' b'movement' b',' b'to' b'a' b'planet' b"'s" b'one' b'side' b'by' b'prey' b'.' b'The' b'pronounced' b'throat' b'of' b'Dublin' b',' b'when' b'the'
    b'common' b'starling' b'is' b'unknown' b',' b'except' b'in' b'eyes' b'.' b'According' b'to' b'<unk>' b'deem' b'Fire' b',' b'the' b'vertices' b'are' b'present' b'.'
    b'A' b'number' b'normally' b'represented' b'by' b'NASA' b',' b'fledging' b',' b'expended' b'by' b'<unk>' b'without' b'drinking' b'and' b'provisions' b'.' b'Because' b'of' b'this'
    b'kind' b',' b'representing' b'membrane' b'average' b',' b'the' b'the' b'difficult' b'out' b'tend' b'to' b'overlap' b'up' b'.' b'Together' b',' b'it' b'is' b'slowly'
    b'Winslow' b'.' b'<eos>' b'What' b'has' b'already' b'been' b'handled' b'by' b'gender' b'edges' b',' b'among' b'ornithologist' b'minerals' b',' b'or' b'rocks' b'show' b'in'
    b'their' b'supply' b'of' b'large' b'practices' b',' b'with' b'undirected' b'control' b',' b'overlooking' b'them' b'for' b'<unk>' b',' b'and' b'clinics' b';' b'Belgium' b'wondered'
    b'her' b'role' b'.' b'One' b'male' b'sheep' b'seen' b'on' b'back' b'of' b'900' b'kg' b'(' b'4' b'@.@' b'8' b'mi' b')' b'.' b'She'
    b'has' b'reborn' b'whether' b'it' b'touched' b'to' b'concentrate' b'up' b'from' b'open' b'variable' b'or' b'by' b'lordship' b',' b'while' b'the' b'kakapo' b'is' b'Tribune'
    b'implying' b',' b'is' b'either' b'falls' b'to' b'multi' b'@-@' b'more' b'referenced' b'by' b'imposed' b'them' b',' b'or' b'The' b'upland' b'when' b'both' b'the'
    b'robed' b'<unk>' b'.' b'These' b'female' b'is' b'whitish' b'at' b'a' b'elevation' b'of' b'nest' b'mice' b'.' b'This' b'chicks' b'is' b'seen' b'in' b'1934'
    b'to' b'size' b',' b'which' b'represents' b'divine' b'special' b'scale' b',' b'with' b'many' b'typically' b'instead' b'.' b'The' b'initial' b'term' b'rich' b'surface' b'required'
    b'to' b'produce' b'gills' b'.' b'Of' b'the' b'exception' b'of' b'however' b',' b'<unk>' b'(' b'God' b')' b'goes' b'to' b'Jamaica' b"'s" b'controls' b';'
    b'they' b'immediately' b'Sergeant' b'Ledden' b',' b'<unk>' b'Fire' b'and' b'concentrated' b'with' b'these' b'always' b'brownish' b'Grube' b'while' b'then' b'Lieutenant' b'M.' b'Kahn' b'and'
    b'Albert' b'Coleraine' b'find' b'the' b'western' b'smuggled' b'department' b'as' b'through' b'what' b'they' b'stands' b'into' b'the' b'woods' b'of' b'Montenegro' b'12' b'or' b'38'
    b'years' b'later' b'.' b'There' b'are' b'an' b'connector' b'and' b'surrounded' b'up' b'if' b'both' b'of' b'her' b'upperparts' b'are' b'often' b'far' b'to' b'help'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 176.5
    loss: 5.168
    elapsed time (seconds): 104.2




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  49.428 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
