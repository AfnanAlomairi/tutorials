
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'As' b'brood' b'feeding' b',' b'after' b'his' b'death' b'in' b'New' b'Zealand' b',' b'he' b'was' b'expected' b'to' b'compete' b'in' b'the' b'isolated'
    b'<unk>' b'<unk>' b'Zeit' b'poor' b'works' b'for' b'their' b'ban' b'which' b'was' b'still' b'Entertainer' b'.' b'Irresistible' b'physically' b'still' b'declared' b'of' b'$' b'65'
    b'@,@' b'000' b'as' b'or' b'be' b'used' b'for' b'<unk>' b'and' b'vice' b'circulation' b'.' b'<eos>' b'The' b'Muscat' b'Gazette' b'sank' b',' b'but' b'is'
    b'created' b'again' b'by' b'Earth' b'.' b'<eos>' b'Within' b'his' b'death' b'to' b'behaviour' b',' b'V' b'argues' b'to' b'California' b',' b'owner' b',' b'and'
    b'they' b'were' b'so' b'enthusiastic' b'.' b'After' b'the' b'oars' b'very' b'came' b'and' b'tales' b'are' b'parts' b'of' b'their' b'country' b'.' b'45' b'in'
    b'publication' b',' b'an' b'short' b'Hartman' b'that' b'brutally' b'would' b'affect' b'search' b'for' b'her' b'grandson' b'Coast' b',' b'such' b'as' b'fear' b',' b'rescuing'
    b'considerable' b'Caprices' b',' b'conversion' b',' b'sports' b',' b'and' b'on' b'various' b'conception' b',' b'<unk>' b',' b'to' b'prevent' b'a' b'symbols' b'with' b'<unk>'
    b"'s" b'heads' b'.' b'The' b'democratic' b'voice' b'of' b'mother' b'it' b'during' b'plum' b'carcinogenic' b',' b'which' b'two' b'daughters' b'were' b'separated' b',' b'of'
    b'pursuing' b'Phoenician' b'names' b'such' b'as' b'sluggish' b',' b'or' b'<unk>' b'opponents' b'and' b'protein' b'Whitby' b'.' b'<eos>' b'Ceres' b"'s" b'F\xc3\xa9d\xc3\xa9ration' b':' b'Akka'
    b'<unk>' b'was' b'also' b'Lanois' b'known' b'as' b'"' b'The' b'most' b'experienced' b'object' b'of' b'the' b'same' b'to' b'<unk>' b'Are' b'"' b'(' b'mysteriously'
    b'of' b'the' b'<unk>' b'@-@' b'<unk>' b')' b'.' b'Editor' b'is' b'used' b'with' b'the' b'loss' b'"' b'B' b'"' b'with' b'a' b'smoking' b'pair'
    b'and' b'piano' b',' b'joining' b'little' b'identification' b'when' b'most' b'criticizing' b'frequency' b'remain' b'.' b'When' b'magnificent' b'prefers' b'will' b'be' b'another' b'1766' b','
    b'there' b'are' b'many' b'psychoactive' b'arguments' b'of' b'kakapo' b',' b'with' b'long' b'ratings' b',' b'so' b'the' b'kakapo' b'series' b'actors' b'called' b'autobiographies' b','
    b'referring' b'to' b'<unk>' b'or' b'the' b'surrounding' b'output' b'.' b'<eos>' b'When' b'so' b'there' b'is' b'no' b'stellar' b'demonstrators' b',' b'scholars' b'are' b'the'
    b'sixth' b'best' b'@-@' b'term' b'sequence' b'of' b'North' b'America' b'.' b'The' b'aggressively' b'range' b'arc' b'a' b'combination' b'of' b'difficulty' b',' b'by' b'gel'
    b'tensions' b'in' b'some' b'islands' b',' b'such' b'as' b'<unk>' b'of' b'the' b'150' b'to' b'office' b'was' b'written' b'up' b'that' b'would' b'be' b'used'
    b'.' b'Each' b'images' b'of' b'this' b'species' b',' b'one' b'of' b'his' b'universal' b'murdered' b'by' b'which' b'newspaper' b'believed' b'may' b'be' b'"' b'uncommon'
    b'"' b',' b'and' b'would' b'contain' b'it' b'a' b'difficult' b'leader' b'.' b'Around' b'19' b':' b'50' b',' b'betraying' b'partly' b'.' b'The' b'Dream'
    b'entrances' b'his' b'large' b'decay' b'is' b'begun' b'after' b'the' b'invertebrates' b',' b'though' b'causes' b'if' b'feminine' b',' b'when' b'they' b'dies' b'on' b'May'
    b'21' b',' b'2006' b'.' b'Around' b'100' b':' b'30' b',' b'Sicily' b',' b'when' b'of' b'1772' b',' b'they' b'are' b'worshipped' b'their' b'snake'
    b'in' b'November' b',' b'thus' b'ashore' b'in' b'temperate' b'areas' b',' b'such' b'the' b'sex' b'PS2' b'atmosphere' b'until' b'them' b'.' b'Plunketts' b'Aires' b'risk'
    b'monologue' b',' b'professionalism' b',' b'but' b'their' b'known' b'analyses' b',' b'the' b'coasts' b'of' b'<unk>' b',' b'desert' b',' b'like' b'a' b'<unk>' b'cell'
    b'serving' b'into' b'cell' b'and' b'<unk>' b',' b'are' b'five' b'@.@' b'5' b',' b'(' b'21' b'cm' b'\xc3\x97' b'8' b'@.@' b'5' b'cm' b')'
    b'.' b'The' b'eggs' b'are' b'Web' b',' b'and' b'for' b'wild' b'females' b',' b'each' b'developing' b'on' b'a' b'nominate' b'age' b'will' b'be' b'built'
    b'or' b'unlike' b'48' b'\xe2\x80\x93' b'25' b'.' b'The' b'T30s' b'were' b'all' b'severely' b'dark' b'in' b'carbon' b',' b'fourth' b'of' b'which' b'are' b'able'
    b'to' b'eucalypts' b'.' b'Additionally' b',' b'the' b'waterline' b'including' b'one' b'other' b'mid' b'years' b'he' b'will' b'<unk>' b'it' b'.' b'<eos>' b'The' b'kakapo'
    b"'s" b'cytogenetics' b'are' b'around' b'10' b'%' b'of' b'its' b'documents' b'for' b'assumption' b',' b'and' b'a' b'matter' b'of' b'loud' b'or' b'<unk>' b'is'
    b'scattered' b',' b'and' b'at' b'38' b':' b'20' b'on' b'their' b'wider' b'matter' b',' b'flightless' b'herbivores' b'are' b'killed' b'.' b'On' b'this' b'condition'
    b',' b'when' b'the' b'distribution' b'energy' b'are' b'exploited' b'into' b'if' b'they' b'both' b'exempt' b'it' b'would' b'be' b'eating' b'.' b'According' b'to' b'flightless'
    b'claws' b',' b'this' b'may' b'find' b'place' b'up' b'(' b'leading' b'grevillea' b')' b',' b'which' b'resembles' b'to' b'see' b'it' b'.' b'<eos>' b'If'
    b'she' b'falls' b'from' b'populations' b',' b'they' b'are' b'unable' b'to' b'stay' b'using' b'<unk>' b'.' b'Each' b'cries' b'are' b'dry' b'common' b'reactions' b'as'
    b'very' b'close' b'of' b'935928' b'.' b'Once' b'they' b'do' b'leave' b',' b'may' b'first' b'call' b'also' b'with' b'any' b'other' b'abilities' b'who' b'will'
    b'meet' b'feet' b'.' b'However' b',' b'if' b'stolen' b'their' b'registering' b'legs' b',' b'it' b'may' b'be' b'uncommon' b'.' b'There' b'are' b'also' b'whether'
    b'other' b'species' b"'s" b'education' b'<unk>' b'and' b'can' b'be' b'lost' b'by' b'eastern' b'FA' b'gene' b'sleep' b'so' b'otherwise' b'(' b'response' b'to' b'it'
    b'to' b'<unk>' b'ceremonial' b',' b'or' b'/' b'86' b',' b'so' b'this' b'and' b'an' b'confident' b'version' b'of' b'Yanjing' b')' b'rounded' b'grass' b'colors'
    b'trying' b'to' b'become' b'another' b'underlying' b'flight' b'when' b'they' b'desire' b'is' b'long' b'Fleury' b'.' b'There' b'are' b'typically' b'no' b'difference' b'on' b'either'
    b'or' b'adults' b'.' b'<unk>' b':' b'flock' b'.' b'Therefore' b',' b'Adams' b'considered' b'that' b'abolish' b'may' b'be' b'close' b'to' b'birds' b',' b'so'
    b'each' b'hand' b'were' b'unlike' b'victims' b'of' b'risk' b'.' b'Most' b'individuals' b'female' b'she' b'have' b'pits' b'during' b'distance' b',' b'so' b'the' b'other'
    b'other' b'spots' b'are' b'perfect' b',' b'and' b'when' b',' b'with' b'their' b'opening' b'reading' b',' b'this' b'same' b'flies' b'with' b'an' b'eye' b'between'
    b'<unk>' b'and' b'soul' b'turrets' b',' b'before' b'they' b'usually' b'participate' b'late' b'in' b'a' b'speed' b'room' b'.' b'An' b'organisms' b'may' b'be' b'able'
    b'to' b'exist' b'and' b'is' b'rounded' b'that' b'Ulysses' b'onto' b'1818' b'.' b'As' b'they' b'reduced' b'them' b',' b'and' b'they' b'gather' b'brooch' b'even'
    b'down' b'to' b'frequency' b'.' b'These' b'belief' b'from' b'some' b'ceratopsians' b'rivers' b'were' b'cause' b'as' b'in' b'flight' b'location' b'paths' b'.' b'concluding' b'neither'
    b'method' b',' b'interpreted' b'by' b'7' b':' b'Empire' b',' b'three' b'peaks' b',' b'two' b'or' b'two' b'females' b'thought' b':' b'a' b'armed' b'end'
    b'of' b'about' b'7' b'@.@' b'5' b'g' b'(' b'4' b'@.@' b'0' b'\xe2\x80\x93' b'2' b'in' b')' b';' b'one' b'occurs' b'on' b'defensive' b'conning'
    b',' b'and' b'also' b'have' b'significant' b'spines' b'for' b'light' b',' b'thus' b'so' b'ribosomes' b'of' b'chances' b'who' b'were' b'particularly' b'tightly' b'detached' b'.'
    b'<unk>' b'high' b'@-@' b'floor' b'measurements' b'of' b'flock' b'Shuttle' b'there' b',' b'the' b'sex' b'or' b'breast' b'spots' b'Bicycle' b',' b'strongly' b'mortis' b"'s"
    b'consistent' b'ability' b'to' b'have' b'a' b'accurate' b'range' b'or' b'breast' b'snapping' b'.' b'Males' b'migrate' b'to' b'other' b'birds' b',' b'while' b'modified' b'it'
    b'may' b'frills' b'so' b'in' b'signs' b'due' b'to' b'it' b'.' b'Males' b'performs' b'Omar' b',' b'cycle' b',' b'and' b'pale' b'Eug\xc3\xa8ne' b'nests' b'.'
    b'<eos>' b'The' b'recent' b'kakapo' b'of' b'priests' b'is' b'less' b'children' b'of' b'prey' b'.' b'The' b'same' b'relative' b'technique' b'occurs' b'dating' b'to' b'or'
    b'regulate' b'light' b',' b'and' b'little' b'plating' b',' b'she' b'may' b'begin' b'up' b'other' b'eggs' b'.' b'Furthermore' b',' b'some' b'birds' b'are' b'attributed'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 206.2
    loss: 5.168
    elapsed time (seconds): 105.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.344 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
