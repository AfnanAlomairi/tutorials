.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'assumption' b'from' b'the' b'popularly' b'<unk>' b'.' b'Ross' b'then' b'discussed' b'the' b'first' b'Magic' b'from' b'McMillan' b'himself' b'that' b'year' b',' b'by' b'1907'
    b'.' b'Although' b'it' b'could' b'have' b'serve' b'to' b'establish' b'the' b'pattern' b'of' b'Earth' b',' b'they' b'were' b'unlicensed' b'up' b'presented' b'.' b'The'
    b'9th' b'Division' b'Kern' b'remained' b'in' b'marvelous' b'and' b'died' b'.' b'In' b'1987' b',' b'it' b'was' b'officially' b'a' b'almost' b'year' b'by' b'either'
    b'foundation' b'clues' b'in' b'a' b'innovative' b'era' b'.' b'A' b'2013' b'umpire' b'named' b'unknown' b'75' b'%' b'of' b'47' b'years' b'separated' b'for' b'posture'
    b'worship' b',' b'and' b'the' b'Thames' b'commemorates' b'them' b'and' b'under' b'UFO' b',' b'<unk>' b'(' b'no' b'Japanese' b'poet' b')' b',' b'cheek' b','
    b'<unk>' b';' b'and' b'correct' b'dignitaries' b'.' b'At' b'example' b',' b'its' b'<unk>' b'extending' b'relations' b'throughout' b'the' b'settlement' b'of' b'their' b'orbit' b'<unk>'
    b'.' b'<eos>' b'The' b'center' b'of' b'mass' b'of' b'agricultural' b'teams' b'serves' b'dismasted' b'thousands' b'of' b'shelter' b'may' b'be' b'Randolph' b'broken' b'as' b'geographical'
    b',' b'lose' b'their' b'bills' b'.' b'No' b'study' b',' b'as' b'special' b',' b'and' b'Senator' b',' b'promising' b'is' b'accidentally' b'wrote' b'and' b'yellowish'
    b',' b'onto' b'this' b'side' b'by' b'the' b'process' b'of' b'permit' b',' b'as' b'completely' b'as' b'a' b'warm' b'<unk>' b'of' b'causal' b'art' b'.'
    b'Furthermore' b',' b'even' b',' b'they' b'were' b'<unk>' b'by' b'a' b'planet' b'impressive' b'with' b'white' b'and' b'<unk>' b',' b'so' b'delicate' b'participants' b'are'
    b'brought' b'for' b'the' b'truth' b'.' b'According' b'to' b'their' b'commit' b'admiration' b',' b'several' b'varieties' b'a' b'eleventh' b'atmosphere' b'did' b'not' b'be' b'evacuated'
    b'.' b'This' b'bird' b'sees' b'all' b'of' b'the' b'reasons' b'but' b'occasionally' b'"' b'used' b'September' b'tier' b'"' b'.' b'St' b'galericulata' b'services' b'from'
    b'South' b'Australia' b',' b'when' b'a' b'particular' b'philosopher' b'whereas' b'fertilizers' b'is' b'redesigned' b';' b'tragedy' b'<unk>' b'(' b'Rajeev' b'M.' b'tendagurensis' b')' b'is'
    b'the' b'fifth' b'known' b'heritage' b',' b'who' b'is' b'Wallonia' b'on' b'parrot' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Etymology' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'A' b'vast' b'<unk>' b'individual' b'human' b'species' b'will' b'be' b'seen' b'male' b'treatment' b',' b'<unk>' b'or' b'maintains' b'are' b'much' b'on'
    b'H\xc3\xa4meenmaa' b'up' b'as' b'they' b'are' b'discarded' b'.' b'<eos>' b'In' b'1933' b',' b'it' b'cannot' b'work' b'to' b'<unk>' b'the' b'series' b'of' b'Romani'
    b'to' b'cross' b'legitimate' b'areas' b'who' b'concluded' b'they' b'do' b'.' b'symptoms' b'are' b'known' b'for' b'two' b'assistants' b',' b'mostly' b'to' b'40' b'still'
    b'.' b'rested' b'standards' b'were' b'set' b'to' b'be' b'built' b',' b'such' b',' b'but' b'only' b'evidence' b'and' b'should' b'be' b'develop' b',' b'ribosomal'
    b'populations' b'noted' b'stores' b'for' b'longer' b'trees' b'.' b'Most' b'lines' b'was' b'defined' b'by' b'the' b'Netherlands' b'.' b'It' b'usually' b'enjoyed' b'North' b'Africa'
    b'when' b'others' b'reversing' b'occupies' b'occurring' b',' b'which' b'placed' b'honeyeaters' b'long' b'.' b'They' b'have' b'a' b'low' b'side' b'Regardless' b'between' b'<unk>' b','
    b'CBS' b',' b'<unk>' b',' b'and' b'texture' b'.' b'It' b'has' b'flesh' b'consumes' b'this' b'species' b'of' b'photosphere' b',' b'which' b'may' b'eat' b'cancer'
    b'and' b'are' b'indicate' b'to' b'indicate' b'.' b'Despite' b'the' b'nest' b',' b'David' b'sexpunctatus' b'on' b'Eritrea' b'tower' b'when' b'they' b'did' b'not' b'need'
    b'.' b'To' b'be' b'than' b'this' b'other' b',' b'each' b'other' b'may' b'be' b'trained' b'to' b'increase' b'by' b'charters' b'.' b'If' b'they' b'do'
    b'with' b'it' b'is' b'dissolve' b'as' b'they' b'D.C.' b'attempts' b',' b'which' b'does' b'them' b',' b'they' b'are' b'forced' b'to' b'exist' b'nominally' b'like'
    b'and' b'those' b'less' b'.' b'<eos>' b'Lyrically' b',' b'they' b'are' b'mild' b'to' b'their' b'common' b'grassland' b'and' b'retaining' b'a' b'economic' b'miracle' b'or'
    b'pass' b'zombie' b'.' b'Within' b'instance' b',' b'it' b'has' b'televised' b'average' b'2008' b'even' b'in' b'a' b'long' b'form' b'.' b'Another' b'movement' b'of'
    b'middling' b'moves' b'is' b'usually' b'is' b'worn' b'.' b'They' b'used' b'<unk>' b'disapproval' b',' b'which' b'will' b'also' b'feel' b',' b'but' b'when' b'they'
    b'are' b'tenths' b'from' b'Greek' b'depend' b',' b'fire' b'<unk>' b'is' b'worn' b'and' b'green' b',' b'and' b'their' b'food' b'size' b';' b'as' b'the'
    b'reactions' b',' b'humans' b',' b'says' b'that' b'<unk>' b'flies' b'them' b'to' b'able' b'off' b'this' b',' b'so' b'they' b'little' b'be' b'Vila' b','
    b'thin' b',' b'they' b'will' b'be' b'<unk>' b'in' b'water' b'but' b'may' b'act' b'in' b'.' b'When' b'they' b'rarely' b'undulating' b'comprises' b'strikes' b','
    b'they' b'have' b'immediate' b',' b'as' b'was' b'nuclear' b'Horses' b'produced' b'by' b'slightly' b'natural' b'consciousness' b'.' b'All' b'noisy' b'birds' b',' b'when' b'they'
    b'can' b'be' b'related' b'about' b'<unk>' b',' b'or' b'dense' b'caution' b'childcare' b',' b'may' b'also' b'be' b'riveted' b'since' b'forests' b'.' b'<eos>' b'Without'
    b'successful' b'hospitals' b',' b'G.' b'Moore' b',' b'Xamar' b'axis' b',' b'begin' b'<unk>' b',' b'<unk>' b',' b'Norway' b',' b'<unk>' b',' b'philosophical' b','
    b'<unk>' b'(' b'birds' b'<unk>' b'demonstrate' b'woodland' b')' b'and' b'1701' b'.' b'There' b'are' b'information' b'that' b'<unk>' b'cannot' b'accumulate' b'her' b'hunting' b'neck'
    b'at' b'a' b'nest' b"'s" b'giant' b'will' b'be' b'affected' b'.' b'Once' b'capable' b'of' b'hunting' b'after' b'serious' b'resistance' b',' b'it' b'has' b'improved'
    b'focus' b'on' b'their' b'growing' b'15th' b'toadstool' b',' b'potentially' b'possibly' b'so' b'so' b'somewhat' b'parallel' b'to' b'round' b'control' b'.' b'Creutz' b',' b'envelope'
    b'and' b'wetland' b'slip' b'combined' b'in' b'(' b'10' b'CE' b')' b'154' b'or' b'greater' b'birds' b'(' b'mostly' b'one' b'species' b',' b'as' b'earlier'
    b'crowded' b'the' b'nest' b')' b'or' b'mutations' b'it' b'.' b'Towards' b'least' b'this' b'altered' b'a' b'follicles' b'down' b'at' b'3' b'@,@' b'100' b','
    b'as' b'of' b'freezing' b'to' b'regard' b'the' b'food' b'wings' b'and' b'Crex' b'for' b'winter' b'.' b'Ireland' b'immediately' b'congestion' b'as' b'part' b'of' b'the'
    b'structural' b'population' b'.' b'These' b'metal' b'starlings' b'have' b'just' b'uneventful' b'populations' b',' b'due' b'to' b'such' b'typically' b',' b'they' b'do' b'well' b'@-@'
    b'juveniles' b',' b'whereas' b'for' b'example' b',' b'they' b'said' b'a' b'same' b'down' b'devotion' b'to' b'feed' b'before' b'with' b'<unk>' b'.' b'Yet' b','
    b'heavier' b'models' b'are' b'most' b'trapped' b'.' b'<eos>' b'Lord' b'Pesca' b'faces' b'using' b'theatrically' b'<unk>' b'.' b'her' b'reduction' b'is' b'present' b',' b'and'
    b'rarely' b'Pliny' b',' b'it' b'was' b'polished' b'actions' b'.' b'These' b'resupply' b'beliefs' b'can' b'be' b'seen' b'as' b'they' b'are' b'found' b'levels' b'.'
    b'These' b'salmon' b'birds' b'are' b'Buffalo' b'a' b'different' b'display' b',' b'so' b'also' b'their' b'crust' b'are' b'usually' b'capable' b'of' b'protection' b',' b'which'
    b'near' b'least' b'one' b'young' b'image' b'.' b'As' b'a' b'eye' b',' b'however' b',' b'the' b'pits' b'or' b'open' b'for' b'them' b'.' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'Moment' b'II' b'(' b'inscriptions' b')' b'=' b'<eos>' b'<eos>' b'Florida' b'Lake' b',' b'commonly' b'known' b'as' b'New' b'Zealand' b','
    b'is' b'known' b'by' b'some' b'Sclerodermatineae' b',' b'Iran' b',' b'Newfoundland' b'and' b'sculpture' b',' b'and' b'dedicated' b'into' b'captivity' b'.' b'Judith' b'arrogance' b'.'
    b'Most' b'other' b'scholars' b'correctly' b'with' b'them' b'based' b'east' b'through' b'bombs' b'.' b'These' b'birds' b'have' b'thus' b'associated' b'similar' b'entity' b',' b'not'
    b'severe' b',' b'curved' b'a' b'drier' b'or' b'outer' b'feathers' b'.' b'It' b'have' b'developed' b'soft' b'strategies' b'create' b'those' b'in' b'place' b'and' b'glamorous'
    b'excess' b'.' b'Historically' b',' b'they' b'arrive' b'on' b'were' b'8' b'@.@' b'2' b'%' b'of' b'males' b'Philip' b'females' b',' b'which' b'will' b'be'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 194.0
    loss: 5.168
    elapsed time (seconds): 96.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  58.964 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
