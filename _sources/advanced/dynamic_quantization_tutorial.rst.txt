.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'At' b'the' b'village' b',' b'the' b'bird' b'was' b'split' b'out' b'of' b'a' b'male' b'<unk>' b'its' b'early' b'system' b'in' b'his' b'2006'
    b'season' b',' b'and' b'fighting' b'for' b'one' b'a' b'half' b'of' b'4' b'@.@' b'68' b'(' b'PSH' b'Bodashtart' b')' b',' b'then' b'providing' b'when'
    b'second' b'of' b'these' b'are' b'use' b'.' b'However' b',' b'with' b'a' b'slight' b'deal' b'on' b'6' b'November' b'he' b'took' b'a' b'chord' b'eclipse'
    b',' b'this' b'time' b'for' b'<unk>' b'prosecution' b'in' b'for' b'school' b'.' b'The' b'idea' b'of' b'MTQNN\xca\xbf' b'and' b'blue' b'production' b'was' b'not' b'exposed'
    b'to' b'artists' b'confused' b'by' b'internet' b'punctuation' b'.' b'As' b'a' b'example' b',' b'the' b'water' b'commandment' b'bullets' b'of' b'Escape' b'had' b"'" b'"'
    b'Mama' b'contemporary' b'"' b'<unk>' b'Hibiscus' b'of' b'all' b'.' b'Ed' b"'s" b'Tower' b'soon' b'collaborated' b'in' b'Lil' b'Moines' b',' b'London' b',' b'Boston'
    b'accidentally' b'and' b'shortness' b'happened' b'in' b'a' b'house' b'by' b'<unk>' b'in' b'2013' b'.' b'However' b',' b'in' b'this' b'book' b'incorporated' b'it' b'shortly'
    b',' b'as' b',' b'Plunkett' b'heard' b'this' b'identity' b'.' b'No' b'authors' b'regarded' b'as' b'Dictionary' b'of' b'excommunication' b'.' b'For' b'the' b'<unk>' b'of'
    b'Ulster' b'under' b'terrorist' b'blind' b',' b'the' b'Action' b'found' b'it' b'as' b'a' b'"' b'<unk>' b'voice' b'"' b'.' b'Meaning' b'concluded' b'13' b'%'
    b'more' b'than' b'19' b'compared' b'later' b',' b'and' b'while' b'the' b'aide' b'elements' b',' b'he' b'eventually' b'preferred' b'your' b'next' b'quarter' b'or' b'Randolph'
    b'rose' b'to' b'"' b'kill' b'"' b'lands' b'.' b'<eos>' b'The' b'all' b'leg' b'of' b'heritage' b'in' b'the' b'year' b'in' b'Demokraten' b'were' b'introduced'
    b'to' b'Shakespeare' b'.' b'Though' b'not' b'since' b'artist' b',' b'a' b'close' b'days' b'on' b'October' b'30' b',' b'April' b'2006' b'reported' b'the' b'coast'
    b'comedy' b'of' b'Rob' b'Boom' b'(' b'where' b'awarded' b'like' b'Kirk' b'in' b'February' b'2011' b')' b'.' b'One' b'leaders' b'suffered' b'commander' b'at' b'a'
    b'one' b'@-@' b'fourth' b'trial' b'game' b'it' b',' b'because' b'the' b'edibility' b'rapidly' b'of' b'joint' b'drawbridge' b'makes' b'crushing' b'status' b'without' b'a' b'magnitude'
    b'on' b'a' b'twenty' b'@-@' b'year' b'line' b',' b'which' b'finishing' b'a' b'full' b'one' b'place' b'before' b',' b'in' b'Matthew' b'Hearts' b'weeks' b'.'
    b'Moreover' b',' b'he' b'notes' b'it' b'"' b'the' b'most' b'sensual' b'"' b',' b'"' b'it' b"'s" b'most' b'executed' b'and' b'on' b'collection' b'about'
    b'him' b'"' b'.' b'Shannon' b'Hawkins' b'said' b'they' b'would' b'also' b'be' b'seen' b'if' b'he' b'changed' b'the' b'presence' b'"' b'Come' b'with' b'highly'
    b'interesting' b'contemporaries' b'"' b'.' b'Addicted' b'calling' b'he' b'was' b'assumed' b'on' b'"' b'overblown' b'Eternia' b'"' b',' b'but' b'the' b'film' b'she' b'begins'
    b'budget' b'that' b'there' b'are' b'no' b'planners' b'red' b'and' b'judge' b'there' b'has' b'been' b'the' b'perfect' b'theme' b'that' b'is' b'because' b'Ceres' b'described'
    b'the' b'Dark' b'SF' b'3' b'.' b'But' b'has' b'many' b'points' b'identifying' b'festival' b',' b'it' b'lances' b'the' b'four' b'close' b'scenes' b'of' b'rhythm'
    b',' b'losing' b'for' b'each' b'erroneous' b'as' b'"' b'It' b'"' b',' b'but' b'even' b'in' b'series' b'of' b'the' b'difference' b'that' b'still' b'written'
    b'the' b'fourth' b'\xe2\x80\x93' b'pacifier' b',' b'which' b'he' b'criticized' b'it' b'into' b'the' b'leading' b'Tamil' b'Hermit' b'murderer' b'(' b'could' b'be' b'lightly' b'inside'
    b'up' b'as' b'"' b'the' b'perfect' b'Fausto' b'on' b'a' b'Japanese' b'death' b'"' b'or' b'"' b'so' b'an' b'Rulers' b'of' b'gills' b'"' b')'
    b'.' b'She' b'visited' b'obvious' b'for' b'the' b'poem' b'using' b'explore' b'with' b'Doggett' b"'s" b'prose' b'.' b'The' b'actors' b'typically' b'heard' b'its' b'own'
    b'volume' b':' b'"' b'Sleep' b'girl' b',' b'crystals' b'preceded' b'the' b'sounded' b'of' b'Who' b'.' b'<unk>' b'were' b'conspiracy' b'to' b'make' b'two' b'Networks'
    b'as' b'a' b'whole' b'device' b'known' b'as' b'a' b'orbit' b'nucleotide' b'.' b'"' b'<eos>' b'The' b'reviewer' b'reflected' b'plans' b'for' b'Blofeld' b',' b'noting'
    b'<unk>' b"'s" b'hits' b'on' b'his' b'account' b',' b'which' b'is' b'pretty' b'meaning' b'to' b'not' b'give' b'it' b'confessed' b'.' b'However' b',' b'intentional'
    b'notoriety' b'are' b'herd' b'trademarked' b'by' b'his' b'thin' b'romance' b'.' b'The' b'sister' b'<unk>' b'Ruwan' b'considers' b'it' b'"' b'Cecily' b'"' b',' b'Ceres'
    b',' b'though' b'Ceres' b'was' b'surprised' b'that' b'in' b'only' b'category' b'it' b'"' b'held' b'look' b'"' b'and' b'"' b'help' b'it' b'in' b'<unk>'
    b'agreeing' b'for' b'a' b'phrase' b'.' b'The' b'convict' b'Things' b'for' b'I' b'transcend' b'to' b'"' b'.' b'When' b'Mozart' b'wrote' b'"' b'The' b'best'
    b'Colson' b'"' b'of' b'a' b'ageing' b'event' b'or' b'had' b'"' b'outside' b'something' b'different' b'"' b',' b'though' b'he' b'verdict' b'that' b'"' b'you'
    b'walks' b'are' b'a' b'shocking' b'way' b'"' b'.' b'The' b'character' b',' b'Patrick' b',' b'"' b'When' b'they' b'weren' b"'t" b'like' b'or' b'kind'
    b'never' b'don' b"'t" b'have' b'to' b'Stop' b'What' b'\xe2\x80\x93' b'you' b'was' b'a' b'U\xc3\xad' b'"' b'of' b'your' b'own' b'department' b'.' b'As' b'it'
    b'cannot' b'help' b'on' b'the' b'tis' b',' b'Slayer' b'hunt' b'.' b'<eos>' b'To' b'be' b'viewed' b'on' b'six' b'warriors' b'and' b'man' b'had' b'once'
    b'gone' b'for' b'distances' b',' b'\xc3\x8dmar' b'soon' b'singing' b'the' b'theme' b'over' b'Jeremiah' b'Donald' b'"' b'Wang' b'"' b'1' b',' b'and' b'asserts' b'that'
    b'Hey' b'mating' b'"' b'may' b'be' b'praised' b'with' b'us' b'or' b'death' b'that' b'dissenters' b'itself' b',' b'and' b'they' b'vie' b'under' b'shots' b'for'
    b'soul' b',' b'Sports' b'forms' b'taxa' b'of' b'Allah' b'with' b'enemy' b',' b'during' b'them' b',' b'stood' b'like' b'Edmund' b'metaphor' b'-' b'number' b'was'
    b'specialists' b'a' b'little' b',' b'and' b'confession' b'of' b'alluded' b'to' b'the' b'feeling' b'to' b'determines' b'off' b'so' b'chord' b'/' b'I' b'am' b'ready'
    b'to' b'ensure' b'to' b'a' b'minute' b'.' b'"' b'In' b'last' b'his' b'Sheldon' b',' b'The' b'demon' b'of' b'the' b'kakapo' b'is' b'often' b'fleeting'
    b'to' b'have' b'<unk>' b'variable' b'characters' b'and' b'any' b'plot' b'<unk>' b'that' b'saw' b'several' b'Socialism' b',' b'in' b'which' b'an' b'usefulness' b'may' b'be'
    b'scattered' b'.' b'The' b'populace' b'feed' b'in' b'fact' b'and' b',' b'they' b'are' b'visible' b'.' b'The' b'first' b'creator' b'was' b'burn' b',' b'a'
    b'betaine' b'she' b'sits' b'for' b'gene' b'brawl' b'between' b'a' b'record' b'of' b'other' b'depends' b'to' b'sense' b':' b'all' b'of' b'them' b'however' b','
    b'a' b'experiences' b'at' b'Tonin\xc3\xa1' b'Firebrand' b',' b'was' b'a' b'PR' b'domestic' b'margin' b';' b'the' b'Pistons' b'are' b'unfortunately' b'move' b',' b'while' b'is'
    b'a' b'image' b'of' b'her' b'condition' b',' b'but' b'fights' b'in' b'the' b'response' b'that' b'humans' b'is' b'forced' b'to' b'produce' b'up' b'a' b'cause'
    b'when' b'they' b'are' b'finds' b',' b'by' b'a' b'metaphor' b'which' b'would' b'like' b'or' b'considering' b'much' b'brightness' b'from' b'other' b'types' b'of' b'pumping'
    b'different' b'effects' b'.' b'allow' b'that' b'we' b'do' b'without' b'about' b'any' b'other' b'night' b',' b'at' b'my' b'very' b'distinctive' b'or' b'it' b'very'
    b'reading' b'a' b'male' b'@-@' b'and' b'@-@' b'run' b'unit' b'at' b'higher' b'moves' b'.' b'In' b'most' b'newer' b'culture' b',' b'it' b'seems' b'soft'
    b'reaction' b'.' b'Others' b'make' b'me' b'to' b'expand' b'back' b'in' b'Managerial' b'in' b'general' b'Xinjiang' b',' b'a' b'particular' b'<unk>' b'body' b'where' b'it'
    b'cannot' b'now' b'play' b'demons' b'.' b'The' b'dog' b'pointed' b'her' b'job' b'on' b'a' b'effective' b'lawsuit' b',' b'but' b'the' b'player' b'und' b'bombarding'
    b'a' b'offensive' b'2' b'to' b'2' b'lb' b'.' b'<eos>' b'O' b"'t" b'be' b'difficult' b'to' b'focus' b'on' b'of' b'the' b'military' b'parents' b'while'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 205.5
    loss: 5.168
    elapsed time (seconds): 102.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.923 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
