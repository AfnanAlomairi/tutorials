
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'ideas' b'into' b'quotation' b'the' b'nuclear' b'History' b',' b'diagonal' b',' b'who' b'remained' b'at' b'around' b'470' b'years' b'which' b'retained' b'to' b'Gold' b'.'
    b'The' b'<unk>' b'of' b'full' b'thousand' b'or' b'less' b'writers' b'have' b'document' b'a' b'attendant' b'history' b',' b'Diplocystaceae' b'and' b'artists' b'(' b'for' b'"'
    b'offering' b'to' b'intricate' b'to' b'keep' b'an' b'proposals' b'to' b'a' b'fitting' b'or' b'beautiful' b'hiatus' b'at' b'my' b'feet' b'room' b'"' b')' b'.'
    b'<eos>' b'The' b'battles' b'that' b'Fatu' b"'s" b'transporter' b'<unk>' b'[' b'of' b'previous' b'but' b'widely' b'in' b'"' b'propaganda' b'"' b',' b'Clearmountain' b'describes'
    b'an' b'function' b'with' b'cancer' b'containing' b'back' b'@-@' b'tight' b'Judith' b'a' b'publisher' b'(' b'more' b'than' b'121' b'km' b'per' b'hour' b'(' b'6'
    b'to' b'100' b'\xe2\x80\x93' b'17' b'in' b')' b'.' b'The' b'fewest' b'is' b'based' b'in' b'opinions' b'by' b'Alex' b'grazing' b',' b'which' b'was' b'heavily'
    b'manufactured' b'as' b'killed' b',' b'eventually' b'by' b'the' b'Band' b'35' b':' b'orbits' b'Cardell' b'.' b'<eos>' b'From' b'the' b'1968' b'school' b',' b'Olaf'
    b'wrote' b'the' b'ability' b'for' b'being' b'<unk>' b'.' b'A' b'planet' b'must' b'have' b'been' b'Wheeler' b"'s" b'most' b'popular' b'principles' b'known' b'by' b'<unk>'
    b',' b'Tennessee' b',' b'Aden' b'Madame' b'<unk>' b'procession' b'(' b'Lyla' b')' b'.' b'.' b'Dual' b'Herschel' b'completed' b'named' b'children' b'my' b'role' b'to'
    b'Bachchan' b'.' b"'" b'<unk>' b'<unk>' b'PtF6' b'deposed' b'Agency' b'criticized' b'a' b'"' b'Puzzle' b'connection' b'"' b'for' b'another' b'2' b'@.@' b'2' b'in'
    b'(' b'Berkovi\xc4\x87i' b')' b'.' b'<eos>' b'With' b'Ceres' b'from' b'April' b'24' b',' b'1996' b',' b'a' b'scholarship' b'for' b'sounds' b'in' b'dissolution' b','
    b'a' b'east' b'of' b'<unk>' b'on' b'board' b'.' b'Sacks' b'invited' b'Mariah' b'<unk>' b'of' b'Matt' b'Posse' b',' b'to' b'Geek' b'R' b"'t" b'by'
    b'portal' b'a' b'film' b'and' b'buildings' b'reflecting' b'by' b'a' b'online' b'<unk>' b'.' b'<eos>' b'The' b'Diamandis' b'narrated' b'in' b'1974' b'in' b'a' b'years'
    b'against' b'law' b'in' b'The' b'immediate' b'race' b'is' b'the' b'same' b'negatively' b'and' b'crucial' b'characters' b'that' b'purchased' b'some' b'of' b'a' b'poor' b','
    b'publishing' b'attackers' b',' b'<unk>' b',' b'cross' b',' b'and' b'military' b'novels' b'respectively' b'.' b'"' b'Plunketts' b'Crash' b'"' b'is' b'a' b'recurring' b'planet'
    b',' b'an' b'planet' b',' b'has' b'a' b'pet' b'spillways' b'onto' b'females' b',' b'itself' b'and' b'maternal' b'Gracie' b',' b'revolving' b'Program' b',' b'and'
    b'writing' b'evidence' b'(' b'a' b'232' b'stadium' b'who' b'"' b'must' b'Guillaume' b'kill' b'blackish' b'"' b')' b'and' b'"' b'Let' b'and' b'Rain' b'"'
    b'(' b'Jack' b')' b'"' b'<unk>' b'"' b'(' b'"' b'The' b'Bombay' b'and' b'<unk>' b')' b'"' b',' b'extending' b'in' b'current' b'evidence' b'.'
    b'The' b'Basement' b'lamina' b'describe' b'the' b'game' b'of' b'training' b'commercially' b'on' b'paper' b'making' b'to' b'Allah' b'on' b'a' b'barbarian' b'happened' b',' b'Plymouth'
    b'taken' b'in' b'the' b'1986' b'to' b'her' b'Yucat\xc3\xa1n' b'disk' b'.' b'Houston' b'noted' b'it' b':' b'"' b'The' b'killer' b'of' b'her' b'neck' b'is'
    b'...' b'defends' b'.' b'"' b'expected' b'as' b'"' b'anime' b'Somerset' b"'s" b'Karaboudjan' b'(' b'decent' b'or' b'Reality' b')' b"'" b'<unk>' b'been' b':'
    b'[' b'feet' b']' b'to' b'us' b'sort' b',' b'Reaching' b'logical' b'maat' b',' b'or' b'being' b'@-@' b'esque' b'alongside' b'better' b'help' b'"' b'.'
    b'The' b'inscription' b'are' b'described' b'in' b'1963' b'as' b'they' b'"' b'can' b'not' b'have' b'a' b'lot' b'of' b'familial' b',' b'with' b'a' b'copper'
    b'cycle' b'were' b'a' b'full' b'idea' b'and' b'is' b'that' b'of' b'God' b'"' b',' b'and' b'"' b'it' b'is' b'a' b'natural' b',' b'strange'
    b'"' b'and' b'confessed' b'other' b'airborne' b'areas' b'control' b'in' b'Special' b'.' b'Stevens' b'noted' b'its' b'wish' b',' b'"' b'The' b'head' b'of' b'Choice'
    b'is' b'easier' b'to' b'believe' b',' b'he' b'feels' b'a' b'Southeast' b'bowler' b',' b'final' b'of' b'these' b'features' b',' b'China' b'and' b'23' b'wins'
    b'used' b'up' b'.' b'And' b'they' b"'ve" b'no' b'wish' b'to' b'say' b'in' b'all' b'@-@' b'year' b'or' b'everything' b'because' b'Flash' b'steps' b'cell'
    b'so' b'at' b'derived' b'to' b'spiked' b',' b'enhance' b'brown' b'ties' b'who' b'argues' b'they' b'will' b'identity' b'back' b'from' b'it' b',' b'as' b'not'
    b'taboo' b'authority' b'on' b'the' b'monks' b'that' b'night' b'Won' b"'t" b'didn' b"'t" b'listen' b'to' b"'" b'I' b"'m" b'<unk>' b'Herrera' b',' b'whose'
    b'image' b'was' b'nothing' b'to' b'be' b'truth' b'.' b'filling' b'in' b'the' b'1920s' b'for' b'it' b'of' b'the' b'ballad' b',' b'he' b'is' b'absolutely'
    b'very' b'popular' b'awesome' b';' b'with' b'their' b'dismay' b'and' b'his' b'honeymoon' b'who' b'caught' b'a' b'deal' b',' b'with' b'some' b'beautiful' b'narrator' b'a'
    b'scientific' b'threat' b'all' b'to' b'get' b'only' b'a' b'manga' b'progressing' b',' b'and' b'he' b'moves' b'to' b'meaning' b'Rashid' b'up' b'say' b'determination' b'cannot'
    b'be' b'a' b'sign' b',' b'and' b'take' b'a' b'white' b'baseball' b'hand' b',' b'linesman' b',' b'<unk>' b'calls' b',' b'and' b':' b'Truth' b'\xe2\x80\x94'
    b'I' b'never' b'feel' b'Muldaur' b'where' b'they' b'connect' b'they' b"'d" b'really' b'.' b'Instead' b'[' b'it' b"'ll" b'get' b',' b'you' b"'s" b'truly'
    b'dangerous' b'coach' b',' b'has' b'more' b'shocking' b'Akropolites' b',' b'apparent' b'all' b'time' b'at' b'<unk>' b'families' b'we' b'don' b"'t" b'encode' b',' b"'"
    b'I' b'don' b"'t" b'wanna' b'think' b'to' b'people' b'-' b"'" b'I' b"'m" b'trapped' b'up' b'on' b'Bela\xe1\xb9\xad\xe1\xb9\xadhaputta' b'not' b'.' b'"' b'<eos>' b'<eos>'
    b'=' b'=' b'Twin' b'life' b'=' b'=' b'<eos>' b'<eos>' b'The' b'book' b'was' b'the' b'second' b'string' b'total' b'of' b'#' b'101' b'bonus' b'by'
    b'10th' b'Stone' b',' b'as' b'he' b'sang' b'also' b'after' b'the' b'event' b',' b'placing' b'Life' b'for' b'a' b'combined' b'arm' b'called' b'd' b'Bang'
    b'listed' b'by' b'The' b'novel' b'.' b'Just' b'in' b'a' b'2011' b'tour' b',' b'Vickie' b'da' b'wrote' b'that' b'"' b'I' b'help' b'not' b'Jasper'
    b',' b'such' b'as' b'electricity' b',' b'from' b'all' b'pop' b'to' b'emotion' b'in' b'the' b'world' b'"' b'.' b'S.' b'Ravel' b"'s" b'band' b'commented'
    b'the' b'album' b'of' b'his' b'family' b'refers' b'to' b'Angelou' b"'s" b'experiences' b'with' b'fans' b'of' b'Northampton' b',' b'due' b'to' b'Hornung' b"'s" b'performance'
    b',' b'with' b'"' b'Rosberg' b"'s" b'technical' b'taxi' b'and' b'music' b'"' b'.' b'The' b'song' b"'s" b'ideas' b'was' b'failed' b'by' b'trust' b'<unk>'
    b',' b'Nobody' b'a' b'<unk>' b',' b'police' b'music' b',' b'Sighting' b',' b'Krayot' b',' b'and' b'balance' b'@-@' b'growing' b'system' b'.' b'Among' b'a'
    b'short' b'Roald' b'graphical' b'Tessa' b'of' b'Ulster' b'autism' b'Karel' b',' b'The' b'Viscount' b'left' b'saves' b'from' b'his' b'Olivier' b"'s" b'kick' b'on' b'his'
    b'shirts' b',' b'at' b'a' b'10' b'@-@' b'yard' b'Zombies' b'first' b'tour' b',' b'which' b'two' b'praised' b'modifications' b'from' b'this' b'character' b'in' b'<unk>'
    b'(' b'financially' b'28' b'cars' b'of' b'it' b'hands' b',' b'which' b'and' b'his' b'<unk>' b')' b';' b'and' b'the' b'excessive' b'success' b'of' b'the'
    b'song' b"'s" b'alternative' b'poem' b'liberal' b',' b'they' b'can' b'consistently' b'be' b'difficult' b'by' b'an' b'two' b'@-@' b'game' b'stereotyping' b'.' b'They' b'then'
    b'relaxed' b'purposefully' b'wrinkled' b'.' b'which' b'Stewart' b'drains' b'all' b'of' b'Pat' b'Potter' b'as' b'the' b'nightingale' b"'s" b'adopted' b'electropop' b'evoked' b'+' b'offs'
    b'on' b'his' b'games' b',' b'including' b'Mars' b"'s" b'works' b',' b'were' b'too' b'sure' b'.' b'However' b',' b'Doyle' b'approached' b'alcohol' b'to' b'clothing'
    b'the' b'pressing' b'arc' b',' b'which' b'permitted' b'little' b'feelings' b'to' b'switch' b'to' b'their' b'consorts' b'.' b'Hornung' b'flowed' b'the' b'cost' b'to' b'attempt'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 206.5
    loss: 5.168
    elapsed time (seconds): 101.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.955 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
