
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'the' b'remaining' b'governor' b'of' b'Werneth' b'in' b'another' b'location' b'was' b'still' b'adopted' b'by' b'Mosley' b"'" b'leading' b'<unk>' b'recommended' b','
    b'when' b'as' b'investigating' b';' b'a' b'upset' b'coin' b'of' b'Ceres' b'do' b'not' b'the' b'main' b'bowling' b'of' b'behaviour' b'.' b'Venus' b'contaminated' b'the'
    b'mammal' b'<unk>' b'of' b'the' b'critically' b'legislation' b'in' b'Gielgud' b',' b'emergency' b'for' b'over' b'role' b'.' b'In' b'hospital' b',' b'they' b'vowed' b'the'
    b'kakapo' b'toward' b'<unk>' b'<unk>' b'and' b'BSU' b'.' b'In' b'1961' b'Mosley' b'intercepted' b'that' b'now' b'only' b'in' b'1913' b'.' b'Following' b'time' b','
    b'a' b'six' b'@-@' b'eminent' b'population' b'first' b'focused' b'on' b'the' b'choir' b'so' b'his' b'failure' b'to' b'escape' b'in' b'Winfrey' b',' b'including' b'which'
    b'of' b'their' b'plain' b'drunk' b'took' b'for' b'clandestine' b'the' b'remake' b'of' b'Ezra' b'bombs' b'.' b'<eos>' b'In' b'December' b'1878' b'Walpole' b'reported' b'who'
    b'began' b'for' b'up' b'a' b'local' b'basement' b'in' b'1888' b'.' b'During' b'his' b'age' b'it' b'Assassination' b'his' b'recognized' b'game' b'him' b'in' b'1918'
    b'.' b'<eos>' b'Uprising' b'Xingyi' b'led' b'in' b'renaming' b'suburbs' b'to' b'<unk>' b'a' b'machine' b'@-@' b'metre' b'asteroids' b'can' b'be' b'adapted' b'.' b'However'
    b',' b'<unk>' b'force' b'caused' b'the' b'race' b'and' b'agencies' b'were' b'drew' b'in' b'London' b'.' b'In' b'2012' b',' b'full' b'countries' b'have' b'projected'
    b'Raffles' b'to' b'travel' b'a' b'emotional' b'deal' b'.' b'It' b'is' b'no' b'death' b'that' b'could' b'be' b'settled' b'by' b'their' b'efforts' b'and' b'deny'
    b'him' b'to' b'"' b'contribute' b'.' b'"' b'Boon' b'Berlioz' b'published' b'among' b'outstandingly' b'evidence' b'by' b'satellite' b'contributions' b',' b'increasing' b'<unk>' b'as' b'a'
    b'cultural' b'game' b'.' b'He' b'also' b'entered' b'Australia' b'for' b'the' b'2008' b'election' b'exploring' b'Kyle' b'coach' b'Roosevelt' b'shared' b'these' b'rescue' b'contractual' b'teams'
    b'until' b'about' b'300' b'%' b'of' b'life' b'.' b'Northern' b'fish' b'continued' b'to' b'find' b'the' b'up' b'place' b'of' b'<unk>' b',' b'imitated' b'transits'
    b'.' b'<eos>' b'Another' b'interpretation' b'of' b'Ceres' b'presented' b'lifestyles' b'at' b'a' b'working' b'short' b'race' b'service' b'exist' b'at' b'a' b'specific' b'February' b'14'
    b',' b'in' b'Arkansas' b'.' b'In' b'his' b'defensive' b'role' b',' b'birds' b'took' b'a' b'few' b'high' b'churches' b',' b'under' b'Thomas' b'Gray' b'and'
    b'Charles' b'Douglas' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personal' b'minority' b'statistics' b'=' b'=' b'<eos>' b'<eos>' b'In' b'the' b'second' b'@-@' b'third' b'season'
    b',' b'Omar' b'has' b'preparing' b'one' b'of' b'the' b'most' b'same' b'being' b'important' b'in' b'October' b'.' b'This' b'observations' b'was' b'"' b'incarnation' b'\xe2\x80\x93'
    b'dissenters' b'"' b',' b'Kedok' b'la' b'Bang' b'et' b'was' b'covered' b'by' b'Dennis' b'Meyer' b'Lockheed' b'<unk>' b',' b'a' b'39' b'@.@' b'5' b'sister'
    b'in' b'genealogy' b'influenced' b'with' b'thirty' b'singles' b'found' b'stringent' b'94' b'%' b',' b'like' b'13' b'%' b'per' b'year' b'.' b'In' b'his' b'14'
    b'games' b',' b'Hornung' b'announced' b'the' b'role' b'of' b'Halliwell' b'and' b'the' b'United' b'Kingdom' b'squatters' b'.' b'The' b'academic' b'recipients' b'features' b':' b'<eos>'
    b'Around' b'a' b'number' b'of' b'eight' b'players' b',' b'such' b'a' b'little' b'European' b',' b'uneventful' b'bound' b'planet' b'rating' b'was' b'rarely' b'a' b'almost'
    b'Manufacturers' b'star' b'.' b'If' b'anyway' b'to' b'span' b'this' b',' b'debuting' b'on' b'a' b'normal' b'third' b'March' b',' b'there' b"'s" b'sides' b'assisted'
    b'in' b'all' b'sales' b',' b'of' b'which' b'<unk>' b'Everyone' b',' b'annoying' b'a' b'breaking' b'rating' b'Briain' b',' b'has' b'up' b'a' b'regular' b'first'
    b'down' b',' b'a' b'account' b'of' b'1' b'@.@' b'5' b'in' b'(' b'59' b'@.@' b'3' b'km' b')' b'in' b'water' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Creation' b'=' b'=' b'<eos>' b'<eos>' b'The' b'category' b'of' b'oxides' b'progressed'
    b'to' b'all' b'@-@' b'chicks' b'role' b'and' b'shaped' b'several' b'usefulness' b'.' b'<unk>' b',' b'to' b'the' b'major' b'predators' b'of' b'the' b'orbit' b'was'
    b'not' b'related' b'to' b'poor' b'respected' b'attendees' b'.' b'Later' b',' b'Ireland' b'tried' b'to' b'be' b'isolated' b'to' b'rule' b',' b'little' b'Romanesque' b','
    b'Australian' b',' b'meat' b'or' b'Preston' b'or' b'field' b'by' b'some' b'gradual' b',' b'ideology' b',' b'setbacks' b',' b'and' b'facilities' b'.' b'Following' b'most'
    b'little' b'and' b'inflorescences' b',' b'Miami' b',' b'prefers' b'outside' b'approaches' b'there' b'in' b'his' b'officers' b'on' b'death' b',' b'and' b'<unk>' b',' b'named'
    b'Behr' b'.' b'Ties' b'may' b'mean' b'the' b'distance' b'of' b'the' b'launching' b'when' b'it' b'took' b'controversial' b'matters' b'are' b'scattered' b'.' b'According' b'to'
    b'the' b'fact' b'when' b'in' b'mostly' b'Faulkner' b',' b'they' b'are' b'eventually' b'known' b'to' b'satisfy' b'their' b'concentrate' b'with' b'such' b'inert' b'officers' b'.'
    b'In' b'most' b'way' b'they' b'be' b'able' b'to' b'protect' b'most' b'other' b'designs' b'or' b'the' b'changed' b'.' b'This' b'sit' b'solely' b',' b'community'
    b'makes' b'even' b'the' b'use' b'of' b'planets' b'.' b'Not' b'common' b'435' b'type' b'may' b'be' b'represented' b'as' b'Rascal' b'to' b'their' b'behaviour' b','
    b'trades' b',' b'not' b'banded' b'.' b'The' b'passage' b'could' b'play' b'that' b'they' b'would' b'throw' b'those' b'birth' b',' b'before' b'the' b'\xe2\x80\x98' b'unlock'
    b'a' b'median' b'species' b'on' b'good' b'ground' b',' b'whereas' b'losing' b'items' b'such' b'as' b'bird' b'abuse' b'to' b'their' b'course' b'.' b'The' b'R\xc3\xa9union'
    b'starling' b'follow' b'as' b'an' b'free' b',' b'issues' b'area' b'who' b'was' b'.' b'<eos>' b'Scholar' b'amphibious' b'networks' b'for' b'their' b'volley' b'is' b'fresh'
    b'causing' b'every' b'lack' b'of' b'Fortuna' b'.' b'disassembly' b'may' b'also' b'penetrate' b'fishermen' b'down' b'deciduous' b'males' b',' b'such' b'on' b'C.' b'Winfrey' b'.'
    b'They' b'often' b'attract' b'outside' b',' b'so' b'some' b'billion' b'invertebrates' b'required' b'some' b'eastern' b'cuisine' b'before' b'strengthening' b'consensus' b'.' b'backdrop' b'of' b'philosophy'
    b'have' b'their' b'ability' b'to' b'stop' b'a' b'large' b'<unk>' b'car' b',' b'indicating' b'him' b'.' b'<unk>' b'diagram' b'predators' b'were' b'levelled' b'for' b'for'
    b'half' b'who' b'<unk>' b'just' b'or' b'the' b'eggs' b'are' b'moving' b'longer' b'.' b'<eos>' b'A' b'request' b'forward' b'hath' b'for' b'the' b'nest' b'are'
    b'so' b'fed' b'empty' b'.' b'Both' b'associations' b'before' b'they' b'were' b'also' b'Ch' b'.' b'If' b'they' b'are' b'referenced' b'to' b'all' b'so' b'health'
    b'when' b'they' b'find' b'defence' b'.' b'When' b'induce' b'Boulder' b"'s" b'territory' b',' b'it' b'will' b'have' b'fallen' b':' b'"' b'Hundreds' b'chaotic' b'invasion'
    b'of' b'multiple' b'heroes' b'are' b'no' b'probably' b'decoration' b'should' b'carefully' b'be' b'reconciled' b'after' b'regards' b'to' b'an' b'wide' b'eye' b',' b'and' b'they'
    b'were' b'able' b'to' b'be' b'more' b'relate' b'.' b'The' b'old' b'of' b'these' b'blocks' b'Kaiser' b'is' b'that' b'people' b'caught' b'it' b'force' b'.'
    b'If' b'he' b'was' b'centred' b'from' b'things' b"'" b'in' b'where' b'it' b'is' b'doubts' b'to' b'kill' b'typical' b'<unk>' b'or' b'to' b'compete' b'just'
    b'.' b'He' b'is' b'knew' b'to' b'go' b'the' b'other' b'IFTA' b'family' b'to' b'be' b'.' b'<eos>' b'"' b'The' b'<unk>' b'<unk>' b'of' b'<unk>'
    b'"' b'is' b'deeply' b'that' b'the' b'best' b'ever' b'mayor' b',' b'setting' b'for' b'Goffman' b'.' b'When' b'they' b'rendered' b'varies' b',' b'it' b'was'
    b'placed' b'on' b'9' b'November' b'1643' b',' b'depending' b'on' b'males' b',' b'include' b'either' b'which' b'adds' b'Muslims' b'on' b'the' b'parliament' b'.' b'This'
    b'use' b'has' b'for' b',' b'but' b'it' b'will' b'be' b'a' b'entirely' b'knoll' b'.' b'In' b'a' b'similar' b'way' b'at' b'an' b'time' b','
    b'it' b'is' b'killing' b'to' b'attribute' b'their' b'mating' b'range' b',' b'both' b'stories' b'given' b'commute' b'.' b'This' b'bird' b'is' b'close' b'to' b'those'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.9
    loss: 5.168
    elapsed time (seconds): 106.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  11.827 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
