
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'reached' b'the' b'eye' b'following' b'a' b'special' b'form' b'by' b'<unk>' b'children' b'.' b'The' b'speaker' b'acts' b'for' b'his' b'presence' b'also' b'reopened' b'.'
    b'<unk>' b'slot' b'for' b'a' b'ridiculous' b',' b'Kaimanawa' b'cults' b'for' b'Bob' b'delegates' b'whose' b'deputy' b'division' b'was' b'probably' b'made' b'.' b'RAAF' b','
    b'A' b'known' b'star' b'allowed' b'takeoff' b',' b'believing' b'it' b'"' b'thinks' b'"' b'as' b'Fulfilled' b'who' b'put' b'about' b'31' b'@.@' b'2' b'to'
    b'suitable' b'.' b'On' b'a' b'promotional' b'property' b',' b'Hussey' b'Whitworth' b'the' b'sentences' b',' b'and' b'403' b'narrated' b'Fellow' b'populace' b'.' b'The' b'students'
    b'handled' b'second' b'of' b'her' b'sum' b'after' b'there' b'are' b'their' b'return' b'to' b'life' b'or' b'burned' b'1' b'days' b'that' b'should' b'be' b'powder'
    b'by' b'saving' b'it' b'.' b'staged' b',' b'North' b'Crash' b'drums' b'was' b'backhand' b'@-@' b'tracking' b';' b'they' b'hear' b'this' b'piece' b'are' b'equally'
    b'made' b'in' b'1789' b'.' b'Of' b'Vietnam' b',' b'the' b'global' b'head' b'takes' b'into' b'it' b'was' b'biotrophic' b',' b'companion' b'secluded' b'values' b','
    b'as' b'well' b'as' b'his' b'birth' b'of' b'knot' b'Cooperative' b'I' b'desirable' b'assemblies' b'\xe2\x80\x94' b'by' b'2010' b'Doug' b'Taylor' b'Harold' b'Lindsay' b',' b'Robert'
    b'Welles' b'\xe2\x80\x94' b'a' b'fianc\xc3\xa9e' b'bridge' b'LeBron' b'<unk>' b',' b'and' b'The' b'dissolution' b'of' b'<unk>' b'4' b':' b'7' b',' b'as' b'then' b'"'
    b'could' b'be' b'predictable' b'or' b'Shaotang' b'"' b'.' b'<unk>' b'put' b'the' b'game' b'a' b'trash' b'judge' b'necessary' b'to' b'feature' b',' b'"' b'I'
    b"'m" b'you' b'might' b'disparaging' b'is' b'so' b'enough' b'to' b'find' b'they' b'really' b'move' b'again' b'.' b'"' b'<eos>' b'<eos>' b'<eos>' b'=' b'Banks'
    b'rail' b'=' b'<eos>' b'<eos>' b'Irish' b'Biographers' b'Boom' b'Force' b'!' b'Mitford' b'with' b'Robin' b'Price' b'and' b'Abby' b'announces' b'in' b'a' b'process' b'green'
    b'Kannada' b'union' b'in' b'2004' b'\xe2\x80\x93' b'Hudson' b'.' b'They' b'believed' b'that' b'Gruffudd' b'was' b'traded' b'to' b'<unk>' b'"' b'rather' b'joke' b',' b'than'
    b'in' b'our' b'fresh' b'season' b',' b'so' b'the' b'capability' b'<unk>' b'up' b'little' b'"' b'and' b'"' b'literally' b'even' b'Know' b'@-@' b'very' b'insult'
    b'"' b'.' b'They' b'refused' b'as' b'employed' b'Dog' b'Britain' b'to' b'monitor' b'American' b'plums' b'.' b'They' b'are' b'largely' b'timed' b'due' b'to' b'cheek'
    b',' b'with' b'a' b'gunshot' b'male' b'that' b'enter' b'ground' b'to' b'both' b'food' b',' b'with' b'gameplay' b',' b'numbers' b',' b'and' b'belly' b'.'
    b'The' b'leather' b'environment' b'has' b'a' b'close' b'silver' b'parrot' b',' b'while' b'The' b'male' b'is' b'assigned' b'to' b'a' b'Roman' b'climate' b'over' b'Phoenicia'
    b'for' b'president' b',' b'Ra' b',' b'and' b'all' b'species' b';' b'the' b'book' b'disagreed' b'with' b'a' b'high' b'median' b'long' b'episodes' b'known' b'as'
    b'medicine' b'.' b'The' b'torso' b'was' b'inspired' b'up' b'with' b'Ulster' b'and' b'file' b'.' b'<eos>' b'The' b'water' b'of' b'nobility' b'ruled' b'true' b'in'
    b'ancient' b'sources' b'and' b'some' b'.' b'Inocybe' b'Omar' b'is' b'clearly' b'associated' b'as' b'the' b'head' b'aid' b'in' b'<unk>' b',' b'and' b'when' b'new'
    b',' b'he' b'can' b'depict' b'Lees' b',' b'yet' b'greatly' b'exempt' b'basic' b'prey' b'.' b'Aside' b',' b'the' b'spores' b'habitat' b'greatly' b'takes' b'place'
    b'established' b'.' b'<eos>' b'Ceres' b'die' b',' b'expecting' b'the' b'prototype' b'before' b'Kid' b'Clint' b',' b'S.' b'histones' b',' b'and' b'<unk>' b'vomiting' b'watch'
    b'.' b'There' b'is' b'some' b'references' b'to' b'some' b'speculation' b'of' b'<unk>' b',' b'news' b'times' b',' b'<unk>' b',' b'or' b'support' b',' b'and'
    b'they' b'resemble' b'airspace' b'after' b'more' b'sobriety' b'.' b'He' b'responded' b'using' b'a' b'female' b'of' b'R\xc3\xa9union' b',' b'who' b'grown' b'a' b'very' b'ancestral'
    b'essay' b'\xe2\x80\x94' b'butter' b'.' b'The' b'heads' b'of' b'Stingaree' b'or' b'Mariana' b'are' b'spheres' b'of' b'an' b'symbol' b';' b'visibility' b'for' b'Keene' b','
    b'<unk>' b'.' b'For' b'A' b'strong' b'diameter' b',' b'penetrating' b'in' b'eastern' b'weeks' b'charges' b'are' b'substantially' b'plentiful' b'.' b'<eos>' b'By' b'6' b'years'
    b'of' b'males' b',' b'with' b'both' b'insects' b',' b'<unk>' b',' b'emanating' b'within' b'<unk>' b'in' b'club' b',' b'[' b'Gandhi' b']' b'completely' b'always'
    b'signals' b'Players' b',' b'Pacer' b',' b'or' b'killed' b'Baroness' b'the' b'grid' b',' b'making' b'friend' b'more' b'Thompson' b'and' b'sanctioned' b'them' b'last' b'on'
    b'how' b'is' b'commence' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Track' b'history' b'=' b'=' b'<eos>' b'<eos>' b'As' b'Lieutenant' b'Innocent' b'Scott' b'4' b'@.@'
    b'4' b'manpower' b'(' b'based' b'in' b'spoken' b'Caldecott' b')' b',' b'of' b'her' b'Parisian' b'behaviour' b'of' b'reality' b'(' b'Gabrielle' b',' b'<unk>' b'means'
    b'and' b'eruption' b')' b'the' b'body' b'Inari' b'notes' b'"' b'<unk>' b'with' b'a' b'rich' b'weapon' b'"' b'for' b'the' b'finding' b'.' b'Freyberg' b'"'
    b'Kaufmann' b'"' b'is' b'an' b'criminal' b'element' b'of' b'24' b'birds' b',' b'in' b'where' b'in' b'all' b'recently' b'a' b'move' b'starship' b'of' b"'ll"
    b'this' b'combat' b'or' b'embodied' b'them' b'on' b'their' b'cargo' b'.' b'The' b'bird' b'tables' b'with' b'10' b'arches' b',' b'one' b',' b'a' b'total'
    b'of' b'12' b'varies' b',' b'in' b'looking' b'to' b'remove' b'all' b'the' b'ultimate' b'spiders' b'.' b'Several' b'of' b'the' b'surface' b'on' b'prestigious' b'bias'
    b'are' b'always' b'tested' b'when' b'do' b'suggest' b',' b'air' b'elk' b',' b'goods' b',' b'or' b'ability' b'to' b'attack' b'all' b'of' b'his' b'types'
    b'of' b'sex' b',' b'within' b'example' b',' b'but' b'records' b'an' b'decline' b'of' b'food' b'between' b'Ancient' b'or' b'trees' b'.' b'It' b'is' b'unclear'
    b'with' b'paid' b'color' b'with' b'them' b',' b'meter' b':' b'people' b'showed' b'refers' b'to' b'<unk>' b',' b'also' b'<unk>' b'as' b'she' b'does' b'not'
    b'realize' b'that' b'they' b'were' b'quite' b'nine' b'years' b'after' b'their' b'cave' b'and' b'can' b'be' b'.' b'Real' b'song' b'for' b'typical' b'his' b'lifetime'
    b'as' b'.' b'<eos>' b'Giring' b'<unk>' b'is' b'visible' b'out' b'by' b'clues' b'to' b'crops' b'from' b'visual' b'habitat' b',' b'so' b'destroyed' b'quite' b'@-@'
    b'resistant' b',' b'so' b'he' b'finds' b'this' b'relative' b'head' b'of' b'answers' b'to' b'Australia' b'and' b'with' b'a' b'alarm' b'highly' b'to' b'bluff' b'.'
    b'<eos>' b'In' b'2006' b',' b'two' b'females' b'be' b'found' b'to' b'be' b'treated' b'on' b'males' b'such' b'to' b'their' b'<unk>' b',' b'300' b'million'
    b'Amedeo' b',' b'riders' b',' b'and' b'venom' b'"' b'omnivorous' b',' b'beautiful' b'spitting' b'kind' b'jackets' b'as' b'a' b'bathing' b'"' b'.' b'It' b'is'
    b'thought' b'to' b'have' b'been' b'spotted' b'but' b'formed' b',' b'personally' b'<unk>' b'sexual' b'corridors' b'.' b'They' b'draws' b'Collins' b'and' b'poet' b'culling' b'and'
    b'white' b',' b'while' b'Buchanan' b'often' b'occurs' b'compact' b'personalities' b',' b'as' b'it' b'is' b'rarely' b'unlikely' b'.' b',' b'when' b'ancient' b'features' b'are'
    b'picked' b',' b'there' b'are' b'12' b'bird' b'females' b'debut' b'there' b'.' b'acknowledged' b'for' b'a' b'dark' b'association' b'between' b'Dreyfus' b',' b'improvement' b','
    b'and' b'other' b'images' b',' b'before' b'each' b'are' b'allowed' b'a' b'sexually' b'good' b'while' b'he' b'does' b'not' b'portray' b'any' b'other' b'bite' b'.'
    b'The' b'remaining' b'female' b'if' b'/' b'Fricke' b'where' b'she' b'occur' b'in' b'various' b'animal' b'texts' b',' b'it' b'is' b'blamed' b',' b'and' b'possibly'
    b'pressing' b'hunting' b'from' b'the' b'lives' b',' b'as' b'well' b',' b'it' b'can' b'accept' b'food' b'history' b'formal' b'shots' b'T.' b'Swift' b',' b'<unk>'
    b'(' b'b' b')' b'to' b'add' b'a' b'wound' b'series' b'.' b'Three' b'vogue' b'are' b'recaptured' b'by' b'smell' b':' b'"' b'B' b'@-@' b'This'
    b'tipped' b'intelligence' b'them' b'.' b'"' b'Among' b'his' b'huge' b'conception' b',' b'when' b'it' b'is' b'known' b'to' b'cater' b'to' b'becoming' b'surprised' b'up'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.2
    loss: 5.168
    elapsed time (seconds): 113.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  37.296 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
