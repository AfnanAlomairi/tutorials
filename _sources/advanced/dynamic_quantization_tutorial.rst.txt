.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'sought' b'or' b'to' b'be' b'used' b'to' b'experiment' b'a' b'female' b',' b'exciting' b',' b'<unk>' b'or' b'vertical' b'.' b'The' b'pair' b'was'
    b'also' b'permitted' b'to' b'marry' b'the' b'quality' b'of' b'\xef\xbb\xbf' b'and' b'Odaenathus' b',' b'often' b'disappeared' b'Celia' b'engineering' b'.' b'It' b'is' b'possible' b'to'
    b'be' b'prohibited' b'by' b'Stevens' b',' b'256' b'technology' b',' b'capable' b'of' b'Yu' b'in' b'Sweden' b',' b'and' b'"' b'October' b'7' b',' b'1981'
    b',' b'study' b',' b'and' b'<unk>' b'"' b'.' b'A' b'more' b'recent' b'number' b'Mercury' b'School' b'is' b'introduced' b'for' b'woodlands' b'to' b'the' b'murder'
    b'of' b'occasional' b'areas' b'and' b'Geetha' b'remain' b'according' b'to' b'Sandwich' b'English' b',' b'and' b'a' b'smaller' b'convinces' b'were' b'discontinued' b'during' b'the' b'game'
    b'.' b'In' b'their' b'War' b'Air' b'History' b',' b'it' b'was' b'short' b'that' b'applied' b'about' b'the' b'2007' b'conventions' b',' b'made' b'by' b'the'
    b'other' b'six' b'older' b'cities' b'listed' b'drive' b'in' b'A' b'<unk>' b',' b'and' b'in' b'common' b'species' b',' b"'" b'etc' b',' b'normally' b'rape'
    b'low' b'violence' b'(' b'<unk>' b')' b',' b'<unk>' b',' b'50' b'@-@' b'toxic' b'museum' b'and' b'cheering' b'and' b'Rodrigues' b'dictator' b'<unk>' b'.' b'<eos>'
    b'The' b'birds' b'were' b'hollow' b'by' b'<unk>' b',' b'and' b'are' b'formally' b'able' b'to' b'make' b'tin' b'among' b'them' b'during' b'Marauders' b'due' b'to'
    b'the' b'species' b'.' b'With' b'people' b',' b'it' b'would' b'be' b'his' b'player' b'controlled' b'by' b'<unk>' b'or' b'<unk>' b',' b'which' b'supported' b'it'
    b'soon' b'.' b'In' b'1890' b',' b'the' b'<unk>' b'version' b'of' b'reagent' b'is' b'commonly' b'colder' b'.' b'The' b'+' b'Zealand' b'governmental' b'provinces' b'can'
    b'also' b'begin' b'to' b'feel' b'B\xc3\xacnh' b'traditions' b'without' b'surveyed' b'habitats' b'of' b'birds' b'on' b'ancient' b'Mexican' b'costume' b'peoples' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'Influences' b'revival' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b'is' b'classified' b'only' b'from' b'eukaryotes' b'the' b'v.' b'English'
    b'Temple' b'is' b'soon' b'rebelled' b'.' b'The' b'network' b'of' b'municipal' b'starling' b'analysis' b'is' b'divided' b'heavily' b'with' b'NHC' b',' b'which' b'was' b'downgraded'
    b'to' b'myth' b'about' b'a' b'sub' b'@-@' b'year' b'organization' b',' b'a' b'small' b',' b'<unk>' b',' b'religious' b'animal' b'or' b'branch' b',' b'connecting'
    b'well' b'costly' b'nesting' b'features' b'throughout' b'the' b'common' b'Scandinavian' b'regions' b'35' b'.' b'Overall' b',' b'some' b'largest' b',' b'aircraft' b'shall' b'be' b'observed'
    b'as' b'the' b'North' b'SF' b'.' b'<eos>' b'Panzer' b'starlings' b'develop' b'their' b'common' b'stop' b'and' b'vipers' b',' b'after' b'they' b'can' b'emit' b'how'
    b'they' b'might' b'be' b'forgotten' b'.' b'It' b'may' b'be' b'cut' b'to' b'fruit' b',' b'usually' b'as' b'they' b'were' b'varied' b'.' b'One' b'defining'
    b'former' b'heat' b'chapter' b',' b'particularly' b'thick' b',' b'are' b'fewer' b'knight' b'kicked' b'with' b'very' b'equal' b'diseases' b',' b'showing' b'multiple' b'Welles' b'.'
    b'The' b'missing' b'starling' b'levels' b'was' b'denied' b'to' b'scientifically' b',' b'and' b'rock' b'altitudes' b'fell' b'on' b'when' b'they' b'can' b'be' b'completely' b'religious'
    b'.' b'The' b'orbit' b'of' b'remain' b',' b'environmental' b'or' b'low' b'dwarfs' b'relation' b'to' b'place' b'.' b'As' b'it' b'arranged' b'into' b'known' b'male'
    b'structures' b',' b'they' b'can' b'be' b'differentiated' b'for' b'Japanese' b'courses' b'.' b'<unk>' b'that' b'they' b'liked' b'conservation' b'bones' b',' b'court' b'and' b'moisture'
    b';' b'they' b'may' b'be' b'used' b'to' b'be' b'distinguished' b'in' b'non' b'@-@' b'spored' b'.' b'Unlike' b'his' b'breast' b',' b'lacking' b'the' b'number'
    b'of' b'local' b'Santos' b',' b'with' b'more' b'observations' b'they' b'never' b'eat' b'.' b'In' b'South' b'Africa' b',' b'such' b'as' b'closure' b',' b'Cuba'
    b'limited' b'themes' b'against' b'a' b'catalogue' b'eclipse' b',' b'and' b'their' b'<unk>' b'gradually' b'<unk>' b'breeding' b'during' b'he' b'Horus' b'Berkshire' b'.' b'In' b'without'
    b'runoff' b'Maya' b',' b'it' b'does' b'not' b'prove' b'that' b'the' b'bird' b'of' b'urge' b'wild' b'or' b'complications' b',' b'due' b'to' b'a' b'young'
    b'object' b'of' b'Geastrum' b',' b'especially' b'to' b'find' b'the' b'creation' b'of' b'their' b'control' b'.' b'Kreeft' b'molecules' b'often' b'will' b'need' b'from' b'getting'
    b'an' b'variety' b'of' b'long' b'Ranch' b'ghat' b',' b'which' b'most' b'no' b'agricultural' b'crops' b'occurred' b'in' b'common' b'airfields' b',' b'keeping' b'it' b'over'
    b'little' b'brood' b'dimensions' b'.' b'<eos>' b'C.R.U.S.H.' b'occurs' b'by' b'earth' b',' b'for' b'example' b',' b'foraging' b'up' b'by' b'<unk>' b',' b'or' b'distinct'
    b'sized' b'herpes' b',' b'although' b'it' b'is' b'also' b'believed' b'that' b'some' b'lacks' b',' b'<unk>' b'and' b'Diarmata' b'.' b'Gladstone' b'is' b'also' b'starting'
    b'into' b'310' b'seconds' b'on' b',' b'can' b'garner' b'to' b'one' b'when' b'the' b'urine' b'will' b'be' b'stopped' b'at' b'<unk>' b'.' b'Wyatt' b'realised'
    b'that' b'the' b'only' b'task' b'of' b'plants' b'take' b'as' b'pair' b'of' b'birds' b',' b'which' b'are' b'probably' b'known' b'to' b'attract' b'modern' b'deities'
    b'by' b'a' b'overall' b'vertical' b'Australian' b'species' b'that' b'they' b'were' b'less' b'adults' b'to' b'complain' b',' b'may' b'have' b'bin' b'or' b'clinch' b'greater'
    b',' b'<unk>' b',' b'may' b'exactly' b'a' b'significant' b'nest' b'or' b'draped' b'.' b'Unlike' b'those' b'do' b'not' b'die' b'for' b'eating' b'their' b'nests'
    b',' b'it' b'is' b'poisonous' b',' b'forcing' b'their' b'two' b'streaks' b'marking' b'across' b'males' b'.' b'Later' b'work' b'cover' b'her' b'composition' b'to' b'extend'
    b'back' b'.' b'Some' b'seed' b'species' b'were' b'also' b'nominated' b',' b'eroded' b'by' b'locally' b'@-@' b'movements' b'.' b'The' b'hooded' b'legs' b'can' b'be'
    b'their' b'record' b'.' b'Females' b'are' b'present' b'with' b'limited' b'oxygen' b',' b'they' b'account' b',' b'can' b'made' b'one' b'hand' b'.' b'Because' b'females'
    b'believed' b'in' b'Ireland' b'.' b'The' b'name' b'of' b'layout' b'have' b'some' b'problems' b'that' b'it' b'measures' b'another' b'state' b'or' b'hand' b'.' b'This'
    b'behaviour' b'turns' b'to' b'more' b'spreading' b'eggs' b',' b'by' b'particular' b'or' b'structural' b',' b'because' b'cannot' b'continue' b'her' b'and' b'warning' b'filaments' b'he'
    b'impressed' b'in' b'a' b'sewage' b'gravestone' b'.' b'<unk>' b'males' b"'re" b'smaller' b',' b'and' b'bite' b'do' b'not' b'do' b'so' b'.' b'All' b'realized'
    b'they' b'turned' b'enough' b'further' b'(' b'for' b'Inari' b'as' b'one' b'of' b'50' b'lines' b'of' b'finding' b'birds' b')' b':' b'found' b'much' b'of'
    b'diameters' b'(' b'SF' b'and' b'falsified' b'Pictish' b'versa' b')' b'and' b'the' b'type' b'of' b'Mars' b'is' b'Expert' b'(' b'mastering' b')' b'.' b'Other'
    b'often' b'selection' b',' b'Hairan' b'cricketing' b'<unk>' b',' b'<unk>' b'(' b'Arabic' b')' b',' b'and' b'nectar' b'.' b'<eos>' b'Against' b'brain' b'trees' b'flight'
    b'Keeper' b'of' b'India' b',' b'B' b'plumage' b'and' b'animal' b',' b'Rysher' b'or' b'sensitive' b'methods' b'associated' b'identities' b'.' b'Borrowed' b'producing' b'an' b'high'
    b'insular' b'species' b',' b'<unk>' b',' b'knives' b',' b'Friendly' b'<unk>' b',' b'Wadsworth' b'mammalian' b'and' b'<unk>' b'on' b'the' b'ground' b',' b'before' b'the'
    b'eggs' b'by' b'over' b'40' b'ft' b'565' b'years' b'away' b'.' b'Common' b'splicing' b'videos' b'are' b'brownish' b'used' b'before' b'and' b'on' b'around' b'with'
    b'6' b'million' b'can' b'Ishmaelites' b'.' b'Therefore' b',' b'some' b'of' b'them' b'more' b'weaker' b'viper' b'puddle' b'trough' b'(' b'DDoS' b'<unk>' b'(' b'literally'
    b')' b',' b'the' b'likely' b'eggs' b'.' b'Because' b'The' b'<unk>' b'forced' b'Ceres' b',' b'even' b'depending' b'on' b'sheets' b',' b'their' b'<unk>' b'was'
    b'rufipes' b'<unk>' b'.' b'A' b'night' b'much' b'meant' b'that' b'anything' b'of' b'his' b'dense' b'body' b'letters' b'were' b'transcribed' b'.' b'Although' b'not' b'beneficial'
    b'slip' b',' b'at' b'Marsh' b'in' b'particular' b',' b'they' b'have' b'their' b'position' b'as' b'to' b'have' b'it' b'may' b'propose' b'<unk>' b'.' b'dreamed'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.5
    loss: 5.168
    elapsed time (seconds): 104.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  9.060 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
