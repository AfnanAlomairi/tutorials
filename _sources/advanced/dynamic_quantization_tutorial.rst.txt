
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'Gallipoli' b'=' b'In' b'1840s' b'a' b'North' b'American' b'<unk>' b'detachment' b'sociologists' b'could' b'be' b'replaced' b'by' b'subsequent' b'Time' b',' b'<unk>' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'two' b'common' b'series' b'in' b'Mexico' b'(' b'cats' b')' b'is' b'built'
    b'.' b'<eos>' b'Sixty' b'Zionism' b'are' b'host' b'in' b'1121' b'such' b'as' b'antelopes' b',' b'<unk>' b',' b'migration' b',' b'color' b',' b'assailed' b','
    b'finally' b'<unk>' b'white' b'areas' b'.' b'Then' b',' b'km' b',' b'it' b'has' b'already' b'New' b'Zealand' b'since' b'the' b'United' b'States' b'in' b'1977'
    b',' b'and' b'in' b'2005' b'emplacements' b'were' b'moved' b'to' b'shoot' b'posters' b'but' b'in' b'winter' b'they' b'were' b'repelled' b'.' b'Hurricane' b'Fresno' b'became'
    b'ver' b'as' b'of' b'2015' b'be' b'present' b'as' b'riding' b',' b'from' b'1920' b',' b'ear' b'Batou' b',' b'and' b'Steam' b'Ensemble' b'as' b'Rio'
    b'II' b',' b'paler' b'sense' b',' b'and' b'extensive' b'nucleus' b'states' b'up' b'to' b'regions' b'.' b'A' b'male' b'model' b'of' b'common' b'genus' b'is'
    b'considered' b'enlarged' b'.' b'Bangkok' b'Ben' b'Walton' b'Edwards' b'wrote' b'that' b'this' b'occurrence' b'could' b'be' b'seen' b'a' b'105' b'metres' b'(' b'2' b'@.@'
    b'8' b'mi' b')' b'to' b'add' b'as' b'it' b'approaches' b'view' b'for' b'the' b'face' b'and' b'incidentally' b'of' b'hours' b',' b'but' b'women' b'should'
    b'be' b'drinking' b'to' b'be' b'<unk>' b'.' b'In' b'8000' b'areas' b',' b'<unk>' b',' b'its' b'bronze' b'work' b',' b'libel' b',' b'concerns' b'or'
    b'occupy' b'failed' b'from' b'pectoral' b'bird' b'low' b'.' b'<eos>' b'The' b'similar' b'population' b'of' b'proteins' b'is' b'collected' b'in' b'Ireland' b'.' b'The' b'piety'
    b'is' b'its' b'garden' b'and' b'fulfil' b'in' b'any' b'picnic' b',' b'ending' b'the' b'<unk>' b'between' b'<unk>' b'and' b'Great' b'Republic' b'zone' b',' b'and'
    b'their' b'cutscenes' b'were' b'not' b'safe' b'.' b'In' b'the' b'coastal' b'winter' b',' b'it' b'has' b'high' b'protection' b'offerings' b'where' b'tend' b'to' b'treat'
    b'her' b'attractive' b'happened' b'.' b'It' b'was' b'loudly' b'by' b'overblown' b'clusters' b'and' b'electric' b'changes' b'in' b'winter' b'.' b'A' b'number' b'of' b'outlets'
    b'under' b'predators' b'include' b'reduced' b'Amanita' b'Xook' b',' b'which' b'are' b'recorded' b'to' b'imply' b'microscopically' b'.' b'Its' b'<unk>' b'promyelocytic' b'trainer' b'reveals' b'0600'
    b'outnumbered' b'proteins' b'and' b'Chemical' b'servitude' b'for' b'a' b'association' b'on' b'<unk>' b',' b'topical' b',' b'and' b'<unk>' b',' b'outside' b'publications' b',' b'as'
    b'some' b'as' b'on' b'4' b'@.@' b'8' b'million' b'that' b'level' b'in' b'the' b'Scottish' b'walls' b':' b'it' b'is' b'possible' b'to' b'be' b'considered'
    b'if' b'they' b'feed' b'until' b'modern' b'.' b'They' b'do' b'not' b'run' b',' b'represent' b'them' b'happening' b'for' b'them' b'.' b'Males' b'were' b'confused'
    b'as' b'surrounding' b'up' b'<unk>' b'contrast' b'moved' b'to' b'Ireland' b'.' b'Passing' b'its' b'full' b'guide' b'is' b'more' b'spurred' b',' b'more' b'than' b'more'
    b'spherical' b'effects' b'dies' b'.' b'<eos>' b'However' b',' b'despite' b'vinegar' b',' b'they' b'do' b'not' b'use' b'aided' b'a' b'planet' b'when' b'they' b'contain'
    b'them' b'.' b'By' b'1873' b',' b'it' b'may' b'continue' b'to' b'have' b'been' b'kakapo' b'.' b'Of' b'lesser' b',' b'microscope' b'rates' b'was' b'able'
    b'to' b'have' b'more' b'thin' b'different' b'types' b',' b'but' b'Witchcraft' b"'s" b'environments' b'has' b'also' b'evolved' b'shootings' b'and' b'several' b'seconds' b'of' b'substances'
    b'did' b'not' b'unlock' b'it' b'.' b'Shiva' b'Alvarez' b'Bennett' b'is' b'known' b'as' b'President' b'of' b'Cambridge' b'(' b'St' b'<unk>' b')' b',' b'known'
    b'as' b'nearby' b'cheap' b'waste' b'characteristics' b'(' b'pronounced' b'0' b'evolved' b'of' b'Arabic' b')' b'.' b'It' b'represents' b'wild' b'at' b'night' b'and' b'containing'
    b'a' b'competition' b'they' b'feed' b'hostile' b'when' b'they' b'<unk>' b'they' b'heard' b'all' b'more' b'bet' b'.' b'The' b'communities' b'will' b'prefer' b'Z.' b'Power'
    b',' b',' b'with' b'any' b'other' b'predators' b'that' b'could' b'sit' b'around' b'1' b'mature' b',' b'coupled' b'as' b'it' b'may' b'discover' b'.' b'Two'
    b'\xe2\x98\x89' b'figure' b'.' b'Unlike' b'example' b',' b'they' b'constitute' b'the' b'desired' b'parrot' b'image' b'stated' b'that' b'to' b'add' b'it' b'to' b'every' b'Enriquillo'
    b',' b'when' b'<unk>' b'of' b'it' b'contains' b'building' b'eggs' b'<unk>' b'on' b'their' b'shoulders' b'at' b'times' b'and' b'even' b'trans' b'because' b'they' b'do'
    b',' b'they' b'do' b'so' b'and' b'good' b'in' b'they' b'Aguda' b'.' b'An' b'large' b'identification' b'visible' b'during' b'<unk>' b',' b'which' b'gives' b'the'
    b'transcription' b'of' b'a' b'unique' b'tooth' b'.' b'This' b'claim' b',' b'by' b'turn' b'present' b',' b'you' b'requires' b'their' b'southeast' b'of' b'its' b'vacuum'
    b'engineers' b',' b'<unk>' b'gorgeous' b',' b'and' b'oxygen' b'Consolidated' b'varying' b'dilapidated' b'.' b'jiu' b'males' b'\xe2\x80\x94' b'which' b'began' b'or' b'lingering' b'level' b','
    b'Monte' b'Possible' b'be' b'on' b'the' b'island' b'.' b'This' b'vegetation' b'may' b'be' b'replaced' b'by' b'the' b'common' b'nucleus' b'and' b'so' b'progressing' b'into'
    b'a' b'Camp' b'.' b'These' b'attention' b'are' b'depressing' b',' b'with' b'the' b'large' b'population' b'of' b'beds' b'throughout' b'a' b'navigational' b'human' b'between' b'universe'
    b'.' b'continuous' b'ancient' b'abilities' b',' b'roost' b',' b'kitsune' b',' b'O.W.C.A.' b',' b'laser' b',' b'dense' b',' b'and' b'ground' b'can' b'have' b'lost'
    b'her' b'environment' b'and' b'even' b'technique' b'a' b'way' b'to' b'discover' b'.' b'About' b'transplant' b',' b'Ms.' b'Ward' b'was' b'always' b'left' b'a' b'insulting'
    b'planet' b'because' b'<unk>' b'introduced' b'second' b'of' b'well' b'or' b'vintage' b'trees' b',' b'such' b'as' b'P.' b'.' b'It' b'may' b'be' b'fitted' b'in'
    b'Heartbreak' b'Hale' b',' b'and' b'WHO' b'Midwest' b'Polish' b'<unk>' b'discussions' b'nearly' b'resulted' b'at' b'the' b'Organization' b'@-@' b'<unk>' b'.' b'This' b'displays' b'examples'
    b'on' b'high' b'sculpted' b'in' b'case' b',' b'and' b'not' b'as' b'one' b'species' b'with' b'Trotternish' b'that' b'resulted' b'.' b'The' b'kakapo' b'stimulation' b'a'
    b'effort' b'to' b'describe' b'small' b'reactions' b'concludes' b'within' b'the' b'Roman' b',' b'Republic' b'of' b'rain' b'to' b'negotiate' b',' b'while' b'most' b'with' b'increasing'
    b'or' b'Silver' b'as' b'they' b'lived' b'30' b'kilometres' b'(' b'20' b'ft' b')' b'of' b'habitat' b'.' b'Damage' b'gradually' b'humiliation' b'the' b'intermediate' b'breeding'
    b'eye' b',' b'sometimes' b'at' b'outskirts' b'after' b'one' b'layers' b'.' b'In' b'first' b'areas' b',' b'decoration' b'also' b'appears' b'and' b'precise' b'when' b'this'
    b'made' b'breaking' b'greater' b'@-@' b'frequency' b'substances' b'.' b'Along' b',' b'it' b'concentrated' b'in' b'fish' b'and' b'is' b'raised' b'by' b'common' b'types' b'and'
    b'sculpture' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'has' b'been' b'large' b'by' b'lesser' b'astronomers' b'with' b'its'
    b'carbon' b'object' b',' b'and' b'may' b'be' b'compared' b'to' b'their' b'leg' b'causes' b'in' b'<unk>' b'or' b'mainland' b':' b'The' b'planet' b"'s" b'majority'
    b'of' b'entertainment' b'properly' b',' b'the' b'subsequent' b'produces' b'five' b'@-@' b'pitched' b'scramble' b'.' b'In' b'the' b'spectral' b'nearby' b'Mumps' b',' b'subtle' b'food'
    b'(' b'revolving' b'or' b'International' b')' b'steady' b'forms' b'from' b'a' b'red' b'database' b'.' b'The' b'kakapo' b'vary' b'near' b'his' b'large' b'two' b'immediately'
    b'medieval' b'<unk>' b',' b'found' b'sufficiently' b'a' b'very' b'remarkable' b'and' b'red' b'than' b'the' b'other' b'hand' b'.' b'bounds' b'nearby' b'from' b'1' b'million'
    b'lengths' b',' b'when' b'it' b'leaves' b'estimated' b'on' b'up' b'by' b'three' b'birds' b'.' b'Although' b'they' b'color' b'headed' b',' b'they' b'will' b'be'
    b'carved' b'Country' b',' b'and' b'plight' b'of' b'the' b'female' b'may' b'process' b'off' b'.' b'There' b'are' b'33' b'more' b'hostile' b'gene' b'bird' b','
    b'wrapping' b'involving' b'a' b'inside' b'of' b'native' b',' b'component' b'capable' b'of' b'most' b'capable' b'of' b'structures' b'.' b'Common' b'starlings' b'yellow' b'female' b'are'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.6
    loss: 5.168
    elapsed time (seconds): 116.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  27.715 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
