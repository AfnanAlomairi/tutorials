
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'short' b'thousands' b'of' b'evidence' b'Mentmore' b';' b'in' b'particular' b',' b'he' b'telluride' b'an' b'cabinet' b'care' b'to' b'begin' b'a' b'chord' b'Templar' b'for'
    b'a' b'church' b',' b'to' b'friend' b'Song' b',' b'a' b'8' b'@-@' b'grade' b'<unk>' b',' b'the' b'association' b'between' b'The' b'common' b'sound' b'which'
    b'came' b'the' b'<unk>' b'getaway' b'and' b'laboratories' b'Old' b'Christi' b'\xe2\x80\x93' b'in' b'<unk>' b'\xe2\x80\x93' b'907' b'(' b'simply' b'realistic' b'Nambu' b')' b':' b'a'
    b'Shyam' b',' b'The' b'latter' b'of' b'all' b'of' b'the' b'three' b'@-@' b'west' b',' b'd4' b',' b'Ruler' b',' b'and' b'<unk>' b'.' b'He'
    b'was' b'the' b'final' b'to' b'break' b'with' b'the' b'Quan' b'Development' b'Field' b'as' b'a' b'single' b'percentage' b',' b'more' b'than' b'even' b'a' b'relationship'
    b'off' b'producers' b'for' b'fiction' b'.' b'The' b'regiment' b'movements' b'<unk>' b',' b'but' b'this' b'was' b'deeply' b'appreciated' b'to' b'explain' b'.' b'This' b'and'
    b'history' b'have' b'Andorian' b'tools' b',' b'albeit' b'and' b'unwieldy' b'with' b'slow' b'narrative' b'Krueck' b'.' b'The' b'following' b'year' b',' b'they' b'were' b'equivalent'
    b'.' b'That' b'year' b'they' b'contained' b'known' b'a' b'vast' b'fortress' b'to' b'conduct' b'him' b'on' b'a' b'mosaic' b'<unk>' b',' b'<unk>' b',' b'and'
    b'art' b'instead' b'of' b'the' b'Ulster' b'<unk>' b'<unk>' b'(' b'<unk>' b'I' b')' b'opening' b'or' b'<unk>' b'(' b'<unk>' b')' b'@-@' b'<unk>' b'"'
    b'(' b'<unk>' b'the' b'400' b'Most' b'sensation' b'"' b')' b'and' b'tame' b'a' b'younger' b'filled' b'pattern' b'true' b'that' b'into' b'his' b'work' b'.'
    b'For' b'example' b',' b'it' b'is' b'not' b'concerned' b'to' b'make' b'human' b'interests' b'curator' b'while' b'young' b',' b'and' b'his' b'<unk>' b'share' b'seven'
    b'public' b'<unk>' b'.' b'The' b'attempt' b'of' b'it' b'are' b'<unk>' b',' b'soon' b'moving' b'in' b'both' b'more' b'active' b'hands' b',' b'which' b'is'
    b'Cornic' b',' b'and' b'"' b'265' b'@-@' b'best' b'plants' b';' b'too' b'pretty' b'<unk>' b'.' b'"' b'Lessing' b'helped' b'the' b'actual' b'trend' b'as'
    b'an' b'extraordinary' b'dual' b'outline' b'of' b'Ishmael' b'.' b'Cheaper' b'meanwhile' b'such' b'on' b'Italian' b'monarchs' b',' b'Ireland' b',' b'Joan' b'III' b',' b'claimed'
    b'on' b'best' b'mode' b',' b'<unk>' b'couplets' b'being' b'told' b'to' b'be' b'killed' b'.' b'Safety' b'reports' b'and' b'programs' b'could' b'find' b'sustained' b'amateur'
    b'power' b',' b'particularly' b'simply' b'in' b'1643' b'.' b'<unk>' b',' b'optional' b',' b'friends' b',' b'unit' b'<unk>' b',' b'arriving' b'peaked' b'at' b'<unk>'
    b',' b'and' b'the' b'most' b'rules' b'year' b'by' b'treason' b',' b'the' b'eggs' b',' b'Jenice' b',' b'and' b'pigs' b'may' b'be' b'dismissed' b'to'
    b'the' b'extraction' b'of' b'the' b'masts' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Middle' b'languages' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of'
    b'the' b'Universal' b'Geological' b'Survey' b'that' b'<unk>' b'would' b'be' b'patronym' b'to' b'rejoin' b'Reubens' b'being' b'attributed' b'to' b'erase' b'its' b'main' b'size' b'to'
    b'obstruct' b'his' b'actual' b'planet' b',' b'an' b'sense' b'of' b'permanent' b'common' b'forces' b'is' b'called' b'chasing' b'.' b'This' b'attempted' b'to' b'be' b'praised'
    b'by' b'enzymes' b',' b'and' b'each' b'are' b'likely' b',' b'as' b'alone' b'cede' b'or' b'1150' b'.' b'It' b'is' b'issued' b'on' b'another' b'owl'
    b'ordinated' b',' b'which' b'attempted' b'to' b'be' b'"' b'implies' b'and' b'far' b'a' b'potential' b'form' b'on' b'them' b'and' b'future' b'or' b'safely' b'close'
    b'vulnerable' b'the' b'country' b'.' b'As' b'ritual' b'is' b'these' b',' b'there' b'is' b'no' b'only' b'poetic' b'leader' b'of' b'the' b'two' b'non' b'@-@'
    b'term' b'history' b',' b'about' b'1' b'@.@' b'5' b'cm' b'(' b'4' b'@.@' b'8' b')' b'.' b'These' b'or' b'6' b'\xe2\x80\x93' b'3' b'states'
    b'published' b'Fox' b',' b'but' b'it' b'occurs' b'on' b'a' b'relief' b'tail' b'instead' b'now' b',' b'semen' b'on' b'a' b'wide' b'eye' b'.' b'This'
    b'between' b'Scheer' b'viewed' b'gun' b'changes' b'.' b'These' b'bird' b'level' b'was' b'longest' b',' b'and' b'if' b'athletic' b',' b'and' b'some' b'small' b'birds'
    b'of' b'a' b'planet' b'.' b'She' b'does' b'remain' b'an' b'<unk>' b'with' b'her' b'spending' b'a' b'part' b'below' b'700' b'@.@' b'5' b'%' b'of'
    b'breeding' b',' b'when' b'it' b'is' b'both' b'forgotten' b',' b'they' b'are' b'<unk>' b'Huizong' b',' b'the' b'head' b'has' b'firmly' b'done' b'.' b'THE'
    b'of' b'this' b'of' b'the' b'Earth' b',' b'imitated' b'flowers' b'for' b'Cigars' b'from' b'eleventh' b'.' b'Despite' b'six' b'a' b'female' b',' b'on' b'both'
    b'38' b'cars' b'to' b'gender' b',' b'is' b'drilling' b'on' b'three' b'Gefion' b'species' b'including' b'one' b'who' b'will' b'be' b'erected' b'.' b'Many' b'bird'
    b'sticks' b'feature' b'their' b'ability' b'that' b'we' b'does' b'not' b'retire' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Track' b'status' b'=' b'=' b'<eos>' b'<eos>'
    b'In' b'1832' b',' b'tortoise' b'reactions' b'are' b'<unk>' b',' b'YouTube' b',' b'and' b'grey' b',' b'although' b'the' b'flies' b'must' b'also' b'be' b'well'
    b'until' b'around' b'ordinary' b'forests' b'.' b'Adults' b'linen' b'predation' b'were' b'green' b'or' b'pairs' b'were' b'frequently' b'dug' b'instead' b'until' b'the' b'birds' b','
    b'both' b'of' b'which' b'are' b'first' b'distinct' b'to' b'explosive' b'<unk>' b'.' b'Another' b'author' b'8' b'@.@' b'thickness' b'or' b'million' b'million' b'birds' b'on'
    b'a' b'crafting' b'object' b'in' b'northwestern' b'islands' b'existed' b'in' b'the' b'floor' b'of' b'Denmark' b'.' b'They' b'may' b'be' b'praised' b'with' b'less' b'than'
    b'5' b'@.@' b'8' b'\xe2\x80\x93' b'1' b'@.@' b'5' b'in' b'.' b'This' b'theme' b'become' b'fuel' b',' b'so' b'these' b'females' b'who' b'dominated' b'something'
    b'after' b'winter' b'and' b'wide' b'or' b'vehicles' b',' b'parking' b'individuals' b',' b'<unk>' b'rowing' b'a' b'female' b'object' b',' b'but' b'not' b'flies' b'occurs'
    b'so' b'to' b'the' b'stalk' b'.' b'With' b'females' b'the' b'food' b'bird' b'distributed' b'a' b'high' b'vapor' b',' b'less' b'heavily' b'.' b'Within' b'it'
    b',' b'the' b'kakapo' b'may' b'be' b'thrown' b'for' b'the' b'bird' b',' b'so' b'he' b'turns' b'one' b'of' b'their' b'<unk>' b',' b'suggesting' b'that'
    b'it' b'"' b'Action' b'Got' b'Again' b'on' b'a' b'manufacturer' b"'s" b'heart' b',' b'cross' b'<unk>' b',' b'[' b'many' b'have' b'not' b'gives' b'account'
    b'of' b'unwelcome' b'(' b'<unk>' b')' b'.' b'"' b'al' b'charitable' b'Heinrich' b'toxic' b'volva' b'was' b'made' b'by' b'Flossy' b'of' b'William' b'Hazel' b'Sheikh'
    b'<unk>' b'.' b'Since' b'10' b'years' b',' b'they' b'have' b'a' b'golden' b'female' b'with' b'Lester' b'and' b'<unk>' b'who' b'looks' b'down' b'near' b'Faust'
    b'.' b'groupings' b'returns' b'to' b'units' b',' b'as' b'they' b'do' b':' b'<eos>' b'Males' b'he' b'has' b'yielded' b'Mercy' b'more' b'hidden' b'.' b'Over'
    b'of' b'every' b'speed' b'15' b'or' b'five' b'years' b',' b'The' b'shoot' b'some' b'likely' b'concerned' b'.' b'This' b'may' b'not' b'make' b'below' b'lacking'
    b'other' b',' b'doing' b'roughly' b'5' b'm' b'(' b'26' b'lb' b'/' b'h' b')' b'.' b'Each' b'forced' b'not' b'a' b'call' b'around' b'below'
    b'times' b',' b'the' b'combination' b'of' b'bright' b'vertices' b',' b'then' b'factors' b',' b'only' b'at' b'her' b'country' b'.' b'This' b'habitat' b'is' b'her'
    b'opponent' b'or' b'eye' b'.' b'They' b'between' b'his' b'burn' b'and' b'hole' b'are' b'close' b'to' b'age' b'.' b'It' b'are' b'sometimes' b'mentioned' b'by'
    b'large' b'@-@' b'friendly' b'sincere' b'toys' b',' b'a' b'Mauryas' b"'" b'temple' b'and' b'tobacco' b'sealing' b'.' b'The' b'pair' b'have' b'its' b'large' b'distinctive'
    b'surface' b'side' b'(' b'baby' b'meaning' b'it' b',' b'a' b'adult' b'influence' b',' b'and' b'a' b'R\xc3\xa9union' b'galaxy' b'of' b'"' b'2S' b'"' b','
    b'in' b'which' b'they' b'had' b'burned' b'teachers' b'.' b'For' b'example' b'and' b'more' b'than' b'11' b'%' b'of' b'its' b'diet' b',' b'there' b'are'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 203.5
    loss: 5.168
    elapsed time (seconds): 104.9




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  17.711 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
