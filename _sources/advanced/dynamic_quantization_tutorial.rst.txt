.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'The' b'1987' b'generation' b'was' b'handled' b'by' b'the' b'leaders' b'with' b'Walker' b"'" b'Scientologist' b'Smith' b'for' b'Shorter' b'<unk>' b',' b'who' b'successfully'
    b'sought' b'to' b'historic' b'Choice' b'Performance' b'.' b'<eos>' b'Lewiston' b'and' b'GPUs' b'were' b'badly' b'listed' b'as' b'"' b'high' b'and' b'leisurely' b'"' b','
    b'such' b'as' b'<unk>' b'from' b'John' b'ponderosa' b'Duo' b',' b'as' b'support' b'of' b'taking' b'development' b'Ka\xc3\xbalza' b'while' b'his' b'theory' b'by' b'comes' b','
    b'has' b'since' b'sex' b'<unk>' b'hint' b',' b'because' b'a' b'two' b'@-@' b'game' b'residence' b'producing' b'on' b'a' b'aquatic' b'happened' b',' b't' b'1213'
    b'and' b'methods' b',' b'and' b'was' b'selling' b'the' b'same' b'family' b'as' b'Irish' b'player' b',' b'but' b'ejected' b'in' b'different' b'schools' b',' b'and'
    b'offered' b'the' b'character' b'sketches' b',' b'although' b'<unk>' b'@-@' b'exempt' b'are' b'only' b'due' b'for' b'an' b'intensity' b'to' b'be' b'the' b'book' b"'s"
    b'image' b'.' b'However' b',' b'the' b'book' b"'s" b'organ' b'came' b'to' b'reduce' b'girls' b'in' b'Hawai\xca\xbbi' b',' b'which' b'reportedly' b'appears' b'as' b'a'
    b'successor' b'.' b'It' b'is' b'only' b'a' b'broader' b'object' b'else' b'of' b'Palmyra' b'alongside' b'STD' b'Chisholm' b'to' b'indicate' b'David' b'O' b'la' b'executions'
    b'in' b'the' b'same' b'year' b'.' b'The' b'ship' b'also' b'non' b'@-@' b'accidental' b'286' b'specimens' b'\xe2\x80\x94' b'including' b'characters' b'they' b'unlike' b'<unk>' b'blanket'
    b',' b'reliance' b'on' b'the' b'1874' b',' b'in' b'which' b'cannot' b'have' b'a' b'Iwamoto' b'and' b'Halen' b'.' b'<eos>' b'In' b'the' b'fourth' b'play'
    b',' b'two' b'protesters' b'criticized' b'acyclic' b'Chamber' b'Brandon' b'Willie' b'Manheim' b'from' b'Baltimore' b"'s" b'mode' b'.' b'In' b'1994' b',' b'the' b'kingdoms' b'of'
    b'<unk>' b',' b'found' b'in' b'2012' b',' b'was' b'that' b'the' b'court' b'records' b'Witchcraft' b'and' b'a' b'hole' b'in' b'1999' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Mission' b'=' b'=' b'<eos>' b'<eos>' b'<unk>' b':' b'<eos>' b'Venus' b',' b'the' b'World' b'War' b'developed' b'by' b'X' b'@-@' b'Biogenesis'
    b',' b'is' b'an' b'joint' b'referendum' b'by' b'Newfoundland' b'.' b'Demographics' b'make' b'Ned' b'into' b'hybrids' b'in' b'China' b'or' b'chip' b'respectively' b',' b'that'
    b'resigned' b'are' b'again' b'of' b'soundtrack' b',' b'and' b'up' b'coach' b'if' b'belly' b',' b'among' b'something' b'reason' b'as' b'it' b'averaged' b'a' b'simple'
    b'phenomenon' b',' b'12' b'%' b',' b'or' b'You' b'from' b'this' b'stage' b'.' b'When' b'he' b'is' b'able' b'to' b'see' b'light' b'with' b'Glorious'
    b'Meri' b',' b'or' b'the' b'Tales' b'<unk>' b'uninterrupted' b'since' b'that' b'country' b'.' b'Peshkin' b'says' b'it' b'was' b'not' b'rang' b'on' b'say' b'that'
    b'a' b'race' b'of' b'American' b'in' b'<unk>' b',' b'made' b'up' b'his' b'dream' b'of' b'830' b',' b'so' b'some' b'hundred' b'shows' b'from' b'he'
    b'probably' b'moved' b'early' b"'" b'or' b"'" b'I' b'irrelevant' b'temperance' b'figure' b',' b'I' b'pursued' b'ibis' b'to' b'Blue' b',' b'but' b'O' b"'t"
    b'figure' b'sex' b'Right' b'and' b'<unk>' b'on' b'as' b'follows' b'will' b'be' b'used' b'to' b'understand' b'if' b'they' b'are' b'wrong' b'as' b'a' b'lady'
    b'.' b'What' b'will' b'have' b'put' b'his' b'jump' b'darkness' b'but' b',' b'as' b'this' b'is' b'perfect' b'of' b'to' b'will' b'do' b'yet' b'get'
    b'up' b',' b'and' b'find' b'"' b'partial' b',' b'around' b'Mostar' b',' b'those' b'of' b'people' b'that' b'come' b'into' b'a' b'effort' b'for' b'disk'
    b'"' b'.' b'<eos>' b'O' b"'Malley" b"'s" b'vision' b',' b'including' b'promised' b'in' b'February' b'and' b'May' b'1999' b',' b'left' b'the' b'editorial' b'she'
    b'of' b'the' b'invitation' b'to' b'have' b'informed' b'the' b'secular' b'acquaintance' b'of' b'Defence' b'@-@' b'Lindelof' b',' b'religiously' b'him' b'to' b'the' b'Republican' b'police'
    b"'s" b'Choice' b'.' b'<eos>' b'O' b'Rosebery' b'seems' b'clear' b'different' b'reviews' b',' b'Ross' b'William' b'seldom' b',' b'adopting' b'the' b'other' b'all' b'agrees'
    b'Carroll' b'on' b'December' b'17' b',' b'which' b'enabled' b'Feuilley' b"'s" b'poem' b'out' b'in' b'the' b'memory' b'.' b'The' b'dreams' b'of' b'each' b'honours'
    b'was' b'to' b'discover' b'him' b'something' b'going' b'before' b'the' b'race' b'.' b'"' b'By' b'2008' b',' b'the' b'Times' b'<unk>' b'III' b'is' b'a'
    b'handbag' b'...' b'I' b'makes' b'corruption' b'that' b'propelled' b'oxides' b'\xe2\x80\x94' b'rarely' b'reinforced' b'against' b'class' b',' b'which' b'would' b'balance' b'as' b'a' b'music'
    b'to' b'a' b'perfect' b'design' b'.' b'She' b'knocks' b'hilarious' b'their' b'J' b'and' b'Dupri' b'<unk>' b';' b'O' b"'Malley" b'became' b'making' b'that' b'a'
    b'church' b'.' b'"' b'In' b'accordance' b',' b'Dura' b'officials' b'died' b'up' b'in' b'Breese' b',' b'and' b'performed' b'that' b'it' b'intended' b'to' b'start'
    b'a' b'game' b'retained' b'to' b'<unk>' b'the' b'Dubliners' b'.' b'value' b'vanished' b'reinforcement' b'on' b'the' b'site' b'of' b'disruption' b'and' b'given' b'them' b'to'
    b'the' b'beginning' b'of' b'his' b'third' b'year' b'.' b'With' b'different' b'success' b'and' b'lanthanides' b',' b'plus' b'an' b'draft' b'of' b'2' b'million' b'kilometers'
    b'in' b'Sun' b'McAllister' b'at' b'Music' b'in' b'Minnesota' b'(' b'24' b'%' b'of' b'Wight' b'and' b'the' b'FIA' b')' b'is' b'also' b'vassal' b'of'
    b'125' b'players' b'.' b'The' b'best' b'two' b'novels' b'in' b'guess' b'was' b'handled' b'by' b'much' b'other' b'conscription' b'vote' b'.' b'ECU' b"'s" b'name'
    b'where' b'countries' b',' b'Ohkawa' b'died' b'on' b'whether' b'experts' b'League' b'a' b'<unk>' b'of' b'<unk>' b'(' b'<unk>' b')' b',' b'though' b'<unk>' b'is'
    b'mainly' b'met' b';' b'I' b'act' b'to' b'of' b'online' b'Leinster' b'of' b'the' b'death' b',' b'again' b'abuse' b'he' b'loses' b'early' b'years' b'for'
    b'every' b'element' b'in' b'the' b'body' b'.' b'A' b'majority' b'proved' b'known' b'as' b'Venus' b'is' b'not' b'solved' b'by' b'three' b'favored' b'disk' b','
    b'as' b'his' b'certain' b'institutions' b'do' b'not' b'select' b'a' b'plane' b'distortions' b',' b'struggled' b'to' b'respond' b'to' b'England' b'.' b'<eos>' b'Despite' b'an'
    b'widening' b'afterwards' b'targeted' b'to' b'Wikipedia' b'Mosley' b',' b'the' b'planet' b'expressed' b'a' b'nomination' b'as' b'a' b'player' b'reliance' b'on' b'a' b'vocal' b'motion'
    b'at' b'a' b'long' b'friend' b'.' b'The' b'pair' b'sought' b'back' b'he' b'rapidly' b'answers' b'the' b'other' b'affection' b'to' b'term' b'to' b'move' b'earthquake'
    b'psychoactive' b'.' b'When' b'in' b'<unk>' b',' b'Crush' b'Ames' b'organize' b'to' b'port' b'responds' b'in' b'a' b'area' b'pure' b'distinction' b'to' b'make' b'every'
    b'jealous' b'epidemic' b'with' b'Vault' b',' b'animals' b'and' b'Grass' b'allied' b'.' b'Flowers' b'"' b'who' b'[' b'Wheel' b']' b',' b'<unk>' b',' b'years'
    b',' b'<unk>' b'contents' b',' b'especially' b'of' b'March' b'that' b'night' b',' b'one' b'rush' b'its' b'lovely' b'Violence' b',' b'and' b'the' b'facing' b'crowds'
    b'with' b'cadres' b'temperament' b'and' b',' b'can' b'give' b'in' b'disgust' b'under' b'Cheese' b'<unk>' b'.' b"'" b"'" b'demand' b'a' b'<unk>' b'excessive' b'victory'
    b',' b'dad' b',' b'and' b'abundant' b',' b'and' b'not' b'refusing' b'to' b'kind' b'of' b'to' b'Thursday' b'their' b'eyes' b'.' b'"' b'However' b','
    b'president' b'seeks' b'to' b'report' b'a' b'situation' b'home' b'.' b'Also' b'Slayer' b"'s" b'third' b'son' b'"' b'The' b'House' b'of' b'California' b'skin' b','
    b'like' b'the' b'rebellion' b'of' b'Senators' b',' b'and' b'tongue' b';' b'to' b'speak' b'"' b'have' b'no' b'strength' b'when' b'he' b'was' b'King' b'Dengeki'
    b'Ross' b"'s" b'spoken' b'variety' b'of' b'absence' b'.' b'James' b'describes' b'him' b'with' b'Robe' b'himself' b'for' b'pursuers' b'in' b'his' b'first' b'encounter' b'.'
    b'Marks' b'pointed' b'upon' b'his' b'thoughts' b'in' b'order' b'for' b'the' b'checkpoints' b'of' b'Maleev' b',' b'but' b'blacks' b'films' b'became' b'<unk>' b'and' b'situ'
    b'\xe2\x80\x94' b'Copenhagen' b',' b'<unk>' b',' b'<unk>' b',' b'resides' b',' b'behaviour' b'.' b'The' b'source' b'dealt' b'cultural' b'field' b'ways' b',' b'and' b'did'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.6
    loss: 5.168
    elapsed time (seconds): 107.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  32.015 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
