.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'after' b'a' b'Jeremy' b'<unk>' b',' b'a' b'predominantly' b'greatly' b'wash' b'1881' b'(' b'after' b'being' b'replaced' b'as' b'a' b'degree' b',' b')' b':'
    b'The' b'Movie' b'(' b'Operation' b'<unk>' b')' b'"' b'<unk>' b'"' b'(' b'1220' b':' b'15' b')' b',' b'43' b'despite' b'1' b'@,@' b'972'
    b'fermentation' b'.' b'<eos>' b'Big' b'Age' b'had' b'move' b'in' b'relation' b'.' b'The' b'regiment' b'sent' b'a' b'basal' b'marries' b'influence' b',' b'who' b'had'
    b'seen' b'as' b'their' b'impressive' b'homosexuality' b'.' b'The' b'pagodas' b'can' b'be' b'found' b'by' b'brakes' b'such' b'as' b'reality' b';' b'they' b'denied' b'the'
    b'Minister' b',' b'where' b'<unk>' b'or' b'<unk>' b'<unk>' b'have' b'been' b'allowed' b'to' b'success' b'.' b'<eos>' b'The' b'beak' b'of' b'occasional' b'leader' b'biography'
    b'charges' b'were' b'Wilfrid' b'moved' b'into' b'heads' b'to' b'film' b'like' b'the' b'mountains' b'that' b'they' b'were' b'paler' b'weaknesses' b'.' b'Tomita' b'<unk>' b'O'
    b"'Malley" b'opens' b'by' b'a' b'Dade' b'family' b',' b'and' b'his' b'former' b'efforts' b'tier' b'track' b'the' b'Republican' b'trap' b'and' b'remained' b'for' b'both'
    b'<unk>' b'.' b'In' b'the' b'suggestion' b'it' b'has' b'sold' b'its' b'trend' b',' b'which' b'ended' b'in' b'blocking' b'concern' b'between' b'a' b'term' b'and'
    b'\xe2\x80\xa6' b'the' b'<unk>' b'the' b'Eisenberg' b':' b'"' b'I' b'really' b'didn' b"'t" b'have' b'Death' b'duty' b'at' b'\xc5\x81aszcz' b'.' b'"' b'Martial' b'events'
    b'stimulated' b'running' b'being' b'visible' b',' b'with' b'airplay' b'ferries' b'long' b'high' b',' b'especially' b'accurate' b'to' b'escape' b'Formula' b"'t" b'expand' b'Shop' b'Wiseman'
    b'of' b'lakes' b',' b'but' b'appears' b'as' b'a' b'terrible' b'star' b'.' b'The' b'first' b'dispute' b'for' b'thimble' b'@-@' b'term' b',' b'authority' b'or'
    b'east' b'be' b'still' b'more' b'anticipated' b'and' b'Namco' b'Books' b',' b'headed' b'to' b'Alien' b'while' b'in' b'later' b'view' b'(' b'a' b'living' b'election'
    b'Everglades' b'gameplay' b'\xe2\x80\x99' b'time' b'from' b'to' b'mark' b'themselves' b')' b'.' b'Nayav\xc4\x81da' b'develops' b'2' b'@,@' b'000' b'students' b'Out' b',' b'he' b'opened'
    b'unjust' b'records' b'bikini' b'workers' b',' b'thus' b'published' b'long' b'for' b'the' b'activity' b'in' b'order' b'to' b'make' b'to' b'each' b'other' b'person' b'.'
    b'Before' b'they' b'were' b'likely' b'to' b'stop' b'P' b'offspring' b'<unk>' b',' b'the' b'game' b'was' b'taken' b'in' b'1999' b'for' b'the' b'first' b'release'
    b'in' b'the' b'early' b'election' b'.' b'In' b'the' b'1920s' b',' b'the' b'American' b'Hockey' b'Man' b'stated' b'that' b'the' b'Crash' b'Company' b'would' b'be'
    b'"' b'probably' b'exclusively' b',' b'been' b'well' b'to' b'think' b',' b'too' b'good' b'this' b'of' b'records' b'"' b'.' b'In' b'as' b'"' b'dangerous'
    b'"' b',' b'he' b'escapes' b'over' b'a' b'suspect' b'was' b'erected' b'during' b'2006' b'.' b'Film' b'Tech' b'was' b'adapted' b'to' b'a' b'Japanese' b'bomb'
    b'to' b'be' b'within' b'"' b'Labour' b'<unk>' b',' b'Joyful' b'"' b',' b'which' b'season' b'in' b'Beloved' b"'s" b'orbit' b'Yue' b'filled' b'Travis' b'Enix'
    b'and' b'The' b'Government' b'from' b'Henry' b'Lane' b'.' b'Subsequent' b'identities' b'were' b'limited' b'to' b'launch' b'the' b'discovery' b'of' b'officers' b',' b'especially' b'the'
    b'wider' b'invasion' b'of' b'Europe' b'and' b'continued' b'to' b'be' b'related' b'.' b'Eh' b'stained' b'after' b'excavations' b'and' b'family' b'leaders' b"'" b'third' b'circuit'
    b'and' b'conducted' b'in' b'Yamaha' b'.' b'In' b'September' b'2007' b',' b'after' b'a' b'all' b'common' b'lighting' b',' b'he' b'has' b'been' b'noted' b'to'
    b'Odessa' b'off' b'certain' b'advice' b'during' b'the' b'war' b'into' b'<unk>' b',' b'Nevada' b',' b'putting' b'went' b'a' b'additional' b'act' b'they' b'led' b'in'
    b'drowned' b',' b'and' b'not' b'Minnesota' b'used' b'Formula' b'One' b'Shiban' b'for' b'all' b'of' b'the' b'stories' b'for' b'Judith' b'.' b'<unk>' b'account' b'is'
    b'sent' b'on' b'to' b'have' b'innovator' b'him' b'about' b'century' b'efforts' b'.' b'It' b'also' b'hoped' b'a' b'value' b'that' b'necessary' b'on' b'year' b'after'
    b'the' b'September' b'251' b'/' b'formally' b'Gambia' b'(' b'John' b'Rapids' b')' b'are' b'<unk>' b';' b'used' b'for' b'Lewenthal' b'in' b'1838' b',' b'at'
    b'the' b'night' b'of' b'October' b'15' b'against' b'the' b'other' b'days' b'of' b'correct' b'fans' b'and' b'the' b'1932' b'opposite' b'power' b'.' b'The' b'latter'
    b'was' b'one' b'of' b'the' b'poor' b'depictions' b'of' b'what' b'came' b'to' b'black' b':' b'Kh\xc3\xa1nh' b"'s" b'faith' b'Gallup' b'and' b'<unk>' b'kilometres' b'for'
    b'their' b'cooperation' b'on' b'him' b'.' b'The' b'space' b'Kyra' b'also' b'became' b'failed' b'to' b'save' b'the' b'disastrous' b'"' b'importance' b'of' b'an' b'Krayoxx'
    b'Mask' b'"' b'and' b'"' b'Q' b'.' b'"' b'<eos>' b'Before' b'remaining' b'1145' b'world' b'prestige' b'since' b'his' b'scheme' b',' b'it' b'is' b'possible'
    b'that' b'placed' b'those' b'or' b'42' b'Omar' b'Lombardo' b'residents' b'considered' b'Ceres' b'on' b'a' b'island' b',' b'which' b'never' b'exploited' b'an' b'special' b'fractured'
    b'Tyndall' b'<unk>' b'Lewis' b',' b'in' b'a' b'novel' b'19' b'@-@' b'days' b'to' b'a' b'planet' b'based' b'on' b'Deception' b'.' b'"' b'not' b'interacts'
    b',' b'our' b'with' b'a' b'right' b'being' b'ubiquitous' b'"' b'.' b'O' b"'Malley" b'still' b'employed' b'its' b'Siege' b'of' b'ancient' b'girls' b'in' b'order'
    b'to' b'reduce' b'it' b'to' b'humans' b'.' b'In' b'Continuing' b'luminosity' b',' b'they' b'were' b'utilize' b'to' b'Maza' b'.' b'Whatever' b'they' b'fit' b'flight'
    b'about' b'sensations' b'from' b'Mortal' b'Korean' b'Britain' b',' b'reflecting' b'/' b'Hero' b'warehouses' b'through' b'taking' b'six' b'years' b'a' b'hour' b'over' b'his' b'diet'
    b'.' b'However' b',' b'it' b'does' b'not' b'be' b'altered' b'into' b'larger' b'or' b'lowest' b'off' b',' b'with' b'oral' b'and' b'uninterrupted' b',' b'the'
    b'spectrum' b'hinted' b'to' b'power' b'<unk>' b'.' b'Common' b'greasewood' b'exist' b'longer' b'or' b'antagonist' b'174' b'housing' b'.' b'Since' b'at' b'least' b'"' b'only'
    b'oh' b'"' b'Wexford' b',' b'they' b'are' b'since' b'direct' b'or' b'superior' b'even' b',' b'they' b'may' b'<unk>' b'their' b'involvement' b'.' b'The' b'demand'
    b'produces' b'be' b'on' b'"' b'hair' b'and' b'brutally' b'no' b'@-@' b'classical' b'"' b',' b'resulting' b'in' b'<unk>' b',' b'cougars' b',' b'phylogenetic' b'tissues'
    b'and' b'irregular' b'shifts' b'because' b'the' b'Nettles' b'bring' b'Muhammad' b',' b'rather' b'occasionally' b'.' b'The' b'Crash' b'State' b'State' b'commandment' b'is' b'highly' b'active'
    b'as' b'the' b'II' b'Childe' b'of' b'Earth' b'on' b'the' b'subject' b'of' b'their' b'sparks' b'460' b'will' b'have' b'a' b'very' b'short' b'success' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'When' b'was' b'injured' b'by' b'Earth' b',' b'many' b'of' b'these' b'details' b'could'
    b'be' b'distinguished' b'by' b'Syriac' b',' b'and' b'not' b'eat' b'his' b'<unk>' b'and' b'AMISOM' b'Jainism' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b','
    b'scalloping' b',' b'Qedar' b',' b'and' b'Manuel' b'.' b'In' b'tenth' b'future' b'social' b'characters' b',' b'in' b'security' b',' b'moving' b'only' b'there' b'would'
    b'represent' b'or' b'more' b'distributed' b'movement' b'of' b'less' b'mammals' b'to' b'be' b'made' b'with' b'large' b'wholly' b'disease' b'.' b'This' b'has' b'Size' b'<unk>'
    b',' b'transcribed' b'Saginaw' b',' b'leaving' b'<unk>' b',' b'<unk>' b',' b'and' b'heads' b'in' b'Cape' b'minted' b'at' b'accidents' b'accelerating' b'by' b'the' b'Cuban'
    b'Bernissart' b'awaits' b'provided' b'by' b'Crash' b'Smith' b'orbits' b',' b'as' b'they' b'are' b'accordingly' b'to' b'the' b'dried' b'description' b'of' b'A.' b'sexpunctatus' b'.'
    b'<unk>' b'aerodromes' b'(' b'Come' b'as' b'principal' b',' b'and' b'additional' b'agricultural' b'ironclads' b')' b'must' b'be' b'introduced' b'to' b'their' b'clusters' b'of' b'the'
    b'membrane' b',' b'when' b'those' b'may' b'be' b'light' b'running' b'.' b'As' b'they' b'must' b'prevent' b'fan' b'drinking' b'as' b'they' b'find' b'in' b'the'
    b'area' b',' b'those' b'of' b'Venus' b'could' b'be' b'<unk>' b'.' b'There' b'is' b'no' b'differences' b'between' b'whether' b'usually' b'(' b'Sayid' b')' b'is'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 192.5
    loss: 5.168
    elapsed time (seconds): 104.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  4.901 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
