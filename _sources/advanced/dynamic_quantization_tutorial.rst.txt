
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'III' b'.' b'<eos>' b'Ross' b'who' b'had' b'two' b'errors' b',' b'and' b'him' b'in' b'1998' b'as' b'stopped' b'in' b'his' b'city' b'.' b'A'
    b'number' b'of' b'freezer' b'are' b'<unk>' b'.' b'The' b'prefect' b'is' b'listened' b'for' b'hours' b'to' b'merit' b',' b'while' b'uses' b'more' b'than' b'two'
    b'years' b',' b'and' b'just' b'five' b'more' b'businesses' b'the' b'names' b'had' b'wrong' b'.' b'Footage' b'lasted' b',' b'however' b',' b'upper' b'damages' b'Huddersfield'
    b'<unk>' b'is' b'named' b'oxide' b'as' b'the' b'adult' b'is' b'a' b'female' b'elegiac' b'planet' b'.' b'This' b'period' b'was' b'a' b'state' b';' b'other'
    b'the' b'game' b'have' b'a' b'agnostic' b'at' b'a' b'Drama' b'zone' b',' b'an' b'B.' b'Copland' b',' b'former' b'taste' b'yacht' b'du' b'M.' b'III'
    b'and' b'co' b'@-@' b'organisms' b'.' b'M.' b'v.' b'Bang' b'!' b'and' b'Vaballathus' b'(' b'Blair' b')' b'describes' b'a' b'Gulf' b'of' b'94' b'\xc2\xb5m'
    b',' b'of' b'PC' b',' b'and' b'a' b'green' b'<unk>' b'.' b'They' b'controlled' b'older' b'generator' b',' b'or' b'anyone' b'allowed' b'more' b'are' b'extremely'
    b'distinct' b':' b'an' b'planet' b'economic' b',' b'and' b'<unk>' b'novelists' b',' b'they' b'usually' b'pass' b'swift' b'in' b'the' b'other' b'helicopter' b'traits' b'.'
    b'Most' b'critics' b'have' b'Zimmermann' b'from' b'Shock' b'letters' b'to' b'it' b'comment' b'around' b'the' b'center' b'of' b'her' b'faith' b'and' b'Incubation' b'says' b'it'
    b'also' b'evolved' b',' b'and' b'as' b'soon' b'as' b'if' b'they' b'lacks' b'about' b'other' b'years' b'.' b'affection' b'colours' b',' b'attracting' b'one' b'towards'
    b'referenced' b'or' b'taught' b'firing' b'vocals' b',' b'should' b'be' b'German' b'.' b'Nick' b'Fallon' b',' b'"' b'<unk>' b'"' b'have' b'more' b'released' b','
    b'like' b'higher' b'value' b'into' b'IGN' b"'s" b'accusations' b'to' b'Cards' b'.' b'<eos>' b'One' b'of' b'these' b'planets' b'are' b'made' b'as' b'a' b'"'
    b'moth' b'"' b'iron' b'@-@' b'bound' b'sound' b'known' b'as' b'<unk>' b'.' b'The' b'exercise' b'of' b'Ceres' b'is' b'particularly' b'localized' b'.' b'Then' b','
    b'it' b'is' b'to' b'be' b'found' b'that' b'is' b'lost' b'playing' b'of' b'MBE' b',' b'occasionally' b'as' b'<unk>' b'below' b'at' b'another' b'period' b'.'
    b'When' b'they' b'are' b'soon' b'a' b'express' b'disc' b',' b'even' b'an' b'kind' b'of' b'quest' b'is' b'unclear' b'to' b'Pictish' b'birds' b',' b'which'
    b'myths' b'into' b'the' b'end' b'of' b'the' b'trip' b'where' b'animals' b'have' b'negative' b'hopping' b',' b'others' b'posed' b'when' b'these' b'language' b'wildlife' b'her'
    b'prey' b'from' b'the' b'resemble' b'relevant' b'and' b'improper' b'power' b'.' b'It' b'can' b'have' b'four' b'powerful' b'times' b':' b'were' b'plain' b'it' b','
    b'when' b'English' b',' b'and' b'their' b'explosion' b'feed' b'on' b'the' b'grounds' b'of' b'bread' b',' b'1142' b'.' b'Behind' b'the' b'eggs' b'can' b'be'
    b'respiratory' b'without' b'white' b'characteristics' b'.' b'The' b'underparts' b'attack' b'export' b'og' b'<unk>' b'of' b'found' b'foxes' b'who' b'looked' b'down' b'by' b'its' b'<unk>'
    b'<unk>' b'isotope' b'the' b'winner' b'(' b'<unk>' b'redesign' b')' b',' b'at' b'a' b'fictional' b'Shandong' b'to' b'20' b'miles' b'(' b'54' b'mi' b')'
    b'from' b'the' b'orbit' b'of' b'Tate' b'Africa' b'.' b'They' b'kills' b'Vegas' b',' b'but' b'their' b'mass' b'Penelope' b'will' b'work' b'to' b'be' b'viewed'
    b'as' b'readily' b'a' b'mature' b'Severn' b'.' b'They' b'predications' b'a' b'official' b'@-@' b'neck' b'from' b'her' b'results' b'by' b'Khandoba' b'and' b'potentially' b'incorporate'
    b',' b'whereas' b'his' b'fourth' b'subspecies' b'<unk>' b'only' b'up' b'.' b'Even' b'the' b'geological' b'portion' b'of' b'avian' b'pretty' b'common' b'DNA' b',' b'whether'
    b'he' b'tries' b'picture' b'on' b'other' b'other' b'disturbances' b'it' b'the' b'truth' b'at' b'King' b'College' b"'" b'lies' b'with' b'a' b'large' b'angle' b'and'
    b'more' b'edges' b'.' b'When' b'they' b'are' b'very' b'incredibly' b'<unk>' b'or' b'that' b'they' b'return' b'to' b'their' b'Ushant' b'study' b'Bull' b'Furtado' b','
    b'often' b'aboard' b'to' b'Have' b'jimmadseni' b'due' b'to' b'56th' b'treated' b'in' b'Cumbria' b'.' b'<eos>' b'The' b'title' b'of' b'<unk>' b'(' b'especially' b'marked'
    b'by' b'their' b'daughter' b')' b'is' b'a' b'little' b'aggressive' b'origin' b'of' b'human' b'H2O' b',' b'and' b'Kyra' b'is' b'connected' b'at' b'41' b':'
    b'43' b'<unk>' b'to' b'28' b'%' b':' b'it' b'37' b'complexes' b'(' b'50' b'\xe2\x80\x93' b'30' b'mph' b')' b'.' b'This' b'may' b'be' b'seen'
    b'by' b'although' b'the' b'ordnance' b'product' b'of' b'the' b'thematic' b'adult' b'used' b'pyramidal' b'studies' b'through' b'the' b'eyes' b'into' b'a' b'torpedoes' b'in' b'Austrians'
    b'to' b'reflect' b'.' b'If' b'extend' b'on' b'2' b'October' b',' b'1775' b'(' b'which' b'have' b'taken' b'in' b'all' b'common' b'males' b',' b'many'
    b'monuments' b'helps' b'up' b'themselves' b'[' b'Corythosaurus' b']' b')' b'cannot' b'not' b'be' b'closely' b'high' b',' b'before' b'oxygen' b'troubled' b'(' b'a' b'moment'
    b'on' b'cigarettes' b')' b'and' b'the' b'help' b'of' b'large' b'starling' b'or' b'larger' b'for' b'Tomoko' b'to' b'restore' b'to' b'the' b'depths' b'of' b'stylistic'
    b'woodland' b'to' b'end' b'.' b'They' b'distinguished' b'by' b'timing' b'for' b'Brussels' b'to' b'take' b'up' b'precipitation' b'calls' b'to' b'roughly' b'5' b'million' b','
    b'and' b'they' b'have' b'Irish' b'range' b'by' b'Jana' b'.' b'Several' b'<unk>' b'Observatory' b'occurs' b'on' b'many' b'other' b'asteroids' b'include' b'the' b'island' b'such'
    b'as' b'<unk>' b',' b'Barons' b'punt' b'and' b'<unk>' b'distinct' b'.' b'Similar' b'fossil' b'measures' b'may' b'be' b'legal' b',' b'but' b'therefore' b'18' b'\xe2\x80\x93'
    b'18' b'cm' b'(' b'smooth' b'by' b'3' b'@.@' b'5' b'\xe2\x80\x93' b'8' b'in' b')' b'high' b'trees' b',' b'so' b'according' b'to' b'feeding' b'up'
    b'trouble' b',' b'1774' b',' b'<unk>' b',' b'and' b'eggs' b'of' b'constant' b'males' b'.' b'They' b'make' b'drive' b'rapidly' b'with' b'Dhrupad' b',' b'PML'
    b',' b'is' b'<unk>' b'.' b'Litter' b'at' b'<unk>' b',' b'practical' b',' b'24' b',' b'1923' b',' b',' b'is' b'unambiguously' b'astronomers' b'and' b'Israelites'
    b'printing' b',' b'burned' b',' b'its' b'father' b',' b'greenish' b'body' b',' b'as' b'classify' b'.' b'It' b'has' b'two' b'advantages' b',' b'18' b'\xe2\x80\x93'
    b'9' b'a.m.' b'.' b'At' b'006' b',' b'males' b'are' b'mobilised' b'at' b'St' b'prehensile' b'(' b'<unk>' b')' b'.' b'dropkicks' b'is' b'most' b'common'
    b'characters' b',' b'which' b'chasing' b'their' b'possession' b'from' b'<unk>' b',' b'over' b'800' b'corners' b'such' b'at' b'food' b'in' b'fluid' b'are' b'given' b'head'
    b'below' b'as' b'listening' b'.' b'Males' b'subnuclear' b'Fringe' b'toys' b',' b'and' b'the' b'female' b'cares' b'from' b'their' b'replacement' b'this' b'species' b',' b'but'
    b'well' b'as' b'they' b'begin' b'as' b'they' b'readily' b'kill' b'or' b'doubt' b',' b'others' b'resolve' b'its' b'hearing' b'through' b'other' b'individuals' b'.' b'They'
    b'rarely' b'extend' b'relief' b'when' b'they' b'bind' b'their' b'homes' b'of' b'mating' b'.' b'The' b'male' b'leaves' b'that' b'the' b'eyes' b'appealed' b'to' b'its'
    b'large' b'd6' b',' b'there' b'are' b'no' b'most' b'aspect' b'of' b'brown' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Meteorological' b'red' b'=' b'=' b'<eos>'
    b'<eos>' b'Because' b'of' b'the' b'mature' b',' b'<unk>' b'light' b',' b'the' b'cause' b'of' b'another' b'esteem' b'can' b'be' b'spider' b'.' b'Released' b','
    b'when' b'weathered' b'riding' b'once' b'<unk>' b',' b'by' b'other' b'of' b'Tennyson' b'enemies' b',' b'are' b'now' b'connected' b'to' b'fly' b'loose' b'tore' b'.'
    b'The' b'whole' b'ancestor' b'of' b'Ceres' b'small' b'or' b'growing' b'alarm' b'locations' b'has' b'accomplished' b'while' b'burned' b',' b'though' b'they' b'in' b'pair' b'of'
    b'remote' b'types' b',' b'as' b'only' b'they' b'are' b'Kenyan' b'mainly' b'.' b'If' b'they' b'look' b'and' b'predominantly' b'areas' b'may' b'be' b'trapped' b'near'
    b'<unk>' b',' b'it' b'may' b'have' b'more' b'several' b'spots' b'than' b'certain' b'.' b'The' b'eggs' b';' b'Only' b',' b'or' b'some' b'like' b'positioned'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 199.8
    loss: 5.168
    elapsed time (seconds): 113.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.856 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
