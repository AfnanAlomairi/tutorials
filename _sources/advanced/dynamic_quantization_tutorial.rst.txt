.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'between' b'reconstruction' b'and' b'1904' b'.' b'Besides' b'this' b'time' b'new' b'purification' b'men' b'began' b'in' b'<unk>' b'a' b'computer' b',' b'which' b'would' b'be'
    b'written' b'by' b'pat' b'Olympic' b'Stroud' b'and' b'dies' b'advantage' b';' b'the' b'combined' b'is' b'red' b',' b'they' b'fragile' b'Sitriuc' b'flocks' b',' b'and'
    b'much' b'slowest' b'characters' b'the' b'Story' b'of' b'Coward' b',' b'but' b'therefore' b'indeed' b'Banai' b'regained' b'it' b'neither' b'out' b'@-@' b'time' b'review' b'being'
    b'already' b'renewed' b'.' b'<eos>' b'A' b'subfossil' b'number' b'of' b'today' b'has' b'finished' b',' b'the' b'most' b'successful' b'debt' b'are' b'regarding' b'General' b'anglicus'
    b',' b'Fisher' b'Franklin' b'<unk>' b'.' b'It' b'Billy' b'was' b'stopped' b'by' b'The' b'United' b'Kingdom' b',' b'<unk>' b'no' b'right' b'and' b'orbit' b'critics'
    b'.' b'Weissweiler' b'blew' b'the' b'city' b'to' b'turned' b'the' b'<unk>' b'of' b'a' b'wet' b'star' b'at' b'school' b"'s" b'chest' b',' b'but' b'some'
    b'versions' b'of' b'<unk>' b'or' b'Thomas' b'Desmond' b'II' b'are' b'able' b'to' b'reduce' b'a' b'cubic' b'or' b'a' b'kind' b'of' b'Statistical' b',' b'tree'
    b',' b'and' b'troublesome' b'with' b'their' b'e' b'lodgepole' b',' b'whole' b'to' b'attract' b'location' b'.' b'The' b'gap' b'with' b'other' b'small' b'starlings' b'would'
    b'be' b'accepted' b'when' b'regular' b'males' b'are' b'killed' b'.' b'While' b'Last' b'starlings' b'have' b'specially' b'attributed' b'from' b'success' b'to' b'modern' b'social' b'techniques'
    b'without' b'together' b',' b'a' b'issue' b'of' b'bird' b'to' b'control' b'or' b'cold' b',' b'with' b'maintenance' b'<unk>' b',' b'immediate' b'or' b'darkness' b','
    b'surge' b'thereafter' b',' b'filled' b'good' b'as' b'establish' b'from' b'where' b'requires' b'fewer' b'study' b'.' b'With' b'Ceres' b',' b'heavy' b',' b'bastn\xc3\xa4site' b'gradually'
    b'historically' b'affect' b'maroon' b'fate' b'and' b'he' b'TJ' b'several' b'hotels' b'that' b'might' b'be' b'shared' b'by' b'their' b'size' b'.' b'The' b'best' b'commented'
    b'to' b'run' b'may' b'attempted' b'to' b'avoid' b'there' b'are' b'not' b'the' b'strongest' b'superior' b'instruments' b'with' b'/' b'Os' b'.' b'In' b'<unk>' b','
    b'they' b'find' b'little' b'marriages' b'including' b'like' b'two' b'confident' b'ones' b';' b'they' b'belong' b'to' b'change' b',' b'they' b'never' b'were' b'small' b'who'
    b'<unk>' b'some' b'the' b'tears' b'<unk>' b'.' b'For' b'example' b',' b'offering' b'functions' b'needed' b'to' b'be' b'suitable' b'.' b'There' b'are' b'no' b'evidence'
    b'that' b'"' b'forging' b"'" b'this' b'some' b'of' b'it' b'might' b'be' b'used' b',' b'it' b'is' b'likewise' b'<unk>' b'.' b'Young' b'is' b'our'
    b'going' b'through' b'particular' b'musicians' b'so' b'when' b'he' b'is' b'a' b'mysterious' b'bird' b',' b'but' b'thus' b'ESA' b'could' b'have' b'minor' b'monarchs' b'in'
    b'his' b'life' b'.' b'And' b'I' b'will' b'have' b'won' b'have' b'one' b'axles' b',' b'Hibiscus' b'strongly' b'have' b'not' b'time' b'flowers' b'out' b'to'
    b'be' b'able' b'to' b'care' b'to' b'have' b'a' b'body' b',' b'haunting' b',' b'they' b'a' b'way' b'to' b'very' b'supernatural' b'value' b'.' b'"'
    b'The' b'governors' b'measures' b'on' b'@-@' b'by' b'@-@' b'control' b'when' b'the' b'shorter' b'energy' b'is' b'directly' b'fed' b'.' b'<eos>' b'Somalia' b"'s" b'kakapo'
    b'(' b'which' b'it' b'had' b'trouble' b'or' b'lived' b'between' b'5' b'@.@' b'5' b'and' b'5' b'million' b'F' b')' b'in' b'Politiquerias' b',' b'are'
    b'discovered' b'to' b'average' b'appreciate' b'a' b'spelling' b'or' b'females' b'.' b'Both' b'chicks' b'they' b'<unk>' b'County' b'remnants' b'this' b'.' b'After' b'finding' b'to'
    b'very' b'quiet' b',' b'they' b'forms' b'an' b'considerable' b'female' b',' b'a' b'other' b'eye' b'teams' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Distribution' b'='
    b'=' b'<eos>' b'<eos>' b'The' b'evolution' b'of' b'males' b'bombed' b'maintaining' b'an' b'period' b'of' b'fine' b'viewpoints' b'in' b'<unk>' b'.' b'terminals' b'introduced' b'their'
    b'variety' b',' b'coalitions' b'based' b'through' b'the' b'province' b'of' b'other' b'early' b'.' b'internal' b'deity' b'<unk>' b':' b'<eos>' b'Elvis' b'and' b'motorists' b'were'
    b'elevated' b'in' b'its' b'head' b'again' b',' b'induction' b',' b'transmitted' b'and' b'rhythm' b'when' b'reduces' b'food' b'if' b'the' b'behaviour' b'punished' b',' b'hours'
    b'only' b'to' b'measure' b'every' b'safety' b',' b'is' b'opined' b'to' b'go' b'the' b'dialogue' b'with' b'proudly' b'\xe2\x80\x94' b'so' b'a' b'designation' b'remembers' b'them'
    b',' b'which' b'redeveloped' b'a' b'common' b'gap' b'without' b'approached' b'originality' b'"' b'.' b'In' b'the' b'pictures' b',' b'it' b'occurs' b'in' b'overseas' b'Enbom'
    b',' b'well' b'recorded' b'severe' b'studies' b',' b'even' b'1351' b'and' b'determined' b'how' b'the' b'kakapo' b'will' b'be' b'common' b'.' b'<unk>' b'mainly' b'often'
    b'grazing' b'they' b'may' b'step' b'food' b',' b'outside' b'both' b'a' b'hypothesis' b'can' b'be' b'<unk>' b'.' b'Students' b'be' b'distinguished' b'by' b'loose' b'forests'
    b',' b'occasionally' b'built' b'during' b'the' b'<unk>' b'of' b'local' b'lower' b'.' b'According' b'to' b'inclusion' b',' b'males' b',' b'surrounded' b'by' b'Jules' b'mitochondria'
    b',' b'<unk>' b'<unk>' b',' b'<unk>' b',' b'stated' b'for' b'the' b'<unk>' b',' b'clustered' b',' b'step' b'.' b'Additional' b'plants' b'are' b'arranged' b'up'
    b'itself' b'of' b'even' b'reduces' b'with' b'peace' b',' b'whereas' b'one' b'disagree' b'are' b'being' b'broadly' b'below' b'or' b'quite' b'.' b'It' b'was' b'claimed'
    b'he' b'a' b'record' b'Cathedral' b'responsible' b'for' b'their' b'essence' b'with' b'the' b'large' b'starling' b'itself' b',' b'by' b'another' b'moment' b'of' b'which' b'cream'
    b'pigments' b'can' b"'t" b'be' b'exploited' b'.' b'<eos>' b'<unk>' b'toxicity' b'applauded' b'itself' b',' b'including' b'many' b'nestlings' b',' b'can' b'be' b'activated' b'by'
    b'<unk>' b'major' b'ray' b'tide' b'.' b'The' b'player' b'have' b'steadily' b"'" b'more' b'<unk>' b'being' b'<unk>' b'when' b'and' b'in' b'appearance' b',' b'some'
    b'major' b'birds' b'form' b'occasionally' b'waterfall' b'.' b'This' b'process' b'held' b'from' b'Ceres' b'and' b'minerals' b'and' b'other' b'typical' b'islands' b'depend' b'upon' b'were'
    b'they' b'results' b'if' b'they' b'stretched' b',' b'and' b'in' b'color' b'shorten' b'or' b'down' b'.' b'If' b'the' b'surroundings' b'were' b'remnants' b'of' b'measuring'
    b'schools' b',' b'thus' b'may' b'not' b'buy' b'a' b'fat' b'westward' b'and' b'edit' b',' b'they' b'extends' b'with' b'associated' b'antibodies' b',' b'like' b'about'
    b'20' b'helping' b'spaced' b'backward' b'.' b'Each' b'produce' b'to' b'be' b'thought' b'together' b',' b'and' b'out' b'from' b'Ceres' b'mention' b'that' b'they' b'may'
    b'have' b'microtubules' b'interviewed' b'structures' b'every' b'test' b',' b'with' b'stoats' b'they' b'have' b'showing' b'and' b'eat' b'it' b'away' b'until' b'it' b'will' b'be'
    b'another' b'reasonable' b'post' b'to' b'organize' b'.' b'There' b'are' b'takes' b'names' b'to' b'develop' b'other' b'body' b'females' b'can' b'be' b'planned' b'to' b'alluded'
    b'they' b'may' b'have' b'beside' b'"' b'if' b'they' b'about' b'a' b'Buddhist' b'stage' b'of' b'self' b'@-@' b'workers' b'were' b'about' b'.' b'"' b'Oscar'
    b'adhering' b'Fort' b'Stepmother' b'Bowes' b'.' b'Polish' b'is' b'murdering' b'.' b'In' b'a' b'certain' b'study' b'of' b'the' b'Fur' b',' b'K\xc5\x8dsaku' b'who' b'is'
    b'thought' b'for' b'trigger' b'tolerance' b'than' b'treatment' b'.' b'It' b'is' b'<unk>' b'that' b'characteristic' b'of' b'toxic' b'may' b'be' b'found' b'to' b'be' b'the'
    b'intermediate' b'world' b'or' b'<unk>' b'to' b'determine' b'their' b'respective' b'fact' b'of' b'clouds' b'.' b'Several' b'individuals' b'molecules' b'have' b'abolished' b'it' b'in' b'a'
    b'forthcoming' b'inedible' b',' b'a' b'pounds' b'they' b'driver' b'perspectives' b'at' b'a' b'male' b'time' b'"' b'<unk>' b'given' b'strength' b'"' b'.' b'Another' b'high'
    b'development' b'for' b'that' b'time' b'may' b'be' b'seen' b'only' b'in' b'1954' b',' b'but' b'they' b'are' b'encouraged' b'in' b'Jutland' b'.' b'<eos>' b'According'
    b'to' b'nonsensical' b'sexpunctatus' b',' b'Malayan' b'transport' b'that' b'<unk>' b',' b'less' b'promised' b'and' b'they' b'irregular' b'resulting' b'.' b'Together' b',' b'it' b'would'
    b'be' b'generated' b'down' b'to' b'find' b'but' b'human' b'instruction' b'for' b'other' b'pure' b'officials' b'or' b'suggesting' b':' b'"' b'Mycena' b'when' b'<unk>' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.2
    loss: 5.168
    elapsed time (seconds): 111.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  36.804 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
