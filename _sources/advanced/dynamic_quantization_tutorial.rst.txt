.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Burr' b'has' b'seen' b'his' b'rise' b'to' b'force' b'the' b'There' b'of' b'a' b'planet' b'and' b'historians' b'while' b'it' b'sent' b'them' b'and' b'back'
    b'on' b'with' b'his' b'demise' b'at' b'an' b'Law' b'<unk>' b'.' b'Palmyra' b'strengthened' b'to' b'have' b'become' b'known' b'as' b'judo' b',' b'which' b'is'
    b'written' b'by' b'their' b'unique' b'flash' b'reactors' b',' b'although' b'opinionated' b'Ceres' b'manager' b'it' b'a' b'leisurely' b'intellectual' b'tongue' b'of' b'the' b'company' b','
    b'roughly' b'70' b'years' b',' b'only' b'when' b'the' b'size' b'of' b'diversity' b'will' b'reach' b'have' b'meant' b',' b'and' b'absolute' b'patriotic' b'note' b'about'
    b'up' b'to' b'a' b'feeling' b'descendants' b'that' b'Nutter' b'rather' b'than' b'produced' b'by' b'the' b'planet' b"'s" b'ability' b'to' b'walk' b'.' b'When' b'so'
    b'any' b'was' b'Show' b',' b'it' b'is' b'also' b'a' b'village' b',' b'so' b'the' b'second' b'wave' b'is' b'first' b'a' b'shield' b'.' b'In'
    b'a' b'little' b'Meaning' b'and' b'end' b',' b'in' b'particular' b',' b'a' b'roof' b'at' b'the' b'sternum' b'and' b'traders' b'figure' b'March' b'over' b'increased'
    b'territory' b',' b'with' b'Wario' b'Jarl' b',' b'then' b'a' b'soloist' b'who' b'would' b'send' b'a' b'role' b'for' b'the' b'outcome' b'of' b'its' b'v\xc4\x81da'
    b'.' b'He' b'sketch' b'making' b'while' b'and' b'World' b'the' b'Viscount' b':' b'"' b'I' b'considers' b'happens' b'to' b'anyone' b'so' b'he' b'was' b'thought'
    b'.' b'"' b'He' b'also' b'questioned' b'an' b'acronym' b'as' b'the' b'"' b"'" b'Dress' b'Fingal' b'"' b',' b'sex' b'Yeah' b'the' b'Dura' b'by'
    b'the' b'throne' b'.' b'<eos>' b'In' b'1987' b',' b'O' b"'Malley" b'indicating' b'Cambridge' b'ran' b'as' b'being' b'the' b'worst' b'character' b'.' b'Even' b'seeing'
    b'O' b"'Malley" b'with' b'his' b'defeat' b'in' b'the' b'European' b'Territorial' b'War' b'and' b'the' b'<unk>' b'Tourism' b',' b'Laney' b'Traill' b'fifth' b'two' b'on'
    b'the' b'Sephiroth' b"'s" b'than' b'50' b'years' b',' b'and' b'Justin' b'F1' b'selling' b'in' b'1890' b'Punt' b'to' b'adopting' b'up' b',' b'back' b'to'
    b'War' b'Paul' b'Clay' b'.' b'Over' b'the' b'past' b',' b'Quite' b'Stuever' b'portrays' b'endorsement' b'it' b'to' b'confirm' b'Christie' b"'s" b'ability' b'that' b'March'
    b'8' b'.' b'<eos>' b'Chen' b'will' b'have' b'lost' b'lad' b'parallel' b'to' b'a' b'ongoing' b'fantastic' b'body' b',' b'but' b'the' b'aim' b'of' b'the'
    b'series' b'reflects' b'Isis' b'to' b'end' b'his' b'men' b'.' b'During' b'this' b'reason' b'brooch' b'organising' b'Mosley' b'to' b'learn' b'as' b'it' b'happened' b'under'
    b'shoes' b'at' b'a' b'time' b'that' b'contentment' b'proved' b'to' b'study' b'himself' b'.' b'Reports' b'is' b'no' b'several' b'besides' b'games' b'at' b'all' b'episode'
    b',' b'offering' b'them' b'back' b'in' b'construction' b'and' b'2012' b'.' b'According' b'to' b'David' b'Wilson' b'in' b'Orlando' b',' b'he' b'found' b'found' b'several'
    b'different' b'Thanhouser' b'Man' b'in' b'1621' b',' b'here' b'.' b'Robert' b'Boland' b'prompted' b'it' b'as' b'the' b'lit.' b'system' b'of' b'Carol' b'.' b'The'
    b'members' b'Exeter' b"'s" b'1986' b'headquarters' b'was' b'his' b'<unk>' b'of' b'immigrant' b'light' b'advertisements' b'and' b'Asin' b'was' b'found' b'.' b'<unk>' b'in' b'a'
    b'one' b'@-@' b'bar' b'international' b'work' b'was' b'noted' b'in' b'<unk>' b'for' b'different' b'recordings' b'.' b'This' b'was' b'only' b'developed' b',' b'and' b'that'
    b'playing' b'two' b'other' b'stories' b'in' b'Campaign' b'and' b'hidden' b'Inocybe' b'I' b'were' b'claimed' b'.' b'Rosebery' b'was' b'marketed' b'in' b'<unk>' b'medieval' b'century'
    b',' b'winning' b'them' b'subordinates' b',' b'although' b'his' b'<unk>' b'COMADRES' b'was' b'badly' b'Unusually' b'.' b'He' b'is' b'now' b'known' b'for' b'a' b'newer'
    b'sepulchral' b'school' b'piece' b'.' b'I' b'is' b'taking' b'another' b'short' b'very' b'public' b'writer' b'reflects' b'islands' b'(' b'a' b'two' b'\xe2\x80\x93' b'inferior' b'order'
    b'apart' b')' b'.' b'eligible' b'told' b'by' b'small' b'Paris' b'.' b'In' b'addition' b'to' b'Stansfield' b'criticized' b'jockey' b',' b'George' b'Likewise' b'a' b'Cast'
    b'between' b'P' b'deeming' b'and' b'metalloid' b'at' b'the' b'time' b'of' b'Gladstone' b"'s" b'next' b'ice' b'series' b'being' b'asked' b'to' b'use' b'publications' b'.'
    b'This' b'story' b'was' b'misunderstood' b'by' b'Wieselman' b'@-@' b'<unk>' b'O' b"'Malley" b',' b'killing' b'@-@' b'shirts' b'for' b'his' b'repressive' b'recommendation' b'excavations' b'from'
    b'the' b'year' b'.' b'Jeremi' b'has' b'been' b'yet' b'once' b'cut' b'about' b'to' b'land' b',' b'which' b'said' b'he' b'was' b'biographies' b'a' b'commercial'
    b'spoof' b'of' b'physical' b'Rights' b'but' b'maintained' b'his' b'final' b'timeline' b',' b'adding' b'"' b'a' b'response' b'to' b'whoever' b'on' b'1,000th' b'<unk>' b'/'
    b'Venus' b'who' b'...' b'like' b'those' b'of' b'her' b'many' b'children' b'against' b'Brittany' b'is' b'lost' b'.' b'"' b'He' b'also' b'suggested' b',' b'"'
    b'it' b'was' b'impossible' b'to' b'find' b'his' b'entertainment' b'you' b"'ll" b'look' b'"' b'.' b'The' b'blood' b'Justice' b'<unk>' b'enabled' b'compounds' b'a' b'composition'
    b'from' b'the' b'<unk>' b'control' b'between' b'a' b'b' b'and' b'mid' b'@-@' b'<unk>' b'character' b'Supernova' b'noblemen' b'.' b'O' b"'Malley" b'and' b'worry' b'was'
    b'displayed' b'in' b'1954' b';' b'however' b',' b'Hairan' b'<unk>' b'was' b'first' b'nominated' b'to' b'Geoff' b'over' b'talks' b'.' b'In' b'addition' b'to' b'diplomat'
    b'staccato' b'that' b'supporters' b'increased' b'a' b'role' b'within' b'journalists' b'and' b'<unk>' b'and' b'fight' b'about' b'the' b'series' b'.' b'In' b'addition' b',' b'the'
    b'<unk>' b'No' b'spout' b'and' b'<unk>' b'sketches' b'granted' b'Wagner' b'in' b'a' b'wide' b'role' b',' b'flowed' b'only' b'from' b'matter' b'such' b'as' b'Ray'
    b'Lao' b',' b'he' b'worked' b'with' b'Cardinal' b'Denis' b'Taylor' b'(' b'died' b'in' b'2004' b')' b'.' b'His' b'earlier' b'library' b'included' b'a' b'pulp'
    b'practice' b'of' b'decision' b'created' b'of' b'the' b'M\xc4\x81ori' b':' b'"' b'What' b',' b'in' b'the' b'way' b'of' b'Morning' b'"' b'(' b'1983' b')'
    b',' b'shared' b'an' b'book' b'he' b'emerged' b'for' b'Alaska' b'she' b'could' b'leave' b'for' b'behind' b'the' b'moment' b"'s" b'Crash' b'<unk>' b',' b'explore'
    b'Brown' b',' b'Egypt' b'and' b'densities' b'a' b'challenge' b'out' b'(' b'<unk>' b'is' b'their' b'highly' b'intimate' b'journalist' b'elected' b'it' b',' b'The' b'claim'
    b'.' b'The' b'story' b'of' b'the' b'poison' b'led' b'the' b'series' b',' b'adding' b'"' b'Ceres' b'that' b'I' b'shall' b'write' b'from' b'.' b'If'
    b'there' b'is' b'stolen' b'up' b'of' b'that' b'head' b'handles' b'down' b'this' b'"' b'.' b'When' b'this' b'hero' b',' b'Kim' b'Raffles' b'are' b'a'
    b'leader' b'of' b'Hart' b'.' b'The' b'province' b'and' b'resources' b'may' b'be' b'excited' b'to' b'play' b'personally' b'.' b'Due' b'to' b'<unk>' b',' b'large'
    b'stories' b'between' b'art' b'and' b'sketches' b'were' b'<unk>' b',' b'so' b'temporarily' b'officers' b',' b'750' b'\xe2\x80\x93' b'79' b'%' b'<unk>' b'transition' b'clergy' b'('
    b'105' b'points' b')' b'government' b'.' b'<eos>' b'The' b'injury' b'are' b'spent' b'@-@' b'frequency' b',' b'and' b'not' b'seem' b'to' b'remove' b'transfer' b'constructing'
    b',' b'should' b'lose' b'<unk>' b'his' b'rate' b'and' b'also' b'easily' b'game' b'signalled' b'.' b'A' b'close' b'boy' b'worked' b'into' b'Congress' b'by' b'Edgeworth'
    b'.' b'<eos>' b'O' b"'Malley" b'was' b'a' b'result' b'for' b'the' b'second' b'of' b'its' b'books' b',' b'based' b'in' b'other' b'<unk>' b'ballot' b'.'
    b'Some' b'of' b'the' b'critics' b'\xe2\x80\x93' b'unable' b'was' b'being' b'told' b'member' b'of' b'Thatgamecompany' b'or' b'<unk>' b'by' b'the' b'Byzantine' b'archaeologist' b'McDonough' b','
    b'who' b'tells' b'falling' b'after' b'better' b'votes' b'filtering' b'.' b'Mosley' b'receives' b'terrorism' b',' b'thus' b'developed' b'that' b'"' b'gay' b'Depot' b'is' b'first'
    b'drawn' b'for' b'schools' b'and' b'Roman' b'military' b'sex' b',' b'which' b',' b'pretty' b'made' b'a' b'planet' b'to' b'have' b'been' b'<unk>' b'or' b','
    b'probably' b'in' b'poem' b'a' b'maturity' b'and' b'a' b'really' b'find' b'error' b',' b'with' b'the' b'age' b'of' b'a' b'death' b'<unk>' b'it' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.9
    loss: 5.168
    elapsed time (seconds): 107.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  12.787 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
