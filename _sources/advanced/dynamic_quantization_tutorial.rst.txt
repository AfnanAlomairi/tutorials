
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'assembly' b'chromatin' b'were' b'introduced' b'to' b're' b'@-@' b'tested' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Independent' b'fairy' b'Pike' b'=' b'<eos>' b'<eos>' b'The'
    b'eucalypts' b'of' b'power' b',' b'or' b'two' b'scientific' b'land' b'sprints' b'(' b'including' b'his' b'musical' b',' b'American' b'Curse' b')' b',' b'led' b'two'
    b'to' b'reproduction' b'elements' b'and' b'plant' b'lives' b',' b'such' b'from' b'prokaryotes' b',' b'by' b'French' b',' b'and' b'all' b'parts' b',' b'Aldwych' b','
    b'editing' b'and' b'insects' b'and' b'<unk>' b'.' b'Additionally' b',' b'they' b'have' b'accounted' b'to' b'the' b'immigration' b'of' b'grades' b',' b'reaching' b'Delaware' b'University'
    b'pattern' b',' b'Trustee' b',' b'2D' b',' b'Cayuga' b',' b'Andes' b',' b'bone' b',' b'<unk>' b',' b'Geographical' b'humanities' b',' b'observing' b'Boogie' b'Elohim'
    b',' b'ascetics' b'(' b'2012' b')' b',' b'G.' b'<unk>' b'<eos>' b'Highways' b'(' b'Spirits' b')' b'<eos>' b'<eos>' b'<eos>' b'=' b'The' b'Borderers' b'='
    b'<eos>' b'<eos>' b'Fox' b'raising' b'tawny' b'amounts' b'of' b'his' b'celebrity' b'and' b'saptibha\xe1\xb9\x85g\xc4\xab' b',' b'including' b'dirt' b',' b'<unk>' b',' b'The' b'crew' b'to'
    b'become' b'home' b':' b'a' b'retail' b',' b'nuclear' b'Delaborde' b',' b'and' b'individual' b'display' b'.' b'As' b'van' b'Mills' b'!' b',' b'Snow' b'Resort'
    b',' b'needing' b'Harris' b'a' b'similar' b'barrier' b'of' b'the' b'church' b'and' b'suggesting' b':' b'"' b'Only' b',' b'so' b'outposts' b'on' b'writing' b'hand'
    b'can' b"'t" b'shore' b'it' b'.' b'but' b'this' b'may' b'try' b'pain' b'to' b'do' b'over' b'everything' b'.' b'If' b'they' b'also' b'think' b'both'
    b'stellar' b',' b'and' b'<unk>' b'treatment' b'of' b'descriptions' b'are' b'white' b'Ravana' b',' b'claiming' b'"' b'(' b'such' b'as' b'her' b'definition' b'to' b'be'
    b'curious' b')' b',' b'this' b'time' b',' b'on' b'the' b'disadvantage' b',' b'but' b'it' b'is' b'very' b'altogether' b'.' b'To' b'be' b'used' b','
    b'often' b'clockwise' b'by' b'sex' b'as' b'they' b'wears' b'its' b'screen' b'as' b'I' b'lose' b'he' b'first' b'make' b'me' b'to' b'two' b'victims' b'.'
    b'This' b'will' b'be' b'discharged' b'with' b'Nirvana' b'already' b'forced' b'only' b'over' b'12' b'months' b'old' b'at' b'angle' b'.' b'Ceres' b'covers' b'her' b'look'
    b'to' b'fill' b'pressure' b'video' b'.' b'Warner' b'notes' b':' b'"' b'larger' b'listening' b'wanted' b'to' b'write' b'even' b'to' b'neither' b'activating' b'them' b','
    b'even' b'facts' b'of' b'322' b'.' b'This' b'would' b'be' b'an' b'big' b'character' b',' b'Sisler' b'cannot' b'<unk>' b'young' b'hands' b'around' b'boats' b'.'
    b'"' b'Whatever' b'no' b'themes' b',' b'"' b'I' b'were' b'possible' b'in' b'space' b'to' b'be' b'.' b'"' b'When' b'they' b'were' b'based' b'for'
    b'Aerith' b',' b'Something' b':' b'the' b'Pirates' b'and' b'Ramesh' b'dancers' b'criticized' b'Martin' b'and' b'Joe' b'<unk>' b',' b'who' b'adopted' b'his' b'stocked' b'during'
    b'all' b'feathers' b'.' b'The' b'goal' b'of' b'used' b'to' b'him' b'to' b'be' b'computer' b'by' b'extra' b'texts' b'in' b'<unk>' b'@-@' b'<unk>' b'.'
    b'At' b'a' b'lifestyle' b'white' b'(' b'no' b'Manila' b'edition' b')' b',' b'anywhere' b'to' b'the' b'mental' b'interference' b',' b'<unk>' b'feathers' b'signs' b','
    b'found' b'touching' b'a' b'better' b'penis' b',' b'and' b'sisters' b'do' b'not' b'handle' b'they' b'have' b'currents' b',' b'or' b'flour' b'.' b'For' b'example'
    b'on' b'for' b'screen' b',' b'when' b'the' b'female' b'became' b'short' b',' b'they' b'are' b'afraid' b'to' b'be' b'lift' b'.' b'According' b'to' b'the'
    b'increasingly' b'<unk>' b'safe' b',' b'Heinrich' b'benefited' b'that' b'the' b'kakapo' b'can' b'Keats' b'be' b'exhausted' b'in' b'a' b'myth' b'on' b'the' b'intruder' b'and'
    b'may' b'be' b'against' b'Director' b'@-@' b'tense' b'Harbor' b'.' b'Crash' b'or' b'Kanata' b'confiscate' b'<unk>' b'of' b'the' b'verses' b'fireworks' b'and' b'poorly' b'occurs'
    b'in' b'aged' b'barriers' b'and' b'finance' b'so' b'negative' b'distances' b'on' b'400' b'minutes' b'with' b'a' b'full' b'.' b'One' b'other' b'even' b'change' b'metals'
    b'around' b'random' b'species' b'of' b'specific' b'starlings' b'similarly' b'head' b'contact' b'and' b'greater' b'dogs' b'.' b'While' b'the' b'player' b'might' b'be' b'required' b'to'
    b'constitute' b'another' b'courage' b'Hearts' b'@-@' b'sex' b'defense' b',' b'force' b'author' b'Me' b'Burman' b'takes' b'his' b'name' b'to' b'prepare' b'for' b'Dundee' b';'
    b'his' b'wives' b'found' b'them' b'to' b'ease' b'even' b'when' b'"' b'<unk>' b'would' b'be' b'filled' b';' b'they' b'might' b'be' b'flawed' b'a' b'planet'
    b',' b'then' b'(' b'up' b'to' b'Ayyubid' b'though' b'I' b'put' b'it' b'with' b'us' b'to' b'similar' b'to' b'a' b'kind' b'of' b'<unk>' b')'
    b'and' b'a' b'bare' b'bond' b'is' b'so' b'.' b'If' b'reincarnation' b'in' b'Gunpowder' b'brought' b'those' b'in' b'a' b'Gotta' b'chirps' b'are' b',' b'"'
    b'and' b'pass' b'to' b'by' b'the' b'Europan' b'idealist' b'Crash' b'Z.' b'Ravinder' b"'s" b'book' b',' b'convict' b'abused' b'as' b'referring' b'him' b'to' b'C.R.U.S.H.'
    b'.' b'According' b'to' b'Shogakukan' b',' b'"' b'483' b'hand' b'builds' b'websites' b'about' b'that' b',' b'[' b'they' b'do' b'.' b'"' b'<eos>' b'"'
    b'Hugh' b"'Andrade" b'"' b'is' b'increasingly' b'unreliable' b'.' b'A' b'migratory' b'worked' b'on' b'2' b'reviews' b',' b'which' b'was' b'brought' b'to' b'their' b'content'
    b';' b'Mutinus' b'seer' b'Park' b'lek' b'PDR' b'HMS' b'Chinese' b'laughed' b'at' b'Twelfth' b'endorsement' b'player' b'behind' b'the' b'personification' b'nursing' b'from' b'restrictions' b'.'
    b'Crash' b':' b'"' b'tale' b'him' b'translating' b'.' b'I' b'don' b"'t" b'be' b'a' b'able' b'to' b'appear' b'with' b'a' b'guy' b',' b'and'
    b'that' b'Bloom' b'did' b'not' b'upgrade' b'out' b'.' b'"' b'After' b'the' b'character' b'point' b'the' b'Fourth' b'note' b'of' b'Ceres' b'by' b'outfit' b','
    b'<unk>' b'could' b'prepare' b'hit' b'solitaire' b'when' b'many' b'birds' b'were' b'painted' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Chihuahua' b'(' b'1818' b')' b'='
    b'<eos>' b'<eos>' b'In' b'their' b'Adil' b'1999' b'comprised' b'a' b'transit' b'of' b'6' b'hurricane' b'apart' b'in' b'their' b'pre' b'@-@' b'syllable' b'.' b'The'
    b'notice' b'later' b'is' b'Arnhem' b'(' b'Mughal' b'@-@' b'time' b')' b'.' b'A' b'special' b'belt' b'is' b'around' b'this' b'surviving' b'ap' b'Newton' b'Unit'
    b'below' b'a' b'attitude' b'.' b'Both' b'all' b'designs' b'will' b'be' b'close' b'and' b'the' b'threat' b'was' b'predicted' b'to' b'handle' b'<unk>' b'nearby' b','
    b'as' b'of' b'the' b'interior' b'term' b'is' b'very' b'the' b'closest' b'mechanism' b'by' b'their' b'predators' b'.' b'When' b'they' b'cannot' b'be' b'now' b'draws'
    b'from' b'the' b'metaphor' b'in' b'detoxified' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Art' b'=' b'=' b'=' b'<eos>' b'<eos>' b'During' b'its' b'newly'
    b'and' b'herds' b'there' b'oil' b'account' b'of' b'Madison' b'or' b'Gaboon' b'<unk>' b',' b'one' b'young' b'physical' b'displays' b',' b'O.' b'Compounds' b',' b'and'
    b'Cake' b'classics' b',' b'which' b'was' b'funded' b'and' b'observed' b'Corporation' b'.' b'Most' b'nuclei' b'can' b'be' b'found' b'by' b'burial' b'storm' b',' b'precincts'
    b'and' b'social' b'even' b'finder' b'.' b'<eos>' b'In' b'the' b'breeding' b'state' b'of' b'Canada' b',' b'Rama' b',' b'and' b'Edna' b'tickets' b'to' b'villages'
    b',' b'thought' b'it' b'is' b'not' b'described' b'by' b'melancholic' b',' b'a' b'male' b'court' b'is' b'with' b'its' b'subject' b'and' b'during' b'growing' b'thought'
    b',' b'might' b'drop' b'greatly' b'reserve' b',' b'to' b'connect' b'a' b'<unk>' b'house' b'.' b'They' b'690' b'potential' b'beginnings' b',' b'they' b'often' b'enter'
    b'the' b'decline' b'of' b'abandons' b'<unk>' b'as' b'such' b'.' b'Nonetheless' b',' b'they' b'are' b'classified' b'below' b'its' b'<unk>' b'that' b'they' b'should' b'be'
    b'disappointed' b'.' b'<eos>' b'Que' b'basidia' b'(' b'968' b'graphs' b',' b'voiced' b'by' b'forgiveness' b')' b',' b'Hubbardton' b'School' b',' b'latitudes' b'<unk>' b'throughout'
    b'Annapolis' b'tasks' b',' b'are' b'halfway' b'to' b'record' b'more' b'Crown' b'languages' b'.' b'<eos>' b'Celtic' b'land' b'versus' b'significant' b'birds' b'do' b'not' b'be'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.6
    loss: 5.168
    elapsed time (seconds): 103.5




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  7.926 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
