
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Symptoms' b'in' b'mainstream' b'hands' b',' b'with' b'an' b'Feather' b'@-@' b'powered' b'<unk>' b'lasted' b'run' b'in' b'Spain' b'.' b'It' b'has' b'since' b'choose'
    b'a' b'resemblance' b'to' b'its' b'presentation' b'.' b'He' b'concerned' b'his' b'stomach' b',' b'appealed' b'to' b'as' b'other' b'or' b'two' b'NBA' b'pistols' b'.'
    b'After' b'a' b'<unk>' b'signed' b'by' b'other' b'species' b',' b'a' b'vassal' b'of' b'annular' b',' b'<unk>' b'understand' b'Hal' b'<unk>' b'(' b'Ishmaelites' b')'
    b',' b'and' b'possibly' b'jostling' b'it' b'his' b'love' b';' b'it' b'is' b'generally' b'lost' b'.' b'All' b'has' b'nothing' b'on' b'plants' b'of' b'males'
    b',' b'with' b'taking' b'more' b'Uganda' b',' b'either' b'more' b'than' b'a' b'viewer' b'.' b'The' b'same' b'Litter' b'service' b'include' b'Level' b'Island' b','
    b'but' b'<unk>' b'services' b'may' b'be' b'found' b'to' b'Krak\xc3\xb3w' b'that' b'"' b'may' b'monitor' b'much' b'must' b'be' b'much' b'true' b',' b'the' b'asteroid'
    b'Red' b'<unk>' b'refinery' b',' b'"' b'USA' b'considered' b'it' b'a' b'prolonged' b'star' b'to' b'refer' b'"' b'a' b'citizens' b'that' b'prefers' b'with' b'that'
    b'species' b'of' b'people' b'rather' b'embracing' b'on' b'his' b'sense' b'as' b'their' b'arc' b'naturally' b'?' b'"' b'<eos>' b'When' b'there' b'is' b'no' b'male'
    b'candidate' b',' b'but' b'the' b'Old' b'Minister' b'was' b'imported' b'over' b'drunken' b',' b'the' b'eliminating' b'<unk>' b'(' b'from' b'Inari' b')' b'is' b'a'
    b'better' b'woman' b'who' b'describes' b'counsel' b'.' b'<unk>' b',' b'<unk>' b'Blofeld' b'(' b'Lu' b'acid' b')' b',' b'destruction' b'(' b'known' b'for' b'1213'
    b',' b'<unk>' b',' b'<unk>' b')' b'and' b'poison' b'cannot' b'look' b'to' b'guilty' b'of' b'cells' b'from' b'approximately' b'5' b'%' b'of' b'all' b'person'
    b'who' b'become' b'wholly' b'by' b'the' b'creative' b'swallow' b'nationality' b'to' b'"' b'suggest' b'to' b'be' b'canceled' b'in' b'human' b'form' b'to' b'begin' b'winter'
    b'until' b'this' b'one' b'to' b'attempt' b'to' b'leave' b'her' b'ability' b'in' b'naming' b',' b'doing' b'so' b'a' b'shelter' b'whose' b'cathedral' b'.' b'"'
    b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'Crash' b'Boom' b'Bang' b'Adventure' b'was' b'elected' b'with' b'one' b'ALL' b'of' b'possible'
    b'information' b',' b'including' b'1' b'\xe2\x80\x93' b'100' b'%' b',' b'and' b'averaged' b'enlisted' b'best' b'nine' b'years' b',' b'including' b'drum' b'achievements' b'from' b'characters'
    b'.' b'<eos>' b'Years' b'records' b'with' b'a' b'planet' b'of' b'two' b'hemmemas' b',' b'ran' b'on' b'but' b'remains' b'would' b'attract' b'or' b'try' b'an'
    b'female' b'game' b'with' b'Ceres' b'.' b'Two' b'songs' b'Titans' b'treatment' b'discovers' b'sends' b'foraging' b'opponents' b',' b'which' b'even' b'speaks' b'.' b'The' b'background'
    b'calls' b'support' b'for' b'a' b'nearby' b'understanding' b'and' b'less' b'agenda' b',' b'including' b'strumming' b',' b'each' b'go' b'or' b'work' b',' b'arriving' b'in'
    b'a' b'gill' b'smell' b'.' b'There' b'are' b'three' b'methods' b'that' b'find' b'or' b'similar' b'Human' b'officials' b'are' b'able' b'to' b'prevent' b'world' b'pedestrian'
    b'.' b'While' b'very' b'large' b'1st' b',' b'its' b'inhabitants' b'\xe2\x80\x94' b'Leckwith' b',' b'time' b',' b'luminescence' b'reduces' b'us' b'and' b'withdrawn' b'different' b'descriptions'
    b'of' b'upper' b',' b'to' b'English' b'when' b'they' b'should' b'act' b'they' b'were' b'understood' b'by' b'being' b'bent' b'and' b'millions' b'of' b'them' b'.'
    b'Writing' b',' b'they' b'surprised' b'rapid' b'functions' b'of' b'the' b'audience' b'.' b'These' b'starling' b'such' b'as' b'<unk>' b'and' b'insurance' b'or' b'even' b'enjoy'
    b',' b'may' b'allow' b'up' b'them' b'living' b'.' b'This' b'is' b'also' b'part' b'of' b'this' b'bird' b'.' b'One' b'flocks' b'predicted' b'that' b'their'
    b'"' b'affection' b'of' b'comparison' b'regionally' b';' b'or' b'Anders' b',' b'and' b'any' b'information' b'with' b'a' b'such' b'dramatic' b'muscle' b'body' b'likely' b';'
    b'Lost' b'or' b'Oedjang' b'closely' b'indicate' b',' b'exciting' b',' b'eating' b'circles' b',' b'so' b'Sb' b'judge' b'from' b'any' b'of' b'what' b'is' b'shot'
    b'.' b'"' b'This' b'manufacturers' b'is' b'known' b'between' b'<unk>' b'and' b'then' b'tracks' b'at' b'a' b'sure' b'that' b'evolved' b'itself' b'due' b'to' b'the'
    b'species' b'expressed' b'into' b'rate' b'of' b'flight' b'where' b'their' b'own' b',' b'Heine' b'does' b'not' b'wanna' b'stereotyped' b'more' b'than' b'those' b'every' b'swallowing'
    b'to' b'grass' b'expense' b'.' b'When' b'the' b'kakapo' b'is' b'thick' b',' b'birds' b'transitions' b'from' b'7' b'\xe2\x80\x93' b'25' b'on' b'the' b'back' b','
    b'but' b'it' b'does' b'not' b'be' b'used' b'for' b'his' b'AIDS' b',' b'to' b'bring' b'from' b'the' b'same' b'time' b'where' b'males' b'listed' b'her'
    b'grandiosity' b'into' b'periods' b'.' b'Likewise' b',' b'there' b'are' b'other' b'very' b'apparent' b'fins' b'by' b'calls' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Morning'
    b'and' b'rotation' b'=' b'=' b'<eos>' b'<eos>' b'The' b'high' b'object' b'of' b'foreign' b'systems' b',' b'mostly' b'known' b'as' b'"' b'Ceres' b'"' b','
    b'is' b'inserted' b'to' b'Korea' b'@-@' b'jaw' b',' b'a' b'man' b'in' b'renal' b'manner' b'during' b'Egyptian' b'Australia' b'.' b'A' b'rectory' b'also' b'responded'
    b'agreeing' b'to' b'install' b'a' b'collector' b'from' b'vacation' b':' b'angels' b'var.' b'(' b'Fall' b')' b',' b'a' b'unexpected' b'layer' b'of' b'1300' b'located'
    b'(' b'two' b')' b',' b'(' b'12' b'<unk>' b')' b',' b'and' b'the' b'same' b'quality' b'on' b'some' b'islands' b'.' b'A' b'female' b'of'
    b'female' b'equipment' b'are' b'20' b'@.@' b'4' b'years' b'per' b'33' b'@.@' b'5' b'cm' b'(' b'5' b'@.@' b'8' b'km' b'/' b'h' b')'
    b'.' b'His' b'first' b'length' b'of' b'M\xc4\x81ori' b'unfortunate' b'is' b'smooth' b',' b'with' b'food' b'in' b'width' b',' b'which' b'is' b'killed' b'.' b'Novak'
    b'squares' b'have' b'a' b'long' b',' b'one' b'to' b'death' b'with' b'feathers' b'or' b'1935' b',' b'attempting' b'to' b'approve' b'males' b'.' b'Velocetron' b'Taxi'
    b'is' b'probably' b'to' b'earn' b'several' b'although' b'males' b'of' b'eggs' b',' b'which' b'may' b'remain' b'nighttime' b'contain' b'process' b'.' b'In' b'1998' b','
    b'the' b'males' b'prediction' b'was' b'not' b'male' b'.' b'Additionally' b',' b'they' b'are' b'chased' b'<unk>' b'.' b'type' b',' b'rather' b'than' b'lining' b'or'
    b'from' b'sandy' b',' b'Ben' b'moves' b'on' b'a' b'accuse' b',' b'with' b'way' b'\xe2\x80\x93' b'including' b'shrubs' b'.' b'There' b'are' b'no' b'red' b'invertebrates'
    b',' b'causing' b'males' b'eat' b'<unk>' b',' b'and' b'the' b'Malay' b'tip' b'.' b'The' b'male' b'is' b'fed' b'by' b'then' b'yellow' b'grey' b','
    b'which' b'consists' b'of' b'well' b',' b'on' b'a' b'mid' b'@-@' b'8' b'or' b'side' b':' b'33' b',' b'indicating' b'"' b'mercury' b'gray' b'"'
    b'.' b'dupatta' b'for' b'females' b'have' b'no' b'only' b'over' b'40' b'are' b'someone' b'(' b'which' b'will' b'be' b'more' b'frequent' b'.' b'Once' b'foraging'
    b'are' b'grind' b',' b'even' b'their' b'unusual' b'down' b')' b'is' b'derived' b'.' b'It' b'is' b'33' b'\xe2\x80\x93' b'21' b'cm' b'(' b'2' b'@.@'
    b'10' b'in' b')' b'from' b'a' b'slip' b'where' b'genetic' b'males' b'may' b'be' b'found' b'to' b'see' b'or' b'give' b'their' b'surface' b'.' b'Once'
    b'they' b'long' b'potentially' b'Farber' b'bear' b'stick' b',' b'they' b'confess' b'that' b'they' b'can' b'find' b'to' b'be' b'good' b'.' b'In' b'stir' b','
    b'it' b'can' b'be' b'uneventful' b'.' b'These' b'starlings' b'serve' b'as' b'they' b'have' b'distances' b'late' b'.' b'The' b'female' b'are' b'highly' b'concerned' b'to'
    b'be' b'seen' b'as' b'of' b'correction' b'.' b'sexuality' b',' b'poured' b',' b'conservation' b',' b'prevents' b'all' b'other' b'fat' b',' b'is' b'being' b'recited'
    b'throughout' b'this' b'cycle' b'on' b'the' b'other' b'@-@' b'south' b'era' b'\xe2\x80\x93' b'93' b',' b'most' b'effectively' b"'" b'substance' b"'" b'(' b'<unk>' b','
    b'red' b'or' b'male' b')' b',' b'and' b'his' b'male' b'bird' b'are' b'it' b'embarrassed' b'.' b'Kenna' b'slip' b'caused' b'by' b'dark' b'scales' b','





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 176.1
    loss: 5.168
    elapsed time (seconds): 100.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  44.798 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
