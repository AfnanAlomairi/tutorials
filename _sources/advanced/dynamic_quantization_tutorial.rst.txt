
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'doing' b'up' b'a' b'millionaire' b',' b'as' b'video' b'as' b'little' b'on' b'while' b'mythical' b',' b'divine' b'oil' b',' b',' b'"' b'objector' b','
    b'<unk>' b',' b'Father' b'and' b'<unk>' b'"' b'.' b'The' b'end' b'of' b'his' b'similarly' b'reading' b'Wynter' b'of' b'RPG' b'structural' b'political' b'errors' b'from'
    b'England' b'in' b'2001' b'it' b'has' b'been' b'found' b'that' b'it' b'was' b'1679' b'from' b'Conservation' b',' b'France' b',' b'public' b'molluscs' b'and' b'<unk>'
    b',' b'thus' b'used' b'rewrite' b',' b'trying' b'to' b'be' b'officially' b'known' b'.' b'<eos>' b'In' b'addition' b',' b'easily' b'signed' b'successor' b'of' b'Leinster'
    b'on' b'a' b'Bloody' b'Power' b'District' b'in' b'1907' b';' b'the' b'executioner' b'takes' b'up' b'of' b'privacy' b'different' b'year' b'.' b'This' b'names' b'meant'
    b'was' b'generally' b'changed' b'to' b'achieve' b'contraction' b'as' b'to' b'buy' b'another' b'from' b'\xe2\x82\xb9' b'foreign' b'million' b'or' b'will' b'be' b'mysteries' b'claim' b'policies'
    b'.' b'<eos>' b'Mosley' b'defeated' b'Crash' b'agency' b'Barnes' b',' b'which' b'had' b'been' b'substantially' b'a' b'to' b'naming' b'"' b'Great' b'Wasp' b'"' b','
    b'which' b'spent' b'of' b'regular' b'career' b',' b'only' b'in' b'Germany' b'.' b'The' b'first' b'for' b'this' b'version' b'was' b'exhausted' b',' b'changing' b'the'
    b'idea' b'of' b'"' b'T' b'quotes' b'"' b'strategy' b'between' b'Commerce' b'and' b'Osage' b',' b'Hornung' b'returned' b'a' b'strong' b'financial' b'Hindu' b'artist' b','
    b'all' b'"' b'liquor' b'"' b'controlled' b'Stevens' b'en' b'capsules' b'of' b'the' b'content' b'<unk>' b'much' b'arrangements' b'and' b'Sarajevo' b'.' b'The' b'starkly' b'debate'
    b'<unk>' b'their' b'name' b',' b'which' b'would' b'be' b'built' b'by' b'Joyce' b'couplet' b'Revolutionary' b'to' b'a' b'quaint' b'rendition' b'about' b'a' b'ability' b'to'
    b'take' b'<unk>' b',' b'both' b'simultaneously' b'.' b'His' b'footage' b'of' b'these' b'Same' b'@-@' b'vocal' b'D.' b'Honorius' b'suggests' b'it' b'"' b'wrote' b'literary'
    b'than' b'the' b'reader' b'"' b',' b'after' b'it' b'girl' b'"' b'demonstrates' b'us' b'unspecified' b',' b'many' b'years' b',' b'it' b'read' b'involved' b'even'
    b'away' b',' b'or' b'ever' b'discarding' b',' b'substance' b'expressed' b'at' b'a' b'time' b'after' b'Reviewed' b'agents' b'all' b'convince' b'the' b'poet' b'thinks' b','
    b'any' b'of' b'those' b'the' b'most' b'probably' b'letters' b'in' b'trouble' b'where' b'they' b'don' b"'t" b'function' b'journalist' b'"' b'Less' b'strong' b'polls' b','
    b'Pfaster' b'and' b'Twenty' b'"' b'aggressive' b'action' b',' b'example' b',' b'Katherine' b'(' b'falsely' b')' b',' b'complexes' b'and' b'spectacular' b'writer' b'"' b'.'
    b'In' b'a' b'alien' b'review' b'that' b'he' b'couldn' b"'t" b'well' b'on' b'being' b'high' b'contemporary' b';' b'he' b'wrote' b'a' b'positive' b'rate' b'for'
    b'"' b'explicit' b'playing' b'desire' b'"' b'with' b'<unk>' b'.' b'Priestley' b'said' b'that' b'"' b'the' b'man' b'is' b'only' b'thought' b'to' b'bring' b'mention'
    b'heart' b'.' b'I' b"'ve" b'been' b'a' b'necessary' b'classic' b'<unk>' b'from' b'.' b'"' b'In' b'contrast' b'to' b'The' b'Cinema' b'on' b'Poetry' b','
    b'Mosley' b',' b'the' b'spirit' b'of' b'The' b'difficulty' b'of' b'<unk>' b'Devlin' b',' b'would' b'resolve' b'the' b'city' b'audiences' b'in' b'something' b'person' b'.'
    b'The' b'rifled' b'Chronicle' b'is' b'both' b'.' b'The' b'rhythm' b'deal' b'published' b'on' b'his' b'cheese' b'when' b'bimonthly' b'sodium' b'Doran' b'denominations' b'takes' b'fusion'
    b'a' b'sexual' b'end' b'to' b'kindly' b'.' b'Despite' b'the' b'copies' b'of' b'his' b'faith' b',' b'in' b'Simon' b'Hearts' b'Dave' b'Scotland' b'<unk>' b'single'
    b'show' b'style' b',' b'and' b'Davidson' b'is' b'a' b'noticeable' b'Agathaumas' b'who' b'sends' b'different' b'religions' b'.' b'Max' b'Friedrich' b'de' b'\xe2\x80\x99' b'Dell' b'said'
    b'up' b'a' b'way' b'to' b'moving' b'as' b'a' b'"' b'physical' b'car' b'dating' b'water' b',' b'and' b'he' b'believes' b'a' b'dramatic' b'lawsuit' b'on'
    b'the' b'marriage' b'the' b'art' b'probably' b'.' b'"' b'The' b'book' b'promised' b'to' b'try' b'their' b'smoothly' b'conditions' b'on' b'a' b'infant' b'and' b'advertising'
    b'mechanics' b';' b'Tompkins' b'Williams' b'was' b'<unk>' b',' b'and' b'would' b'indicate' b'great' b'concerts' b',' b'although' b'his' b'father' b',' b'having' b'a' b'mixed'
    b'amount' b'of' b'ex' b'@-@' b'snap' b'who' b'throws' b'his' b'vision' b'establishes' b'the' b'dark' b'of' b'us' b'.' b'The' b'book' b'look' b'affection' b'on'
    b'their' b'head' b',' b'in' b'which' b'he' b'was' b'"' b'not' b'attached' b'to' b'mail' b'"' b'and' b'a' b'unofficial' b'"' b'romantic' b'increase' b'"'
    b'that' b'"' b'could' b'have' b'natural' b'hitters' b',' b'commenting' b'[' b'some' b'make' b'a' b'heroic' b'screaming' b'"' b'.' b'He' b'returned' b'to' b'to'
    b'cultural' b'Christian' b'kinds' b'of' b'the' b'theater' b'style' b'of' b'one' b'children' b',' b'which' b'may' b'indicate' b'that' b'there' b'is' b'while' b'a' b'location'
    b'of' b'results' b'activities' b',' b'a' b'<unk>' b'plays' b'dead' b'after' b'These' b'characters' b'.' b'The' b'latter' b'squadrons' b'of' b'"' b'Moment' b"'s" b'40s'
    b'"' b'were' b'led' b'by' b'composer' b'Varuna' b'Comics' b',' b'But' b'they' b'remained' b'a' b'sentimental' b'reception' b'of' b'using' b'series' b'from' b'losing' b'"'
    b'Tina' b'donate' b'"' b',' b'said' b'hints' b'that' b'MacLeod' b'discovered' b'to' b'ensure' b'the' b'theme' b'"' b'viewers' b'reclusive' b'<unk>' b'or' b'<unk>' b'"'
    b'portray' b'a' b'asteroid' b'force' b'while' b'situations' b'and' b'material' b'were' b'ordered' b'.' b'For' b'example' b',' b'Kyra' b'confirmed' b'on' b'<unk>' b'after' b'he'
    b'give' b'the' b'show' b'of' b'Ceres' b'as' b'Secretary' b'of' b'the' b'show' b'against' b'the' b'cheers' b',' b'but' b'believes' b'it' b'"' b'packaged' b'a'
    b'distinctive' b'<unk>' b'than' b'him' b'or' b'virtues' b'called' b'[' b'sic' b']' b'.' b'I' b'Have' b"'t" b'monitor' b'it' b'.' b'"' b'was' b'never'
    b'noted' b'that' b'had' b'Apostolid\xc3\xa8s' b'a' b'"' b'little' b'"' b'that' b'"' b'sic' b',' b'Magnussen' b',' b'crossing' b'even' b'long' b'of' b'those' b'@-@'
    b'woman' b'or' b'Wippleman' b',' b'C.R.U.S.H.' b',' b'riffs' b'spaces' b',' b'and' b'Crowley' b';' b'in' b'the' b'end' b'of' b'he' b'assumed' b'any' b'whole'
    b'and' b'academics' b'return' b'from' b'his' b'lives' b'when' b'he' b'gets' b'subspecies' b'tall' b'in' b'front' b'-' b'caring' b'and' b',' b'slipped' b'up' b'.'
    b'I' b'"' b'basically' b'on' b'a' b'<unk>' b'that' b'they' b'are' b'able' b'to' b'get' b'down' b'.' b'The' b'actor' b'qualities' b'and' b'Hart' b'nuclei'
    b'the' b'evil' b'social' b'characters' b'did' b'not' b'be' b'killed' b'the' b'usual' b'unreleased' b'path' b'.' b'He' b'ends' b'read' b'a' b'heaven' b'to' b'just'
    b'Wisden' b'his' b'<unk>' b'.' b'The' b'Kir' b'Tide' b'"' b'flower' b'Gaelic' b'place' b'has' b'recognized' b'<unk>' b'or' b'chemistry' b',' b'and' b'all' b'of'
    b'their' b'gay' b'sensitive' b'@-@' b'black' b'behaviour' b'is' b'a' b'face' b'and' b'while' b'<unk>' b':' b'"' b'thing' b'with' b'for' b'thinking' b'.' b'<eos>'
    b'<unk>' b'<unk>' b'of' b'The' b'<unk>' b'"' b'The' b'Annals' b'of' b'Surrender' b'"' b'is' b'often' b'found' b'in' b'"' b'evil' b'"' b'Emma' b'Eliot'
    b'Allah' b',' b'as' b'researchers' b'was' b'suspended' b'to' b'Carroll' b'fans' b'as' b'his' b'psychological' b',' b'and' b'told' b'for' b'a' b'review' b'a' b'large'
    b'carriage' b'that' b'"' b'<unk>' b'beautifully' b'"' b'away' b';' b'but' b'it' b'is' b'the' b'"' b'paid' b'incidents' b'only' b'children' b'of' b'full' b'man'
    b'"' b'.' b'The' b'latter' b'of' b'Ceres' b'and' b'images' b'appear' b'could' b'be' b'scared' b'of' b'some' b'different' b'characters' b'and' b'induced' b'no' b'frequently'
    b'halls' b'due' b'to' b'it' b'like' b'outside' b'relaxation' b'moments' b':' b'"' b'I' b'shall' b'be' b'also' b'clear' b'only' b'<unk>' b',' b'so' b'a'
    b'girl' b'is' b'like' b'sleeping' b'mathematics' b',' b'this' b'forms' b'amassed' b'when' b'they' b'does' b'going' b'that' b'he' b'fall' b'ridiculous' b'standard' b'punishment' b'in'
    b'comparison' b';' b'condominium' b'is' b'big' b'his' b'flight' b'<unk>' b',' b'map' b'magician' b'turbines' b'Knight' b',' b'specialized' b'for' b'a' b'younger' b'old' b'compliance'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 185.5
    loss: 5.168
    elapsed time (seconds): 107.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  1.935 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
