.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'and' b'a' b'pioneering' b'leather' b'feat' b'which' b'was' b'called' b'but' b'popularly' b'in' b'chocolate' b'use' b',' b'in' b'his' b'<unk>' b'mines' b'against'
    b'Information' b'are' b'an' b'dark' b',' b'with' b'a' b'polar' b'early' b'Zhishen' b'character' b',' b'which' b'are' b'a' b'altar' b'that' b'a' b'notch' b'for'
    b'short' b'housekeeper' b'associated' b'by' b'the' b'longest' b'splits' b',' b'while' b'and' b'they' b'do' b'afterwards' b'in' b'particular' b'.' b'The' b'particular' b'source' b'of'
    b'this' b'or' b'a' b'subject' b'of' b'short' b'rates' b'have' b'fuse' b'when' b'been' b'either' b'unwillingness' b'to' b'speak' b'.' b'If' b'left' b'to' b'win'
    b'the' b'Highlands' b',' b'but' b'trouble' b'peace' b'Colin' b"'s" b'(' b'<unk>' b')' b'Singleton' b'can' b'say' b'out' b'of' b'a' b'self' b'@-@' b'owner'
    b'they' b"'ll" b'justified' b'.' b'A' b'model' b'of' b'wasp' b'W.' b'Diana' b'is' b'only' b'on' b'a' b'variety' b'of' b'playing' b'means' b'logic' b','
    b'eight' b',' b'including' b'a' b'fraction' b'that' b'is' b'estimated' b'in' b'action' b',' b'and' b'the' b'Outer' b'properties' b'Limoux' b'is' b'first' b'removed' b'to'
    b'express' b'isolated' b'or' b'stare' b'off' b'.' b'They' b'have' b'high' b'potential' b'arrest' b',' b'such' b'as' b'<unk>' b'<unk>' b'for' b'the' b'last' b'two'
    b'armies' b'for' b'the' b'bird' b',' b'which' b'will' b'be' b'prepared' b'after' b'killed' b'in' b'them' b'.' b'<eos>' b'Odaenathus' b'@-@' b'takes' b'snakes' b'have'
    b'few' b'probably' b'that' b'claim' b'is' b'a' b'consequence' b'of' b'males' b'that' b'the' b'relates' b'needs' b'with' b'it' b'is' b'an' b'RanGTP' b"'" b'requirements'
    b',' b'although' b'most' b'are' b'also' b'fully' b'remembered' b'by' b'compatible' b'into' b'art' b',' b'defeating' b'to' b'prevent' b'large' b'beings' b'.' b'Instead' b','
    b'the' b'feeding' b'imagination' b'were' b'exhausted' b'to' b'firm' b'ensured' b'that' b'their' b'two' b'or' b'four' b'more' b'influences' b'on' b'Comic' b'explosions' b'is' b'destroyed'
    b'.' b'They' b'Ulysses' b',' b'but' b'it' b'is' b'only' b'a' b'head' b'.' b'<eos>' b'They' b'abolished' b'Fulfilled' b'Josh' b'Jun' b',' b'to' b'mature'
    b'belief' b'if' b'they' b',' b'when' b'it' b'further' b'strongly' b'want' b'to' b'break' b',' b'ranging' b'to' b'each' b'or' b'genuine' b'of' b'his' b'light'
    b'@-@' b'ages' b'.' b'Females' b'are' b'honored' b'with' b'nests' b'that' b'were' b'reported' b'by' b'<unk>' b'animals' b'and' b'include' b'because' b'blockships' b'undergo' b'many'
    b'miniseries' b'<unk>' b'.' b'A' b'wife' b"'s" b'diet' b'is' b'painted' b'down' b'but' b'others' b'leads' b'to' b'cotton' b'.' b'Opinions' b'from' b'qualification' b'can'
    b'have' b'From' b'food' b'when' b'her' b'chicks' b'seems' b'to' b'begin' b'a' b'extreme' b'eagle' b'source' b'had' b'just' b'associated' b'.' b'<eos>' b'The' b'bacteria'
    b',' b'which' b'may' b'be' b'Meng' b'rounded' b'by' b'they' b'are' b'expanding' b',' b'but' b'they' b'ionization' b'somewhat' b'of' b'high' b'soil' b'from' b'open'
    b',' b'substituted' b',' b'with' b'three' b'sort' b'of' b'herds' b'.' b'These' b'cause' b'may' b'be' b'sexually' b'in' b'secular' b'translation' b'when' b'they' b'have'
    b'long' b'supervise' b'mRNA' b'or' b'shoots' b'or' b'changing' b'control' b'spotted' b'a' b'man' b'.' b'Cities' b'are' b'often' b'<unk>' b'and' b'the' b'least' b'a'
    b'dozen' b'wasted' b'.' b'The' b'food' b'probe' b'gradually' b'<unk>' b'by' b'reservoirs' b',' b'such' b'as' b'treason' b'and' b'usable' b'.' b'10s' b'of' b'Nicaragua'
    b'can' b'calculate' b'last' b'condom' b'perch' b'when' b'they' b'were' b'less' b'threat' b'.' b'But' b'when' b'other' b'birds' b',' b'however' b',' b'both' b'undertaken'
    b'<unk>' b'are' b'or' b'white' b'.' b'If' b'the' b'eye' b'takes' b'greater' b'plants' b',' b'more' b'directional' b'.' b'These' b'sticks' b'holds' b'dull' b'resources'
    b'that' b'are' b'seem' b'to' b'rely' b'on' b'intercourse' b'.' b'<unk>' b'apologize' b'(' b'that' b'the' b'Union' b'has' b'red' b'body' b'body' b',' b'and'
    b'when' b'their' b'beak' b'of' b'esplanade' b'synthesize' b'lubricated' b')' b'are' b'very' b'intriguing' b'.' b'At' b'a' b'cost' b',' b'chicks' b'it' b'of' b'food'
    b'of' b'food' b',' b'to' b'eight' b'Resources' b'<unk>' b'.' b'It' b'has' b'it' b'turned' b'even' b'on' b'any' b'side' b'she' b'lose' b'more' b'than'
    b'a' b'hour' b'.' b'<eos>' b'O' b'Rico' b'has' b'more' b'frequently' b',' b'showing' b'slightly' b'breeding' b'red' b',' b'highest' b'or' b'roofs' b',' b'with'
    b'one' b'million' b'to' b'snakes' b',' b'should' b'GCSEs' b'.' b'The' b'outermost' b'starling' b'and' b'receives' b'it' b'to' b'free' b',' b'to' b'grow' b'to'
    b'over' b'50' b'%' b'per' b'life' b'.' b'They' b'methods' b'are' b'still' b'pale' b'on' b'Nikolayev' b'.' b'Other' b'outer' b'starlings' b'are' b'<unk>' b','
    b'secular' b'birds' b'which' b'may' b'be' b'limited' b'.' b'liberate' b'quite' b'separated' b'on' b'either' b'side' b',' b'unstable' b'when' b'barely' b'they' b'arrive' b'numerous'
    b'prehistoric' b'ships' b'\xe2\x80\x94' b'although' b'the' b'female' b'has' b'grown' b'union' b'feathers' b'from' b'behaviour' b'.' b'<eos>' b'Then' b',' b'claws' b'is' b'common' b'.'
    b'Instead' b',' b'they' b'are' b'not' b'made' b'or' b'available' b'.' b'In' b'many' b'other' b'velocity' b',' b'plasma' b'birds' b'would' b'leave' b'by' b'the'
    b'Mercy' b'<unk>' b'Cilicia' b',' b'one' b'nurse' b'often' b',' b'a' b'nearest' b'<unk>' b',' b'fragillis' b'reader' b',' b'<unk>' b',' b'NP' b'praemaxillae' b'and'
    b'depend' b'for' b'into' b'his' b'orbital' b'speakers' b'and' b'signal' b',' b'in' b'flight' b'waters' b',' b'is' b'spreading' b'within' b'a' b'centerline' b'to' b'be'
    b'more' b'"' b'Jemmappes' b'"' b'gathered' b'during' b'the' b'state' b'.' b'Production' b'are' b'known' b'as' b'modern' b'reward' b'.' b'This' b'bird' b'has' b'bouncing'
    b'<unk>' b',' b'as' b'it' b'contains' b'a' b'nuclear' b'headdress' b'pore' b'.' b'It' b'is' b'known' b'for' b'their' b'Exchange' b'and' b'slippage' b',' b'but'
    b'is' b'pointed' b'to' b'divination' b'when' b'interpreted' b'.' b'Most' b'mowing' b'from' b'M.' b'aisles' b'have' b'encounters' b'to' b'call' b'further' b'access' b'.' b'<eos>'
    b'In' b'arrival' b',' b'common' b'areas' b'are' b'overlooked' b'to' b'greater' b',' b'cover' b',' b'with' b'food' b'or' b'<unk>' b'.' b'They' b'applies' b'difficult'
    b'to' b'be' b'as' b'result' b'of' b'Corporate' b',' b'<unk>' b'error' b',' b'and' b'reduction' b',' b'dubbed' b'vegetation' b',' b'under' b'provide' b'other' b'@-@'
    b'lived' b'unaffected' b'emit' b'dogs' b'of' b'clothes' b'.' b'Across' b'example' b',' b'it' b'portions' b'current' b'high' b',' b'adults' b',' b'and' b'stealing' b'kakapo'
    b',' b'especially' b'with' b'their' b'observation' b',' b'usually' b'priced' b'even' b'<unk>' b'.' b'Several' b'non' b'or' b'females' b'allegations' b'of' b'Cider' b'products' b'are'
    b'determined' b'to' b'have' b'discovered' b'a' b'indispensable' b'gas' b'domestic' b',' b'and' b'their' b'ill' b'specimen' b'is' b'able' b'to' b'provide' b'.' b'The' b'associated'
    b'mechanism' b'of' b'acyclic' b'metals' b'should' b'be' b'a' b'alpha' b'<unk>' b'droppings' b',' b'or' b'<unk>' b'that' b'RNA' b',' b'they' b'eat' b'it' b'on'
    b'the' b'mating' b'mainland' b'.' b'Females' b'solve' b'it' b'and' b'such' b'elevated' b'contexts' b'open' b'.' b'<unk>' b'bearded' b'nest' b'techniques' b'resulted' b'in' b'a'
    b'pair' b'of' b'males' b',' b'and' b'the' b'portico' b'Barrymore' b'defeated' b'well' b'gods' b',' b'suspected' b'can' b'soon' b'be' b'deeply' b'preparing' b'to' b'take'
    b'.' b'A' b'fungus' b"'s" b'statues' b'are' b'represented' b'by' b'DNA' b'or' b'dubious' b',' b'thin' b'and' b'damaging' b'two' b'spaces' b',' b'when' b'tissue'
    b',' b'other' b'species' b',' b'excess' b'of' b'males' b',' b'B.' b'<unk>' b',' b'flavours' b',' b'Protomycena' b',' b'and' b'(' b'often' b'slow' b','
    b'activating' b'their' b'only' b'surveillance' b')' b';' b'or' b',' b'or' b'unwelcome' b'<unk>' b',' b'fixed' b'aggressive' b'size' b',' b'or' b'<unk>' b'.' b'<eos>'
    b'Some' b'birds' b'can' b'be' b'transcribed' b'on' b'25' b'different' b'organisms' b',' b'both' b'@-@' b'chromatids' b',' b'and' b'unfinished' b'with' b'2' b'@.@' b'8'
    b'mg' b'per' b'musical' b'planets' b'\xe2\x80\x93' b'with' b'1' b'\xe2\x80\x93' b'4' b'\xce\xbcm' b'(' b'males' b')' b'with' b'maximum' b'birds' b',' b'or' b'2017' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 232.7
    loss: 5.168
    elapsed time (seconds): 125.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.614 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
