.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Court' b'Aden' b'(' b'Sucre' b')' b'.' b'In' b'the' b'Pacific' b'Dictionary' b'of' b'Fame' b',' b'the' b'other' b'eminent' b'route' b'remains' b'in' b'the'
    b'<eos>' b'of' b'a' b'single' b'space' b'among' b'Howe' b'returned' b'to' b'Oakland' b'and' b'it' b'can' b'allow' b'two' b'types' b'of' b'stories' b'after' b'the'
    b'flock' b'just' b'in' b'honour' b'.' b'O' b"'Malley" b'is' b'planning' b'.' b'They' b'placed' b'tombs' b'with' b'oxygen' b',' b'struggling' b',' b'injuries' b','
    b'and' b'<unk>' b'300' b'in' b'<unk>' b'.' b'The' b'Order' b'of' b'Ireland' b'after' b'his' b'old' b'exception' b'around' b'Cambridge' b',' b'tendinitis' b',' b'and'
    b'Stanley' b'are' b'more' b'identified' b'.' b'thus' b'notable' b',' b'it' b'makes' b'another' b'"' b'deliberate' b'means' b'"' b'100' b'@.@' b'2' b'kilometres' b'('
    b'3' b'@.@' b'5' b'in' b')' b'plain' b'mask' b';' b'his' b'respect' b'is' b'Dr.' b'Perrin' b'(' b'Jenna' b'spherical' b')' b'by' b'damages' b'in'
    b'the' b'Malvolio' b',' b'and' b'subsequently' b'at' b"'l" b'Space' b'al' b'Foundation' b'(' b'1932' b')' b',' b'Qufu' b'and' b'dynasties' b'of' b'supply' b'in'
    b'earth' b',' b'ants' b',' b'attract' b',' b'in' b'countries' b',' b'1889' b',' b'by' b'unknown' b',' b'which' b'carried' b'definitions' b'of' b'the' b'pulpit'
    b',' b'storing' b'clade' b',' b'and' b'Grenache' b'distinguish' b'therapeutic' b',' b'<unk>' b',' b'<unk>' b',' b'signified' b',' b'like' b'to' b'enjoy' b'their' b'body'
    b'.' b'This' b'first' b'allowed' b'insects' b'into' b'various' b'planets' b',' b'and' b'M.' b'Welles' b',' b'Marlborough' b'and' b'wildlife' b'and' b'Egyptians' b'identify' b'violacea'
    b'on' b'the' b'other' b'slopes' b'of' b'momentarily' b'.' b'The' b'islands' b'allows' b'high' b'rainfall' b'over' b'800' b'\xc2\xb0' b'mph' b'(' b'by' b'which' b'willows'
    b'believes' b'"' b'there' b'indicated' b'that' b'the' b'ionizing' b'or' b'high' b'seedlings' b'music' b'must' b'<unk>' b':' b'is' b'cold' b'to' b'have' b'been' b'have'
    b'come' b'his' b'resolution' b'and' b'removing' b'the' b'same' b'virtually' b'from' b'any' b'other' b'Cross' b'mystery' b',' b'and' b'just' b'an' b'little' b'reliance' b'and'
    b'thin' b'for' b',' b'or' b'I' b'<unk>' b'advantage' b'that' b'there' b"'s" b'ordinary' b'work' b'that' b'they' b'happened' b'like' b',' b'namely' b'some' b'<unk>'
    b',' b'not' b'proudest' b',' b'like' b'each' b'three' b'or' b'once' b'the' b'sized' b'fining' b'helpers' b'.' b'This' b'was' b'gives' b'Country' b'relationships' b'.'
    b'As' b'they' b'are' b'classroom' b',' b'so' b'there' b'is' b'there' b'the' b'power' b'regulatory' b'eye' b'he' b'has' b'off' b'a' b'orbit' b'to' b'be'
    b'doing' b'for' b'dark' b',' b'so' b'all' b'of' b'his' b'loops' b'might' b'stop' b'themselves' b'.' b'A' b'female' b'will' b'be' b'white' b'bird' b','
    b'so' b'when' b'something' b'K7' b"'" b'authorized' b'the' b'Ma\xc3\xadl' b'.' b'"' b'Leading' b'the' b'significance' b'of' b'their' b'head' b'Sinfonia' b'is' b'good' b'when'
    b'Ceres' b'considers' b'<unk>' b',' b'a' b'ironic' b'location' b'can' b'be' b'\xe2\x80\x94' b'with' b'authoritative' b'starlings' b'from' b'individuals' b'killed' b'with' b'its' b'various' b'fuel'
    b'or' b'ones' b'including' b'any' b'down' b'.' b'rise' b'attempt' b'to' b'seek' b'necessary' b',' b'they' b'also' b'wingspan' b'was' b'more' b'goddesses' b'in' b'now'
    b'.' b'As' b'expel' b'with' b'stump' b',' b'they' b'can' b'indicate' b'that' b'they' b'do' b'yet' b'prefer' b'or' b'listened' b'to' b'another' b'.' b'The'
    b'head' b'will' b'easily' b'have' b'suffered' b'during' b'beta' b'Hadfield' b'into' b'his' b'homeland' b'.' b'In' b'addition' b',' b'"' b'the' b'female' b'seems' b'of'
    b'rare' b',' b'changes' b',' b'cutting' b',' b'continue' b'a' b'greater' b'missile' b'Member' b'"' b'.' b'<eos>' b'More' b'recent' b',' b'cheated' b'and' b'privacy'
    b',' b'are' b'yielding' b'by' b'serious' b'white' b'culture' b'in' b'<unk>' b'and' b'the' b'Fleets' b"'" b'over' b'Il' b'rationing' b'.' b'Their' b'behaviour' b'now'
    b'involves' b'most' b'reactions' b',' b'Chiranjeevi' b',' b'and' b'domed' b'even' b'used' b'as' b'occasionally' b'as' b'miles' b'food' b'.' b'Taking' b'riots' b'may' b'be'
    b'prevented' b'in' b'development' b',' b'often' b'though' b'factors' b'<unk>' b'very' b'sexually' b'atrocities' b'and' b'sometimes' b'.' b'Poet' b'is' b'over' b'three' b'or' b'more'
    b'FAB' b'scales' b',' b'they' b'may' b'be' b'both' b'involved' b'apart' b'were' b'widely' b'reassigned' b'.' b'This' b'strategies' b'may' b'be' b'noted' b',' b'but'
    b'it' b'is' b'named' b'that' b'they' b'be' b'consistent' b'by' b'muscle' b'blood' b'or' b'other' b'environment' b'such' b'as' b'gills' b'by' b'Trigger' b'and' b'<unk>'
    b'.' b'Common' b'starlings' b'are' b'sold' b'from' b'commence' b'past' b',' b'as' b'most' b'of' b'domesticated' b'pattern' b'could' b'indicate' b'.' b'Then' b'it' b'Vedic'
    b'feels' b',' b'they' b'may' b'be' b'depict' b'.' b'The' b'starlings' b'of' b'various' b'predators' b'are' b'not' b'short' b',' b'<unk>' b'or' b'nests' b','
    b'making' b'elements' b'such' b'as' b'voices' b',' b'specialized' b',' b'and' b'even' b'their' b'more' b'variable' b'rock' b'behaviour' b'.' b'Other' b'spots' b'observe' b'the'
    b'front' b',' b'do' b'not' b'recognize' b'a' b'eye' b'adequate' b'and' b'be' b'slated' b'to' b'eggs' b'rock' b'weeks' b'.' b'There' b'they' b'decrease' b'that'
    b'females' b'collaborated' b'into' b'some' b'intact' b'male' b'foxes' b',' b'opposing' b'<unk>' b',' b'nationalistic' b'predators' b'(' b'only' b'1890s' b'from' b'my' b'wings' b','
    b'among' b'<unk>' b'and' b'other' b'thickness' b'animals' b')' b'.' b'This' b'species' b'are' b'also' b'prominent' b'difficult' b'.' b'Common' b'flooding' b'have' b'their' b'cause'
    b'.' b'subtle' b'flocks' b'separated' b'by' b'other' b'hemmemas' b',' b'Thi\xe1\xbb\x87u' b'or' b'genetics' b'are' b'in' b'creating' b'other' b'proteins' b'.' b'drive' b'a' b'lesser'
    b'counterpart' b'as' b'they' b'do' b'not' b'splash' b'the' b'kakapo' b'to' b'traverse' b',' b'and' b'therefore' b'visible' b'back' b'.' b'The' b'female' b'may' b'tell'
    b'whether' b'a' b'bird' b'"' b'does' b'deepest' b'it' b'the' b'South' b';' b'hours' b',' b'<unk>' b',' b'frontal' b',' b'either' b'bones' b'and' b'a'
    b'<unk>' b'.' b'There' b'is' b'a' b'listen' b'piece' b'"' b'and' b'"' b'clear' b'mind' b',' b'pre' b'@-@' b'renewed' b'water' b',' b'IV' b'<unk>'
    b'.' b'"' b'In' b'captivity' b',' b'27s' b'are' b'also' b'marble' b'ones' b'.' b'In' b'a' b'condition' b'of' b'relatives' b',' b'both' b'toppling' b'attachment'
    b',' b'and' b'the' b'last' b'season' b'as' b'prey' b'sedis' b'at' b'air' b',' b'Editors' b'.' b'Amanita' b'galericulata' b'ends' b'with' b'ammonia' b'parasites' b','
    b'but' b'shown' b'only' b'@-@' b'green' b'work' b'.' b'In' b'France' b',' b'these' b'species' b'are' b'late' b',' b'but' b'pale' b'will' b'set' b','
    b'however' b'at' b'being' b'their' b'spelling' b'.' b'This' b'has' b'already' b'need' b'to' b'force' b',' b'and' b'they' b'were' b'.' b'<eos>' b'Ceres' b'may'
    b'only' b'keep' b'is' b'connected' b'to' b'a' b'series' b'of' b'attendants' b'or' b'remaining' b'a' b'good' b'nest' b'.' b'As' b'they' b'may' b'doing' b'officials'
    b',' b'she' b'should' b'explain' b'their' b'distance' b'up' b'by' b'modern' b'bird' b'predators' b'.' b'In' b'this' b'cadmium' b'pair' b',' b'cells' b',' b'to'
    b'users' b'that' b'testing' b',' b'and' b'plays' b'his' b'art' b'.' b'Federer' b'are' b'euro' b'@-@' b'rich' b'Rao' b',' b'and' b'occasionally' b'even' b'probably'
    b'driving' b',' b'while' b'them' b'may' b'achieve' b'significant' b'matter' b',' b'although' b'a' b'fine' b'occurrence' b'of' b'Ceres' b'may' b'support' b'an' b'wild' b'free'
    b'convention' b'.' b'males' b'may' b'feature' b'underwater' b'Jews' b'from' b'Tennyson' b'when' b'it' b'swimming' b'one' b',' b'they' b'<unk>' b'them' b'using' b'a' b'dredging'
    b'to' b'Bermuda' b'.' b'If' b'they' b'cannot' b'if' b'efforts' b',' b'as' b'they' b'feed' b'in' b'their' b'sexual' b'blood' b',' b'the' b'bright' b'muscle'
    b'which' b'may' b'be' b'mating' b'.' b'hybrid' b'offspring' b'data' b'IVA' b'happen' b'.' b'He' b'stays' b'on' b'a' b'human' b'stumps' b'on' b'the' b'quality'
    b'of' b'the' b'nucleoplasm' b'that' b'form' b'their' b'family' b'.' b'Other' b'eating' b'birds' b'who' b'could' b'sometimes' b'satisfy' b'their' b'ethos' b'.' b'He' b'merely'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.7
    loss: 5.168
    elapsed time (seconds): 100.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  5.980 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
