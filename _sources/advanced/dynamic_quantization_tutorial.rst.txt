
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'s" b'initial' b'own' b',' b'Miriam' b'Opera' b',' b'who' b'refused' b'to' b'cooperate' b'out' b'that' b'the' b'story' b'of' b'Data' b'is' b'not' b'relaunched'
    b'for' b'his' b'breakthrough' b'.' b'delegate' b'@-@' b'time' b'spiders' b'rather' b'than' b'<unk>' b'that' b'and' b'in' b'<unk>' b'were' b'informed' b'by' b'<unk>' b'included'
    b'<unk>' b'to' b'begin' b'proof' b'"' b'<unk>' b'"' b'.' b'MacLeod' b'continued' b'to' b'run' b'or' b'hold' b'March' b'to' b'discuss' b'teaching' b'care' b'of'
    b'gowns' b',' b'during' b'Christie' b'.' b'Dusty' b'engine' b'CPS' b',' b'both' b'its' b'wife' b',' b'was' b'spaced' b'<unk>' b',' b'and' b'began' b'final'
    b'to' b'join' b'clothes' b'.' b'Indeed' b',' b'there' b'were' b'no' b'possible' b'agreement' b'to' b'run' b'through' b'rival' b'and' b'flaw' b'.' b'This' b'is'
    b'deeply' b'transformed' b'across' b'a' b'battle' b';' b',' b'there' b'was' b'numerous' b'illustrator' b'in' b'the' b'sixth' b'century' b'Star' b'One' b'imperfections' b'was' b'invited'
    b'to' b'<unk>' b'sounds' b',' b'and' b'in' b'a' b'speech' b'that' b'they' b'is' b'recognised' b'off' b'<unk>' b'or' b'<unk>' b'with' b'them' b'after' b'the'
    b'rest' b'of' b'their' b'existence' b'.' b'Ross' b'instead' b'was' b'Gwen' b"'s" b'wages' b';' b'the' b'group' b'so' b'his' b'task' b'is' b'dead' b'and'
    b'raised' b'.' b'The' b'kakapo' b'was' b'selected' b'at' b'was' b'first' b'a' b'jaguar' b',' b'which' b'was' b'Trajan' b'faint' b'.' b'minigames' b'used' b'responding'
    b'from' b'Democrat' b'Chamberlain' b'@-@' b'dressed' b',' b'which' b'that' b'promises' b'is' b'a' b'Relationships' b'show' b'rufous' b',' b'both' b'two' b'hours' b'after' b'Covenant'
    b'Edo' b'and' b'Longacre' b'interrupted' b'him' b'to' b'manage' b'so' b'their' b'Sitriuc' b'decide' b'aware' b'to' b'delay' b'.' b'Yet' b'over' b'the' b'non' b'or'
    b'game' b',' b'the' b'city' b'may' b'use' b'Ministry' b'where' b'of' b'the' b'course' b'of' b'their' b'life' b'.' b'He' b'rejects' b'his' b'frustration' b'with'
    b'old' b'or' b'the' b'advent' b'of' b'head' b'.' b'The' b'value' b'is' b'pale' b'killed' b'for' b'God' b',' b'and' b'Treaty' b'can' b'be' b'killed'
    b'.' b'<eos>' b'Burt' b'I' b'visited' b'its' b'first' b'<unk>' b',' b'comparing' b'<unk>' b'and' b'Wakefield' b',' b'but' b'he' b'says' b',' b'"' b'New'
    b'of' b'Taylor' b'"' b'.' b'In' b'June' b',' b'the' b'writer' b'Dhien' b'<unk>' b'<unk>' b'of' b'Affairs' b'criticized' b'a' b'first' b'@-@' b'great' b'APF'
    b'700' b'%' b'<unk>' b'intervene' b'per' b'three' b'.' b'The' b'long' b'spot' b'was' b'implemented' b'from' b'the' b'vast' b'side' b'of' b'original' b'harm' b'and'
    b'unanimous' b'those' b'projects' b'.' b'On' b'28' b'December' b'2015' b'Hardy' b'saw' b'his' b'closest' b'first' b'series' b'character' b'character' b'dedicated' b',' b'L.' b'Boom'
    b'Boom' b'Bang' b'!' b'.' b'<eos>' b'King' b'John' b'II' b'of' b'Doc' b'viewed' b'some' b'scrutiny' b'victory' b'between' b'Raffles' b'to' b'3' b'Criticism' b'whose'
    b'five' b'novels' b'reactivated' b',' b'much' b'games' b'was' b'learned' b'by' b'receiving' b'1852' b'lead' b'.' b'None' b'eleven' b'universities' b'mostly' b'explained' b'2012' b'.'
    b'<eos>' b'The' b'projection' b'of' b'Ceres' b'was' b'secured' b'in' b'his' b'English' b'release' b'.' b'bamboo' b'dubbed' b'a' b'game' b'since' b'most' b'square' b'group'
    b'in' b'the' b'church' b'.' b'In' b'addition' b',' b'it' b'was' b'never' b'reported' b'that' b'parents' b'could' b'have' b'been' b'previously' b'strap' b'in' b'part'
    b'of' b'law' b';' b'which' b'could' b'often' b'indicate' b'to' b'rule' b'this' b'portrait' b'.' b'The' b'name' b'must' b'have' b'all' b'real' b'degree' b','
    b'but' b'by' b'his' b'victory' b'after' b'Petrograd' b'<unk>' b'"' b'experiment' b'defense' b'"' b',' b'"' b'Do' b'"' b'piece' b'is' b'magnificent' b',' b'and'
    b'only' b'Walpole' b"'s" b'nephew' b'<unk>' b'was' b'composed' b'.' b'In' b'1998' b'Mode' b'messengers' b'that' b'spelling' b'wars' b'were' b'concerned' b'for' b'Simulants' b','
    b'while' b'individuals' b'would' b'be' b'ordered' b'to' b'send' b'815' b'million' b'men' b'being' b'lost' b',' b'but' b'<unk>' b'jumps' b'into' b'Vocals' b'Jenna' b'Williams'
    b'and' b'Hans' b'semblance' b',' b'the' b'IOC' b'<unk>' b'Iago' b',' b'to' b'help' b'a' b'buried' b'star' b'.' b'When' b'both' b'propaganda' b'registration' b'Foreign'
    b'Jose' b'Chen' b',' b'who' b'disliked' b'them' b'to' b'be' b'FIA' b',' b'a' b'planet' b'.' b'Crash' b'phases' b'safety' b'won' b'the' b'common' b'term'
    b'a' b'no' b'developed' b'state' b'for' b'Formula' b'One' b',' b'Monkees' b'of' b'lost' b',' b'actually' b'four' b'@-@' b'injured' b'unit' b'.' b'Actor' b'games'
    b'on' b'roles' b'heard' b'very' b'entitled' b'Mozart' b',' b'they' b'would' b'join' b'of' b'batsmen' b'into' b'a' b'game' b',' b'an' b'uniform' b'Chronicles' b'.'
    b'The' b'government' b'also' b'reportedly' b'moved' b'on' b'to' b'create' b'harm' b'on' b'level' b',' b'and' b'adding' b'a' b'sound' b'reception' b',' b'and' b"'s"
    b'1126' b'with' b'his' b'control' b',' b'"' b'"' b'not' b'leave' b'me' b'to' b'be' b'pitching' b'from' b'a' b'kingship' b'that' b'has' b'reach' b'.'
    b'"' b'As' b'they' b'felt' b',' b'"' b'I' b'did' b'not' b'write' b'how' b'I' b'have' b'searching' b'up' b'better' b'families' b'.' b'It' b'is'
    b'their' b'good' b',' b'philosophies' b'that' b'game' b'all' b'Keats' b'like' b'the' b'situation' b'for' b'the' b'water' b'Susie' b'is' b'expressions' b'of' b'their' b'purpose'
    b'us' b'above' b',' b'and' b'after' b'males' b'are' b'certainly' b'<unk>' b'each' b'.' b'You' b'has' b'...' b'decided' b'to' b'quicker' b'crowds' b'where' b'their'
    b'mad' b'grandson' b'deep' b'from' b'a' b'perfectly' b'for' b'sins' b'to' b'me' b'Grand' b"'Malley" b',' b'it' b'arose' b'.' b'We' b'see' b'how' b','
    b'whom' b'Bluffs' b'will' b'desired' b'as' b'try' b'to' b'shorten' b'kinds' b'that' b'some' b'rounded' b',' b'and' b'everyone' b'put' b'at' b'an' b'nearly' b'nature'
    b'I' b'don' b"'t" b'think' b';' b'it' b'might' b'be' b'a' b'leisure' b'Odaenathus' b'.' b'who' b"'re" b'spreading' b'"' b',' b'and' b'Frank' b'Hall'
    b'reported' b'said' b',' b'"' b'It' b'is' b'still' b'a' b'fundamental' b'feeling' b'that' b'that' b'eight' b'are' b'known' b',' b'but' b'on' b'a' b'manner'
    b',' b'they' b"'re" b'off' b'to' b'them' b'and' b'all' b'of' b'its' b'antique' b'in' b'the' b'world' b'.' b'"' b'<eos>' b'<eos>' b'=' b'='
    b'Assembly' b"'s" b'pupils' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b"'s" b'novel' b'<unk>' b'writings' b'actually' b'held' b'competitors' b'thinking' b'Walpole' b'are' b'"' b'hilarious'
    b'.' b'"' b'Bennett' b'intentionally' b'produced' b'the' b'Sabor' b'as' b'<unk>' b'Short' b',' b'a' b'member' b'ignored' b',' b'and' b'he' b'was' b'delivered' b'on'
    b'life' b'since' b'the' b'sacrament' b'of' b'channels' b'.' b'Mosley' b'then' b'completed' b'adversely' b'in' b'the' b'physical' b'change' b',' b'while' b'conceded' b'and' b'talk'
    b'they' b'suppose' b'to' b'stop' b'.' b'O' b"'Malley" b'is' b'on' b'the' b'first' b'time' b',' b'and' b',' b'he' b'criticized' b'younger' b'warts' b';'
    b'Saprang' b'oversaw' b'experts' b'a' b'storm' b'tool' b',' b'Mitch' b'Shakespeare' b',' b'and' b'Ein' b'<unk>' b'.' b'It' b'seems' b'to' b'participate' b'with' b'feeding'
    b'from' b'that' b'of' b'writers' b'against' b'the' b'Yangtze' b'armed' b'and' b'regional' b',' b'because' b'zebra' b'users' b'held' b'them' b'on' b'Scale' b'works' b'each'
    b'results' b'around' b'.' b'He' b'tries' b'to' b'sing' b'@-@' b'up' b'to' b'an' b'protein' b'side' b'for' b'a' b'new' b'when' b'is' b'much' b'unity'
    b'of' b'deep' b'fraud' b',' b'<unk>' b',' b',' b'to' b'reconciled' b'a' b'separate' b'complete' b'deal' b'.' b'The' b'proportion' b'of' b'both' b'children' b'consists'
    b'of' b'some' b'or' b'sort' b'of' b'sex' b'or' b'destruction' b'(' b'jarred' b'sources' b')' b',' b'or' b'<unk>' b',' b'wanting' b'to' b'attract' b'these'
    b'dissent' b'scent' b'.' b'His' b'outfit' b'is' b'omitted' b'.' b'Halides' b'can' b'require' b'a' b'<unk>' b'under' b'<unk>' b'35mm' b'and' b'traveled' b'a' b'short'
    b'@-@' b'<unk>' b'histones' b'at' b':' b'three' b'years' b'before' b'.' b'The' b'terrorist' b'leaves' b'them' b'to' b'protect' b'1798' b"'s" b'partner' b'exceeded' b'39'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.3
    loss: 5.168
    elapsed time (seconds): 113.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  35.339 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
