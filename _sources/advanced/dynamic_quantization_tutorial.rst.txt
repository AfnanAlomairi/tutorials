.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'southern' b'was' b'mentioned' b'collapsed' b'using' b'the' b'<unk>' b'to' b'highlight' b'of' b'their' b'error' b'as' b'a' b'artist' b'in' b'the' b'process' b'searing' b'the'
    b'local' b'segments' b'of' b'in' b'the' b'existing' b'epic' b'.' b'As' b'a' b'good' b'challenge' b'\xe2\x80\x94' b'in' b'short' b',' b'the' b'tradition' b'be' b'shown'
    b'by' b'a' b'white' b'Security' b'\xe2\x80\x93' b'<unk>' b'post' b'@-@' b'troubled' b'values' b'about' b'its' b'kitchen' b',' b'on' b'its' b'successor' b'.' b'He' b'Scott'
    b'it' b"'s" b'position' b'Goffman' b'(' b'"' b'Big' b'Wild' b'"' b')' b'of' b'their' b'lead' b'falls' b'.' b'Stepen' b'compares' b'to' b'finish' b'in'
    b'North' b'Korea' b'when' b'he' b'was' b'already' b'the' b'first' b'year' b'@-@' b'toy' b'years' b',' b'including' b'Aftermath' b'or' b'double' b'<unk>' b',' b'with'
    b'serpent' b'eating' b'out' b"'s" b'seemed' b'known' b'on' b'Handwriting' b'.' b'The' b'following' b'year' b',' b'he' b'gathered' b'buildings' b'as' b'one' b'of' b'the'
    b'fourth' b'known' b'to' b'work' b';' b'a' b'combination' b'of' b'students' b'left' b'in' b'print' b'activity' b'shooting' b'around' b'to' b'test' b'later' b'their' b'studio'
    b'source' b'.' b'One' b'of' b'this' b'time' b'are' b'to' b'command' b'at' b'fetishist' b"'" b'Religious' b'Crow' b'of' b'Somerset' b'.' b'Her' b'death' b'will'
    b'be' b'made' b'in' b'back' b'1036' b'a' b'bestselling' b'career' b'.' b'In' b'the' b'literate' b'spite' b',' b'he' b'finished' b'trouble' b'at' b'its' b'"'
    b'The' b'Tree' b'"' b'.' b'At' b'a' b'<unk>' b'network' b'when' b'Jordan' b"'s" b'sought' b'solely' b',' b'though' b'Vandernoot' b'in' b'<unk>' b'<unk>' b'is'
    b'a' b'aisles' b'of' b'this' b'name' b'to' b'general' b'in' b'his' b'involvement' b',' b'but' b'accordingly' b'the' b'country' b'of' b'positions' b'and' b'Kate' b'Sporting'
    b'was' b'moved' b'by' b'Jimmy' b'<unk>' b'.' b'At' b'the' b'end' b'of' b'the' b'season' b'in' b'The' b'Depression' b'<unk>' b'Michael' b'of' b'Krypton' b'('
    b'SIA' b')' b'has' b'proclaimed' b'an' b'great' b'open' b'policy' b'in' b'the' b'253' b'and' b'Price' b'Pitt' b'Lad' b'Franklin' b'(' b'Gillian' b'Seymour' b')'
    b'in' b'<unk>' b'The' b'inauguration' b'Du' b'<unk>' b'Brannock' b'(' b'Todd' b'na' b'Tadman' b')' b'and' b'holy' b'forces' b'\xe2\x80\x94' b'centimetres' b'<unk>' b'as' b'<unk>'
    b'.' b'<eos>' b'In' b'October' b',' b'preseason' b'temporary' b'Internet' b'settings' b'was' b'otherwise' b'held' b'in' b'1917' b'.' b'After' b'this' b'move' b'it' b'was'
    b'estimated' b'at' b'court' b'in' b'<unk>' b'.' b'<eos>' b'Knicks' b'in' b'1920' b'greatly' b'intended' b'to' b'happen' b'his' b'persecution' b',' b'while' b'as' b'they'
    b'certainly' b'feel' b'the' b'native' b'requirement' b'of' b'Blabbermouth.net' b'<unk>' b're' b'@-@' b'ordinated' b'species' b'they' b'are' b'Shriners' b'.' b'However' b',' b'when' b'Hewitt'
    b'used' b'it' b'in' b'the' b'1860s' b',' b'he' b'makes' b'it' b'for' b'their' b'future' b',' b'but' b'the' b'other' b'is' b'ultimately' b'stored' b'in'
    b'the' b'best' b'<unk>' b'.' b'In' b'a' b'History' b'cricket' b'published' b'by' b'John' b'historian' b'Sergio' b'James' b',' b'a' b'television' b'position' b'pin' b'('
    b'bloodstream' b')' b'Earl' b'<eos>' b'<eos>' b'=' b'=' b'Third' b'victory' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b"'s" b'third' b'chapter' b'marked' b'everything' b'on'
    b'sale' b'of' b'contact' b'.' b'A' b'planet' b'of' b'Ferrari' b'concerned' b'a' b'student' b'to' b'witnessing' b'a' b'salary' b'of' b'five' b'in' b'books' b'including'
    b'a' b'plaque' b'Commissioned' b'there' b'to' b'earn' b'a' b'possible' b'spare' b'director' b'by' b'three' b'members' b'of' b'church' b',' b'the' b'<unk>' b'of' b'Japanese'
    b'historical' b'offices' b'who' b'was' b'appearing' b'in' b'Wing' b'450' b'in' b'year' b',' b'that' b'concludes' b'that' b'Walpole' b'did' b'not' b'recapture' b'from' b'this'
    b'other' b'<unk>' b'when' b'they' b'do' b'not' b'care' b'into' b'the' b'teachings' b'permanent' b'K\xe1\xbb\xb3' b':' b'Crash' b'title' b'grabbing' b'a' b'Mesopotamia' b'?' b'"'
    b'I' b"'re" b'that' b'his' b'longer' b'lower' b'line' b'"' b'.' b'Second' b'reports' b'was' b'found' b'to' b'relocate' b'their' b'writing' b',' b'and' b'both'
    b'of' b'his' b'wife' b'has' b'introduced' b'him' b'more' b'<unk>' b',' b'created' b'by' b'Lieberman' b"'s" b'nephew' b'who' b'could' b'engage' b'him' b',' b'but'
    b'their' b'confession' b'strongly' b'envisaged' b'Johannes' b'and' b'<unk>' b'sequencing' b'in' b'1906' b'.' b'coins' b'usually' b'later' b'split' b'moderately' b'greatly' b'.' b'By' b'1650'
    b'he' b'said' b'"' b'The' b'all' b'major' b'<unk>' b'uses' b'Stokes' b'involved' b'.' b'"' b'Two' b'Muslims' b'were' b'accepted' b'on' b'Clearmountain' b'programs' b'these'
    b'child' b'fire' b'in' b'psychiatric' b'taxa' b'.' b'Tatanka' b'Publishers' b"'s" b'nephew' b'defended' b'no' b'trace' b',' b'meaning' b'that' b'"' b'Danny' b'only' b'made'
    b'bad' b'"' b'Easter' b'might' b'fight' b'.' b'However' b',' b'although' b'they' b'are' b'a' b'<unk>' b'<unk>' b',' b'this' b'number' b'year' b'has' b'enough'
    b'to' b'continue' b'to' b'so' b'build' b'for' b'dissolution' b'.' b'The' b'series' b'was' b'<unk>' b'in' b'850' b'teams' b'by' b'Carl' b'Hamelin' b',' b'a'
    b'private' b'study' b'AoT' b'and' b'PLAF' b'would' b'marching' b'the' b'body' b'after' b'much' b'of' b'his' b'illustrations' b'would' b'be' b'sent' b'.' b'<eos>' b'A'
    b'high' b'snake' b'Khmelnytsky' b'Bill' b'was' b'known' b'as' b'<unk>' b',' b'with' b'his' b'invitation' b'to' b'associate' b'Patrick' b'<unk>' b'Abyss' b'(' b'including' b'Maxwell'
    b')' b'.' b'He' b'also' b'gave' b'binomial' b'an' b'target' b'of' b'Tufaro' b'and' b'Manohar' b'appearances' b'for' b'Benjamin' b'upon' b'midnight' b'with' b'the' b'repentant'
    b'Dilke' b',' b'Walter' b'Johnson' b'.' b'a' b'forbids' b'L' b'<unk>' b'<unk>' b'(' b'1925' b'\xe2\x80\x93' b'2' b')' b'inspired' b'a' b'number' b'of' b'other'
    b'stories' b',' b'with' b'@-@' b'leaders' b'cherished' b'his' b'nephew' b',' b'but' b'himself' b'Taylor' b'Dale' b'suggests' b'"' b'In' b'both' b'years' b'her' b'poems'
    b'who' b"'re" b'only' b'<unk>' b';' b'I' b'never' b'remained' b'to' b'begin' b'into' b'a' b'so' b'<unk>' b'handles' b'which' b'to' b'be' b'and' b'<unk>'
    b'have' b'spread' b'him' b';' b'it' b"'re" b'being' b'a' b'large' b'.' b'"' b'O' b"'Malley" b'took' b'part' b'a' b'good' b'view' b',' b'referred'
    b'to' b'his' b'bill' b'as' b'they' b'could' b'indicate' b'rarely' b'.' b'The' b'revolutionary' b'planet' b'is' b'limited' b'to' b'Bernis' b'but' b'there' b'would' b'be'
    b'tired' b'of' b'a' b'dream' b'between' b'Hairan' b'mac' b'and' b'Loftleidir' b'.' b'Asked' b'after' b'Bishop' b'I' b'held' b'to' b'full' b'money' b',' b'he'
    b'criticized' b'his' b'love' b'property' b'<unk>' b'championship' b'as' b'enabling' b'odds' b'based' b'on' b'candidates' b',' b'an' b'audiobook' b'Zartan' b',' b'riding' b'for' b'the'
    b'Spy' b'Sales' b',' b'earn' b'an' b'LED' b'demonstration' b'into' b'her' b'home' b'stories' b'in' b'about' b'present' b'some' b'years' b'.' b'If' b'Madero' b'practice'
    b'back' b'to' b'his' b'lifelong' b'dramas' b'(' b'<unk>' b'<unk>' b')' b',' b'at' b'1907' b',' b'he' b'<unk>' b'him' b'from' b'his' b'Thatgamecompany' b'.'
    b'After' b'original' b'as' b'he' b'also' b'mentions' b',' b'he' b'was' b'established' b'for' b'an' b'rhythm' b'<unk>' b'when' b'he' b'attempted' b'to' b'gain' b'a'
    b'homosexual' b'representative' b'.' b'Jolliet' b'(' b'in' b'fiction' b')' b'impressed' b'Lady' b'Bennett' b'after' b'5191' b',' b'a' b'woman' b'recording' b'between' b'Zhou' b'and'
    b'1950' b',' b'and' b'every' b'cornerstone' b'of' b'<unk>' b'race' b'drums' b'dismissed' b'as' b'an' b'child' b',' b'got' b'"' b'<unk>' b'Luthor' b'<unk>' b'of'
    b'maintaining' b'schools' b'...' b'sets' b'like' b'<unk>' b'updating' b',' b'implications' b'is' b'a' b'dangerous' b'deal' b',' b'rather' b'much' b',' b'<unk>' b'WASP' b'"'
    b'(' b'The' b'spaceship' b',' b'all' b'proportions' b')' b',' b'and' b'reformed' b'his' b'sexuality' b'for' b'Dublin' b'.' b'During' b'the' b'first' b'jaw' b','
    b'he' b'would' b'end' b'his' b'chairman' b',' b'and' b'Walpole' b'used' b'it' b'as' b'military' b'.' b'In' b'1987' b'he' b'found' b'Walpole' b'with' b'his'
    b'wife' b'for' b'a' b'election' b'on' b'4' b'December' b'1801' b'(' b'November' b'18' b'\xe2\x80\x94' b'2001' b',' b'1991' b'.' b'It' b'was' b'resolved' b'that'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 198.7
    loss: 5.168
    elapsed time (seconds): 106.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  13.783 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
