
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'independently' b'concentrates' b',' b'conducted' b'by' b'<unk>' b'Lancaster' b'as' b'one' b'of' b'his' b'own' b'Pacer' b'classmates' b'agent' b'from' b'<unk>' b'as' b'the' b'"'
    b'principal' b'eukaryotic' b'but' b'D' b'"' b'television' b'@-@' b'talking' b',' b'right' b'of' b'Cards' b'soon' b'bid' b'from' b'1953' b'from' b'1996' b'.' b'A'
    b'brief' b'year' b'in' b'Squadron' b'held' b'possibly' b'in' b'252' b'through' b'the' b'rubble' b'"' b'which' b'vanished' b'longer' b',' b'I' b'think' b'known' b'on'
    b'the' b'North' b'or' b'a' b'opportunity' b'of' b'German' b'air' b'signal' b',' b'searching' b'.' b'Tanaka' b'that' b'headed' b'old' b'Mars' b'on' b'<unk>' b'and'
    b'even' b'upon' b'their' b'literary' b'work' b'.' b'"' b'Along' b'after' b'goaltender' b'advances' b',' b'and' b'stated' b'it' b'underwent' b'the' b'description' b'played' b'after'
    b'there' b',' b'19th-' b'<unk>' b',' b'and' b'minor' b'story' b'@-@' b'<unk>' b'works' b'.' b'The' b'image' b'of' b'fifth' b'of' b'public' b'schools' b'from'
    b'roads' b'were' b'asked' b'by' b'loving' b'70' b'for' b'its' b'North' b'manuscripts' b'.' b'For' b'example' b'in' b'her' b'location' b',' b'he' b'Peru' b'addicted'
    b'with' b'five' b'years' b',' b'leaving' b'they' b'pitch' b'at' b'his' b'cartoon' b'Oxford' b'<unk>' b'<unk>' b'<unk>' b'(' b'<unk>' b'@-@' b'<unk>' b')' b','
    b'super' b'Werneth' b'(' b'1973' b')' b',' b'and' b'even' b'strained' b'as' b'more' b'approached' b'.' b'Two' b'saw' b'large' b'classes' b',' b'including' b'various'
    b'medical' b'schools' b',' b'or' b'surrounding' b',' b'and' b'Ravi' b'<unk>' b'(' b'died' b'Denham' b')' b'.' b'violacea' b'smoke' b'one' b'of' b'larger' b'notice'
    b',' b'only' b'in' b'Cloud' b',' b'but' b'Liam' b'preferring' b'his' b'home' b'scheme' b'under' b'the' b'<unk>' b'alone' b'was' b'given' b'to' b'means' b'when'
    b'feeling' b',' b'from' b'the' b'Flower' b'drum' b'study' b'of' b'lions' b'and' b'Gatrell' b'.' b'The' b'Gilmore' b"'s" b'<unk>' b'comprises' b'graphics' b'is' b'created'
    b'in' b'from' b'Lawson' b'.' b'<eos>' b'Diplocystis' b'and' b'Earth' b',' b'including' b'same' b'men' b',' b'concluded' b'his' b'neighbors' b',' b'performing' b'discourage' b'or'
    b'subsequent' b'licences' b'.' b'Wuzhu' b',' b'Piazzi' b'Thatgamecompany' b',' b'The' b'Cyrus' b'led' b'to' b'him' b'in' b'1217' b'for' b'storylines' b'for' b'the' b'HNC'
    b'or' b'could' b'be' b'put' b'to' b'games' b'by' b'that' b'time' b'so' b'the' b'EMI' b'blocks' b'marriages' b'on' b'their' b'website' b'.' b'Whether' b'the'
    b'crisis' b'played' b'by' b'du' b'Ma\xc3\xadl' b'Marc' b'Robinson' b'creates' b'David' b'teen' b',' b'observing' b'his' b'troops' b'and' b'all' b'two' b'novels' b',' b'calling'
    b'high' b'scenario' b'to' b'<unk>' b'.' b'In' b'Virginia' b'his' b'Personality' b',' b'elects' b'total' b'policemen' b'from' b'Finkelstein' b"'s" b'reluctance' b'has' b'long' b'finds'
    b'it' b'marked' b'attempts' b'to' b'continue' b'to' b'feed' b'from' b'the' b'Palmyrene' b'vote' b'from' b'reality' b',' b'who' b'"' b'fuses' b'out' b'of' b'treason'
    b'for' b'the' b'support' b'of' b'convict' b'"' b'.' b'He' b'then' b'says' b'that' b'<unk>' b'and' b'Technologies' b'were' b'buck' b'wanted' b'to' b'secure' b'short'
    b'support' b':' b'"' b'I' b'think' b'the' b'large' b'Assmann' b'Bertin' b'has' b'bought' b'his' b'job' b'for' b'every' b'foreign' b',' b'and' b'good' b','
    b'such' b',' b'he' b'could' b'be' b'1804' b'in' b'Universities' b'in' b'a' b'whole' b'financial' b'manner' b',' b'more' b'brutal' b'admirals' b'run' b'and' b'painter'
    b'order' b'differently' b'customs' b'Amnesty' b'I' b'returned' b'to' b'a' b'hurricane' b'.' b'It' b'also' b'repeatedly' b'Church' b'"' b'.' b'This' b'glancing' b'saw' b'to'
    b'towns' b"'s" b'friends' b'have' b'widely' b'been' b'spent' b'out' b'to' b'pass' b'version' b'of' b'elect' b'or' b'combined' b'that' b'people' b'concludes' b'.' b'<eos>'
    b'barring' b'that' b'producer' b"'" b'Jenova' b'is' b'questioned' b'.' b'East' b'supply' b'of' b'culinary' b'ports' b'estimated' b'its' b'training' b'calls' b',' b'with' b'competition'
    b'an' b'sudden' b'structure' b'by' b'The' b'other' b'"' b'worst' b'school' b'be' b'the' b'<unk>' b'or' b'sensitive' b'colour' b'that' b'he' b'is' b'sort' b'of'
    b'affluent' b'<unk>' b'.' b'"' b'He' b'commented' b'"' b'It' b'is' b'one' b'of' b'his' b'<unk>' b',' b'at' b'the' b'Barcelona' b'entrance' b'and' b'that'
    b'the' b'people' b'implicated' b'away' b'into' b'"' b',' b'it' b'considers' b'eclipse' b'a' b'greater' b'sort' b'of' b'Hairan' b'Carter' b'is' b'also' b'evident' b'.'
    b'In' b'western' b'and' b'early' b'1918' b'the' b'character' b'found' b'to' b'take' b'ammunition' b'when' b'security' b'or' b'earthworms' b'Transit' b'.' b'<eos>' b'Due' b'to'
    b'<unk>' b'<unk>' b'died' b'this' b'earlier' b'warrior' b'Mosley' b',' b'railways' b'this' b'Go' b'military' b'is' b'also' b'a' b'DRS' b',' b'but' b'Pelagius' b'chronicles'
    b'until' b'this' b'moment' b'.' b'Inside' b'there' b'they' b'Reala' b'sacrifices' b'of' b'five' b'minutes' b'a' b'lot' b'of' b'scale' b'suffers' b'the' b'papillae' b'.'
    b'Because' b'would' b'return' b'a' b'characteristic' b'in' b'their' b'explicit' b'business' b';' b'it' b'is' b'commonly' b'only' b'sheet' b'at' b'any' b'other' b'female' b'@-@'
    b'navigational' b'zoos' b'at' b'apparent' b'above' b'night' b'.' b'<unk>' b'changes' b',' b'etc' b',' b'necessitated' b'Ludacris' b'.' b'The' b'universal' b'form' b'is' b'usually'
    b'easy' b',' b'quite' b'after' b'a' b'able' b'for' b'keyboard' b'movement' b'.' b'In' b'the' b'same' b'year' b',' b'due' b'to' b'Raffles' b',' b'placing'
    b'<unk>' b',' b'fellow' b'or' b'fades' b'calling' b',' b'they' b'are' b'"' b'OK' b'inclined' b',' b'to' b'contain' b'his' b'natural' b'trouble' b'"' b'.'
    b'For' b'example' b'all' b'to' b'Love' b',' b'the' b'character' b'honorable' b'exactly' b'by' b'his' b'body' b'and' b'goes' b'down' b'and' b'climb' b'the' b'last'
    b'to' b'gravity' b'when' b'they' b'are' b'very' b'somewhat' b'at' b'a' b'large' b'end' b'.' b'A' b'anonymous' b'Athene' b'particle' b'supernatural' b'often' b'marked' b'the'
    b'<unk>' b'<unk>' b'possessing' b'<unk>' b'.' b'<eos>' b'Now' b'for' b'comedic' b'behaviour' b'into' b'Andrew' b'sexpunctatus' b'(' b'converted' b',' b'and' b'the' b'Lake' b'version'
    b')' b',' b'have' b'been' b'beside' b'that' b'on' b'weather' b'regions' b',' b'they' b'are' b'used' b'to' b'learn' b'in' b'their' b'size' b'due' b'to'
    b'a' b'behaviour' b'from' b'<unk>' b'for' b'525' b'\xc2\xb0' b'weeks' b'.' b'Later' b'there' b'is' b'reported' b'that' b'Authors' b'only' b'consider' b'very' b'one' b'of'
    b'its' b'reasons' b'from' b'a' b'tolerate' b'jumping' b'.' b'The' b'flanks' b'have' b'always' b'been' b'widely' b'compared' b'to' b'account' b"'" b'Perhaps' b',' b'handheld'
    b',' b'but' b'some' b'have' b'increase' b'alone' b'.' b'A' b'blast' b'on' b'either' b'ridge' b'is' b'probably' b'effective' b',' b'with' b'a' b'elaborate' b'eye'
    b'(' b'such' b'as' b'sulfide' b'or' b'external' b'wing' b'and' b'Bhakti' b'.' b')' b'flipped' b'Barrier' b'NW' b'expressed' b'it' b'as' b'"' b'"' b'I'
    b'adopted' b'you' b'Division' b'Mitchell' b'"' b'.' b'In' b'his' b'lifetime' b'the' b'name' b'therapy' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Selective' b'bodies'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'King' b'Meta' b'The' b'idea' b'that' b'year' b'"' b'knew' b'it' b'a' b'tactical' b'one' b'root' b'wall' b'on'
    b'natural' b'or' b'<unk>' b',' b'wind' b',' b'and' b'grassy' b'cooking' b'words' b'that' b'were' b'<unk>' b'.' b'"' b'<eos>' b'Because' b'they' b'go' b'a'
    b'same' b'situation' b'member' b'for' b'these' b'brood' b'depend' b'.' b'Its' b'pests' b'is' b'gradually' b'slowed' b'.' b'Tech' b'then' b'presents' b'it' b'back' b'as'
    b'it' b'appears' b'clicking' b'with' b'it' b',' b'breaking' b'him' b'to' b'make' b'pairs' b'of' b'community' b'corporal' b'patron' b'shape' b'of' b'clinical' b'mating' b'.'
    b'It' b'could' b'often' b'want' b'to' b'be' b'discovered' b'even' b'at' b',' b'though' b'there' b'are' b'harmonies' b'and' b'attaining' b'food' b',' b'most' b'lanthanides'
    b'be' b'won' b'that' b'bare' b'males' b'also' b'did' b'.' b'Although' b'their' b'diet' b'greatly' b'Various' b'sufficiently' b'on' b'another' b'hand' b'needs' b'alive' b','
    b'they' b'think' b'<unk>' b'and' b'sends' b'up' b'the' b'nominate' b'calls' b',' b'about' b'75' b'metres' b'(' b'22' b'to' b'9' b'@.@' b'4' b'mph'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 199.7
    loss: 5.168
    elapsed time (seconds): 115.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  23.575 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
