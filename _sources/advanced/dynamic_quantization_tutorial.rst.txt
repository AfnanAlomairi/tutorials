.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'during' b'the' b'United' b'Kingdom' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Journey' b'@-@' b'62' b'XFX' b'=' b'<eos>' b'<eos>' b'The' b'Duke' b'State' b'Race'
    b'is' b'a' b'similar' b'fur' b'component' b'of' b'victory' b'it' b'is' b'known' b'for' b'War' b'masks' b'.' b'and' b'pretend' b'the' b'genus' b'Hibari.Ch.' b'of'
    b'jams' b'in' b'1986' b',' b'she' b'served' b'as' b'"' b'songwriter' b'Today' b'"' b'and' b'stated' b'that' b'"' b'it' b'might' b'look' b'one' b'a'
    b'face' b'and' b'not' b'hawthorn' b'about' b'a' b'track' b'\xe2\x80\x94' b'the' b'skill' b'of' b'their' b'luminosity' b'form' b'a' b'living' b'of' b'monarch' b'with' b'a'
    b'female' b'even' b'the' b'finest' b'two' b'cardinals' b'...' b'it' b'is' b'king' b'advised' b'on' b'"' b'.' b'Ironically' b',' b'the' b'Hood' b'of' b'God'
    b'depend' b'in' b'a' b'number' b'of' b'political' b'Gurevich' b',' b'Tom' b'M.' b'Copperfield' b'and' b'Walpole' b'who' b'won' b'them' b'a' b'description' b'in' b'the'
    b'East' b'and' b'the' b'Shadow' b'.' b'disabled' b',' b'they' b'are' b'divided' b'in' b'the' b'curiosity' b'within' b'years' b'and' b',' b'after' b'Naples' b'it'
    b'is' b'negative' b'towards' b'corrected' b'any' b'character' b'.' b'They' b'tried' b'to' b'have' b'to' b'be' b'introduced' b'to' b'provide' b'the' b'protesters' b'or' b'illustrate'
    b'control' b'of' b'chance' b',' b'or' b'mixture' b'or' b'lose' b'even' b'attending' b'for' b'them' b'.' b'Thus' b'that' b'song' b'fifty' b'to' b'over' b'Bangalore'
    b'through' b'poverty' b',' b'which' b'resulted' b'on' b'multiple' b'different' b'stumps' b',' b'they' b'appear' b'his' b'Konami' b'down' b'it' b'to' b'move' b'to' b'Poesy'
    b'.' b'These' b'tales' b'are' b'mark' b'when' b'this' b'trapped' b'to' b'slide' b',' b'they' b'have' b'a' b'short' b'stand' b'tentatively' b'degree' b'on' b'the'
    b'female' b',' b'while' b'as' b'signing' b'to' b'their' b'plane' b'.' b'The' b'other' b'abstract' b'Jumping' b'is' b'available' b'from' b'undertake' b'their' b'second' b'hand'
    b';' b'by' b'the' b'Disney' b'pattern' b'(' b'070' b',' b'largest' b'M\xc4\x81ori' b')' b'and' b'its' b'head' b'(' b'allusion' b'to' b'Europe' b',' b'directly'
    b')' b'are' b'approximately' b'50' b'by' b'8' b'\xe2\x80\x93' b'4' b'\xe2\x80\x93' b'3' b'in' b'.' b'<eos>' b'A' b'kilometer' b'of' b'commonly' b'commonly' b'Murchad' b','
    b'Naples' b',' b'or' b'the' b'spots' b'foxes' b'are' b'unclear' b':' b',' b'conversation' b'and' b'meat' b'to' b'date' b',' b'descendant' b'that' b'its' b'definition'
    b'are' b'Lynx' b'buses' b'to' b'give' b'it' b'.' b'Each' b'version' b'of' b'their' b'kind' b',' b'while' b'occurs' b'at' b'God' b',' b'the' b'all'
    b'arms' b'to' b'gathered' b'into' b'a' b'planet' b',' b'throughout' b'1886' b',' b'clock' b'models' b',' b'and' b'several' b'other' b'females' b'were' b'clearly' b'more'
    b'and' b'affected' b'by' b'benznidazole' b';' b'associated' b'with' b'cruising' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Service' b'career' b'=' b'=' b'<eos>' b'<eos>' b'Ceres'
    b'is' b'classified' b'as' b'"' b'valid' b'on' b'a' b'rich' b'"' b'further' b'industry' b'in' b'warm' b'@-@' b'term' b'(' b'<unk>' b'/' b'Italo' b')'
    b'and' b'white' b'male' b',' b'in' b'which' b'poisoning' b'Samak' b'with' b'.' b'Brian' b'Treason' b'Maria' b"'Africaine" b'travels' b'on' b'tears' b',' b'which' b'was'
    b'less' b'developed' b'in' b'the' b'2006' b'annual' b'percentage' b'of' b'severe' b'reviews' b'and' b'testing' b'.' b'The' b'first' b'name' b'which' b'the' b'<unk>' b'admits'
    b'has' b'been' b'matured' b';' b'as' b'starting' b'as' b'a' b'extraordinary' b'piles' b',' b'however' b',' b'this' b'is' b'not' b'stored' b'so' b'supplied' b'since'
    b'1907' b'.' b'Their' b'bowls' b'vigil' b'<unk>' b'with' b'their' b'reddish' b',' b'viruses' b'of' b'the' b'Millennium' b'or' b'R\xc3\xa9union' b'feedback' b',' b'Causes' b'.'
    b'Although' b'the' b'kakapo' b'range' b'from' b'the' b'Melbourne' b'chronicle' b'dead' b',' b'they' b'can' b'one' b'are' b'070' b'word' b'that' b'this' b'rather' b'Yorkers'
    b'than' b'can' b'be' b'forced' b'either' b'to' b'write' b'his' b'mating' b'complications' b'and' b'yet' b'curving' b'in' b'shallow' b'forms' b'of' b'her' b'hiatus' b'.'
    b'<eos>' b'The' b'North' b'hemisphere' b'may' b'be' b'a' b'mothers' b'of' b'third' b'performances' b',' b'killing' b'"' b'tree' b'urgency' b'"' b',' b'singing' b'all'
    b'Clamp' b'as' b'they' b'are' b'crowded' b'by' b'the' b'surface' b'.' b'In' b'the' b'words' b'with' b'<unk>' b',' b'induced' b'with' b'the' b'remaining' b'representation'
    b'of' b'Ceres' b',' b'it' b'realized' b'Cort\xc3\xa9s' b"'s" b'unique' b'body' b'has' b'suggested' b'that' b'At' b'the' b'point' b'of' b'Leon' b'@-@' b'WASP' b','
    b'some' b'discusses' b'years' b'from' b'religious' b'settlers' b',' b'and' b'Hebrew' b'@-@' b'degree' b'layer' b'of' b'ownership' b'that' b'valve' b'books' b'.' b'<unk>' b'Buck'
    b'describes' b'his' b'auto' b'gathering' b'or' b'grass' b',' b'so' b'with' b'Jan' b'<unk>' b'or' b'devastated' b'the' b'puppets' b',' b'suspend' b'a' b'character' b'called'
    b'it' b'the' b'Anglo' b'@-@' b'<unk>' b'concept' b'back' b'or' b'cannot' b'resistance' b'onto' b'witch' b'@-@' b'tail' b'with' b'remake' b'his' b'men' b'.' b'While'
    b'other' b'birds' b'have' b'fled' b'into' b'emphasize' b'magazines' b',' b'the' b'subsequent' b'side' b'of' b'her' b'smallest' b'head' b'more' b'realism' b',' b'<unk>' b'much'
    b'quietly' b'food' b'and' b'the' b'females' b'sing' b'<unk>' b'.' b'The' b'king' b'is' b'notion' b'of' b'instruction' b',' b'which' b'have' b'inconsistent' b'railhead' b'as'
    b'enriched' b'from' b'corner' b'.' b'Family' b'participants' b'sometimes' b'see' b'a' b'mouth' b',' b'which' b'set' b'it' b'to' b'a' b'degree' b'called' b'"' b"'"
    b'One' b'an' b'hair' b'person' b'to' b'Tell' b'Know' b'"' b'.' b'Because' b':' b'Ceres' b'<unk>' b'<unk>' b'\xc2\xb1' b'the' b'letter' b'aside' b'France' b','
    b'does' b'not' b'unite' b'her' b'daily' b'days' b'and' b'sightings' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Recent' b'War' b'=' b'=' b'<eos>' b'<eos>' b'All\xc4\x81h'
    b'intellectuals' b'is' b'described' b'by' b'a' b'vegetation' b'old' b'using' b'Pierce' b',' b'or' b'a' b'white' b'tree' b'legend' b',' b'and' b'found' b'a' b'unique'
    b'structure' b'on' b'it' b'and' b'the' b'male' b'instead' b'of' b'the' b'<unk>' b'Composers' b'now' b'.' b'<eos>' b'The' b'turning' b'song' b'of' b'the' b'lumber'
    b'ensuing' b'spore' b'"' b'Greek' b'mitosis' b'"' b'is' b'a' b'slightly' b'elaborate' b'skull' b'or' b'her' b'provision' b'.' b'The' b'interior' b'has' b'often' b'led'
    b'Tjoet' b'Sungei' b',' b'which' b'this' b'appreciated' b'dead' b'B\xc3\xbclow' b'placed' b'known' b'as' b'food' b'for' b'such' b'hour' b',' b'and' b'a' b'the' b'eye'
    b',' b'Monkey' b',' b'sometimes' b'setting' b'sculpture' b'more' b'.' b'Transits' b'be' b'motivated' b'to' b'perceive' b'logic' b'in' b'some' b'algae' b';' b'laying' b'or'
    b'@-@' b'blues' b'difficulty' b'leads' b'to' b'its' b'biologically' b',' b'no' b'brightness' b'they' b'reveals' b'it' b'.' b'Mycena' b'Mary' b'(' b'<unk>' b'of' b'<unk>'
    b')' b'is' b'a' b'short' b'crown' b'of' b'Inari' b'(' b'weakly' b'Fairies' b')' b'for' b'his' b'dignity' b',' b'circumstance' b'<unk>' b'and' b'layers' b','
    b'which' b'can' b'be' b'seen' b'on' b'a' b'face' b'of' b'three' b'higher' b'eyes' b',' b'which' b'probably' b'owl' b'<unk>' b'or' b'compared' b'(' b'with'
    b'four' b'of' b'the' b'remnant' b'vapor' b')' b'to' b'characters' b'.' b'<eos>' b'The' b'songs' b'Bridge' b'were' b'buried' b'in' b'late' b'thoughts' b'and' b'Alexander'
    b'Jones' b'has' b'adapted' b'themselves' b',' b'and' b'instead' b'of' b'the' b'female' b'.' b'Despite' b'many' b'stand' b'of' b'surroundings' b'for' b'synonyms' b',' b'the'
    b'supreme' b'starling' b"'s" b'frame' b'which' b'departed' b'a' b'female' b'.' b'According' b'to' b'its' b'dog' b'Misunderstood' b':' b'"' b'To' b'...' b'in' b'a'
    b'giant' b'finances' b'Le' b'\xe2\x80\x99' b'<unk>' b'<unk>' b'of' b'nobody' b',' b'I' b'don' b"'t" b'really' b'move' b'to' b'any' b'amusing' b'observation' b'"' b'.'
    b'Peshkin' b'was' b'also' b'absent' b'to' b'<unk>' b'Arianna' b',' b'but' b'many' b'Singer' b'agrees' b'to' b'the' b'other' b'spots' b',' b'as' b'many' b'PCI'
    b'stories' b'were' b'active' b'on' b'a' b'sunk' b'Crombie' b'(' b'which' b'both' b'and' b'police' b'<unk>' b')' b'have' b'come' b'to' b'anything' b'the' b'Sanskrit'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 208.5
    loss: 5.168
    elapsed time (seconds): 104.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.213 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
