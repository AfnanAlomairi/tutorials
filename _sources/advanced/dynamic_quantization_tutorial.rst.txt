
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Quick' b'.' b'while' b'of' b'these' b'putting' b'technical' b'military' b'terms' b',' b'many' b'body' b'members' b'are' b'<unk>' b',' b'maintaining' b'jet' b'using' b'the'
    b'next' b'two' b'months' b'.' b'The' b'results' b'had' b'since' b'Jin' b'battalion' b'points' b'to' b'any' b'other' b',' b'and' b'by' b'response' b'to' b'their'
    b'death' b'preparations' b'the' b'protected' b'option' b',' b'by' b'leading' b'approval' b'within' b'piston' b'behaviour' b'.' b'Some' b'other' b'management' b'against' b'the' b'race' b'are'
    b'display' b'to' b'be' b'muscles' b'to' b'presided' b'from' b'other' b'negative' b'eastern' b'@-@' b'term' b'parasites' b',' b'or' b'<unk>' b'extends' b'aid' b'and' b'occasionally'
    b'<unk>' b'development' b';' b'Gofraid' b'glasses' b'Williams' b'in' b'Kreutzer' b'of' b'mating' b'.' b'Some' b'members' b'dominate' b'in' b'1913' b'by' b'Chicago' b',' b'coastal'
    b'cats' b',' b'made' b'descriptive' b'praise' b'.' b'In' b'regard' b',' b'the' b'candidates' b'feature' b',' b'they' b'non' b'@-@' b'glitzy' b'small' b'relationships' b'associations'
    b'.' b'falcon' b'was' b'divided' b'into' b'the' b'places' b'of' b'one' b'of' b'the' b'units' b'that' b'occur' b'on' b'to' b'be' b'seen' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'=' b'Union' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Palmyra' b'have' b'signed' b'down' b'level' b'in' b'the' b'spotting' b'of' b'Waterloo'
    b'Hornung' b'remained' b'short' b'conflict' b'<unk>' b'.' b'The' b'Song' b'griffin' b'has' b'controlled' b'1888' b'teams' b'on' b'its' b'Register' b"'s" b'2012' b'@-@' b'race'
    b';' b'he' b'remained' b'the' b'narrator' b'and' b'<unk>' b'about' b'.' b'bard' b'further' b'Babylonia' b'and' b'truce' b'with' b'<unk>' b'are' b'unclear' b'managed' b'at'
    b'that' b'time' b'to' b'short' b'cliffs' b'.' b'<eos>' b'cock' b'have' b'been' b'thrown' b'to' b'Pescara' b'or' b'wake' b',' b'so' b'awards' b'judge' b'and'
    b'<unk>' b'was' b'marketed' b'but' b'manufacture' b',' b'while' b'the' b'starlings' b'differed' b'on' b'essential' b'<unk>' b'.' b'This' b'makes' b'astronomical' b'small' b',' b'his'
    b'vision' b'resulted' b'with' b'women' b'and' b'was' b'suggested' b'to' b'have' b'fans' b'with' b'Lucille' b'Mykelti' b'.' b'Herschel' b"'s" b'next' b'wife' b'Millions' b'is'
    b'published' b'by' b'Creutz' b',' b'so' b'adding' b'it' b'further' b'looking' b'in' b'Atlantic' b'Without' b'Danny' b'in' b'the' b'early' b'evacuate' b'blurred' b',' b'he'
    b'means' b'<unk>' b',' b'a' b'spokesman' b'of' b'<unk>' b'who' b'died' b'by' b'rem' b'@-@' b'hunting' b'spear' b'interceptions' b'heritage' b',' b'Maurice' b'<unk>' b','
    b'<unk>' b',' b'fir' b'daughters' b',' b'Governor' b'Calloway' b'Yankovic' b'and' b'Rashid' b'harassment' b'.' b'<eos>' b'In' b'Cooksey' b',' b'Crash' b'(' b'1995' b')'
    b'were' b'a' b'member' b'of' b'Garc\xc3\xada' b'History' b"'s" b'ancestors' b'observations' b'of' b'his' b'parents' b'such' b'as' b'suffering' b'divine' b'wholly' b',' b'during' b'Great'
    b'Island' b',' b'less' b'than' b'the' b'Baltic' b'Age' b'significantly' b'.' b'Administration' b'became' b'still' b'tired' b'to' b'consolidate' b'mayor' b',' b'a' b'village' b'of'
    b'Rudolph' b',' b'Crisis' b',' b'ironbark' b',' b'ponderosa' b'or' b'virtue' b',' b'when' b'they' b'were' b'<unk>' b"'" b'culture' b'.' b'Shogakukan' b'and' b'migration'
    b'have' b'being' b'collected' b'between' b'enthusiasm' b'and' b'men' b'that' b'have' b'brought' b'imaging' b'damage' b'during' b'the' b'body' b'and' b'he' b'drew' b'to' b'that'
    b',' b'which' b'is' b'freely' b'described' b'by' b'Bishop' b'@-@' b'Shabaab' b',' b'whose' b'will' b'occupy' b'@-@' b'up' b'in' b'a' b'weapon' b'.' b'The'
    b'territory' b"'s" b'previously' b'<unk>' b'mirroring' b'traditional' b'planets' b'to' b'cheese' b'surveillance' b',' b'avoiding' b'membrane' b'wind' b'structural' b',' b'<unk>' b'or' b'<unk>' b'.'
    b'In' b'the' b'late' b'Middle' b'Ages' b',' b'British' b'discusses' b',' b'like' b'faceless' b'barriers' b'Mantell' b'intercourse' b'tributary' b'as' b'they' b'enter' b'up' b'involved'
    b'in' b'their' b'life' b',' b'forcing' b'it' b'the' b'nests' b'of' b'anticyclone' b'.' b'<unk>' b'yammer' b',' b'with' b'even' b'speculation' b'a' b'adult' b'disc'
    b'of' b'crews' b',' b'soon' b'<unk>' b'or' b'informally' b',' b'necessary' b'to' b'a' b'eye' b'orchestrations' b',' b'with' b'multiple' b'detail' b',' b'war' b','
    b'constrained' b'134' b',' b'with' b'fewer' b'ardent' b'idealist' b',' b'Medley' b'separate' b'highly' b'GPa' b'where' b'he' b'kills' b'hence' b',' b'until' b'his' b'own'
    b'homes' b'of' b'them' b'.' b'When' b'it' b'is' b'probably' b'hands' b'south' b'of' b'Ceres' b',' b'it' b'has' b'largely' b'disparaged' b'an' b'value' b'to'
    b'prevent' b'its' b'beak' b'reading' b'with' b'other' b'birds' b'in' b'his' b'lives' b'developing' b'<unk>' b'.' b'In' b'his' b'positions' b',' b'when' b'Dirk' b'behaviour'
    b'may' b'be' b'unimpressed' b'with' b'a' b'variety' b'of' b'hospital' b'as' b'it' b'became' b'beneficial' b',' b'it' b'safely' b'nephews' b'urban' b'Rothschild' b'is' b'unreliable'
    b'by' b'their' b'splendid' b'leader' b',' b'they' b'were' b'unhappy' b'by' b'homeland' b'.' b'He' b'makes' b'rapidly' b'pawn' b'(' b'<unk>' b',' b'sometimes' b'identical'
    b'habit' b'of' b'rope' b')' b'and' b'evident' b'up' b'(' b'be' b'red' b')' b'<eos>' b'On' b'the' b'autumn' b'of' b'second' b'way' b',' b'it'
    b'was' b'able' b'to' b'come' b'into' b'semen' b'inference' b'.' b'<unk>' b'islands' b'(' b'not' b'coming' b'to' b'flares' b')' b',' b'with' b'Charles' b'<unk>'
    b'(' b'Lepus' b'this' b',' b'headed' b'Anketell' b'as' b'they' b'were' b'developed' b'since' b'a' b'other' b'years' b')' b',' b'with' b'a' b'open' b'texture'
    b'trail' b'as' b'prominent' b'resources' b',' b'some' b'may' b'be' b'introduced' b'down' b'when' b'he' b'<unk>' b'.' b'offenses' b'she' b'do' b'emergency' b'through' b'chaparral'
    b',' b'they' b'golden' b'Elias' b'rickshaws' b'instead' b'of' b'Reynolds' b',' b'and' b'is' b'debated' b'in' b'shaped' b'slavery' b',' b'the' b'sternum' b'called' b'"'
    b'prey' b'"' b',' b'which' b'are' b'dispersed' b'by' b'aside' b'them' b'.' b'With' b'this' b'female' b'being' b'incorporated' b'to' b'1869' b',' b'and' b'after'
    b'the' b'mid' b'@-@' b'rates' b'they' b'gains' b'and' b'learnt' b'the' b'value' b'he' b'pessimistic' b'an' b'planet' b'.' b'This' b'lack' b'of' b'younger' b'to'
    b'tenths' b'throughout' b'much' b'of' b'her' b'feathers' b'.' b'Numerous' b'classifying' b'or' b'dark' b'improvised' b'to' b'Hollywood' b'gives' b'by' b'that' b'to' b'construct' b'mammalian'
    b'them' b',' b'Mecca' b'of' b'inflict' b'telephone' b',' b'sometimes' b'significant' b',' b'and' b'there' b'was' b'no' b'pairs' b'of' b'muscarine' b',' b'possibly' b'their'
    b'entire' b'supernatural' b'ability' b',' b'and' b'mostly' b'which' b'will' b'be' b'white' b'.' b'The' b'last' b'developing' b'blessing' b'has' b'begun' b'36' b'turbines' b'per'
    b'740' b',' b'and' b'many' b'regulation' b'Seminoles' b'still' b'realizes' b'that' b'she' b'knows' b'.' b'The' b'male' b'writes' b',' b'as' b'whether' b'a' b'listen'
    b'to' b'bird' b'cake' b',' b'ceases' b'and' b'species' b'its' b'main' b'number' b'to' b'lose' b'chicks' b',' b'and' b'<unk>' b'many' b'Mumia' b'feeding' b'undesirable'
    b'in' b'their' b'main' b'inhabitants' b'and' b'eliminating' b'a' b'Cortland' b'progression' b'Democrats' b'at' b'a' b'rare' b'display' b'and' b'not' b'meet' b'.' b'When' b'when'
    b'if' b'the' b'male' b'is' b'Hal' b'<unk>' b'by' b'her' b'son' b',' b'lines' b'qualified' b'can' b'be' b'less' b'killed' b'.' b'However' b',' b'they'
    b'have' b'force' b'yield' b'as' b'they' b'are' b'good' b'.' b'The' b'bottom' b'of' b'female' b'"' b'or' b'complexity' b'"' b'are' b'flattened' b'within' b'fictional'
    b'elevations' b'.' b'<unk>' b'can' b'be' b'believed' b'to' b'turn' b'upon' b'and' b'even' b'they' b'over' b'this' b'same' b'year' b'.' b'It' b'could' b'be'
    b'thought' b'that' b'they' b'easily' b'they' b'depicted' b'annually' b'to' b'Barbatos' b'implementation' b',' b'but' b'possibly' b'of' b'large' b'similarities' b'difficult' b'.' b'Venus' b'thought'
    b'that' b'they' b'"' b'may' b'look' b'him' b'out' b',' b'but' b'putting' b'humanity' b'to' b'displays' b'and' b'compete' b'after' b'return' b',' b'<unk>' b'alongside'
    b'<unk>' b',' b'moorland' b'or' b'trees' b'...' b'what' b'receive' b'religion' b',' b'maintenance' b'or' b'Mithravinda' b'at' b'a' b'home' b'act' b'you' b'sometimes' b"'"
    b'cite' b'Ceres' b'<unk>' b'to' b'move' b'them' b'@,@' b'400' b'\xe2\x80\x93' b'<unk>' b',' b'helping' b'it' b'up' b'to' b'a' b'beak' b'life' b',' b'because'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.0
    loss: 5.168
    elapsed time (seconds): 121.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  25.798 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
