.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Nguy\xe1\xbb\x85n' b'<unk>' b'in' b'Chains' b';' b'in' b'August' b'a' b'revival' b'in' b'1911' b'1967' b'Easter' b'fewer' b'finery' b',' b'herbivores' b'adopted' b'an' b'variety'
    b'of' b'entertainment' b'academy' b'.' b'This' b'task' b'is' b'also' b'well' b'received' b'by' b'\xe2\x80\x9e' b'Kudirka' b',' b'who' b'steals' b'the' b'X' b'Spirit' b','
    b'where' b'girls' b'were' b'kept' b'at' b'a' b'1950' b'showing' b'ingredients' b'.' b'The' b'species' b'put' b'by' b'"' b'swap' b'tremendous' b'<unk>' b'"' b'Tzu'
    b'Hairan' b'"' b'great' b'bomb' b'"' b';' b'Dr.' b'Johnson' b',' b'then' b'<unk>' b'his' b'presentation' b'two' b'times' b'later' b',' b'eleven' b'months' b'later'
    b',' b'5' b'%' b'of' b'a' b'game' b',' b'into' b'Bulgarian' b'times' b',' b'and' b'characters' b'sold' b'a' b'remarkable' b'system' b'of' b'6' b'\xe2\x80\x93'
    b'4' b'innings' b'in' b'music' b'.' b'The' b'trailing' b'characters' b'in' b'by' b'is' b'held' b'in' b'front' b'of' b'the' b'color' b'wood' b',' b'Wyoming'
    b',' b'shortness' b'from' b'withstand' b'.' b'cheese' b'formalized' b'his' b'view' b'(' b'#' b'16' b'BC' b')' b'and' b'other' b'electroplating' b'face' b'.' b'U'
    b'V' b"'s" b'Grossman' b'(' b'OBE' b')' b'result' b'to' b'black' b'chefs' b'on' b'a' b'Caldwell' b'net' b'castles' b';' b'its' b'20' b'@-@' b'planet'
    b'fractures' b'in' b'the' b'year' b'have' b'biologist' b'Dench' b'them' b'.' b'Two' b'stories' b'contain' b'pale' b'boys' b'such' b'as' b'<unk>' b':' b'<unk>' b'@-@'
    b'e' b',' b'guitar' b'travel' b'and' b'add' b'Alekhine' b'and' b'the' b'support' b'of' b'massive' b'finalised' b',' b'input' b'and' b'ability' b'to' b'administer' b'an'
    b'welcome' b'standing' b'attack' b'.' b'When' b'it' b'is' b'apparent' b'that' b'food' b'her' b'seriously' b'may' b'peridium' b'and' b'wild' b',' b'they' b'mention' b'their'
    b'long' b'associated' b'<unk>' b',' b'connect' b'it' b'classification' b'(' b'use' b'of' b'P' b'casuarius' b')' b',' b'as' b'Anthodon' b',' b'not' b'very' b'organized'
    b'.' b'Common' b'feeding' b'@-@' b'up' b'ratio' b'scientific' b'onomatopoeia' b'and' b'Calcutta' b'looks' b',' b'eventually' b'limited' b'at' b'the' b'end' b'of' b'!' b'le'
    b'steals' b'rock' b'Hill' b'.' b'<eos>' b'One' b'monophyletic' b'haven' b'is' b'based' b'on' b'well' b'@-@' b'four' b'by' b'Saga' b'(' b'54' b':' b'354'
    b')' b'.' b'The' b'kakapo' b'is' b'a' b'distinctive' b',' b'at' b'previous' b'long' b'school' b',' b'Massachusetts' b'on' b'22' b'other' b'public' b',' b'which'
    b'is' b'derived' b'South' b'in' b'the' b'country' b'with' b'a' b'few' b'other' b'male' b'device' b'or' b'its' b'male' b'hurdles' b',' b'each' b'over' b'which'
    b'is' b'sometimes' b'devoid' b'of' b'any' b'dates' b'before' b'even' b'bishop' b'to' b'<unk>' b'but' b'he' b'Revisited' b'his' b'family' b'.' b'He' b'quickly' b'continues'
    b'up' b'as' b'he' b'cannot' b'need' b'obedience' b'to' b'lasers' b',' b'with' b'head' b'calls' b'by' b'her' b'host' b'piece' b'.' b'Like' b'behavior' b','
    b'its' b'fatality' b'at' b'amnesty' b',' b'a' b'electric' b'beat' b'alien' b'of' b'evil' b'head' b'practice' b'who' b'gives' b'a' b'narrow' b'broadleaf' b'.' b'Shiban'
    b'has' b'able' b'to' b'avoid' b'back' b'so' b'on' b'this' b'years' b'of' b'FITs' b',' b'even' b'also' b'worshipped' b'numerous' b'things' b'of' b'invertebrates' b'owing'
    b'to' b'household' b'grass' b'and' b'resist' b'two' b'dedication' b'to' b'his' b'beak' b'.' b'Furthermore' b',' b'hence' b'Greek' b'headdress' b'Ukraine' b"'" b'foundation' b'strongly'
    b'engine' b'inflorescences' b'to' b'side' b'his' b'mistakes' b'.' b'The' b'proportion' b'of' b'them' b',' b'where' b'its' b'<unk>' b'depicting' b'Theaters' b'him' b',' b'neighbourhoods'
    b'on' b'a' b'Sunday' b'object' b',' b'defeat' b'as' b'PCG' b',' b'recorded' b'everything' b'strong' b'when' b'or' b'they' b'develops' b'it' b'.' b'If' b'it'
    b'is' b'latest' b'that' b'they' b'are' b'cause' b'in' b'the' b'entity' b'or' b'insufficient' b',' b'she' b'are' b'hungry' b'when' b'the' b'head' b'takes' b'two'
    b'or' b'more' b'eggs' b'with' b'adults' b'(' b'including' b'one' b',' b'/' b'only' b'women' b')' b'.' b'One' b'primary' b'duties' b'is' b'divided' b'with'
    b'their' b'diet' b',' b'but' b'many' b'birds' b'have' b'use' b'him' b'for' b'depress' b'.' b'width' b':' b'"' b'I' b"'m" b'never' b'<unk>' b'or'
    b'All\xc4\x81h' b'especially' b'to' b'die' b',' b'this' b'was' b'initially' b'retitled' b'as' b'they' b'could' b'be' b'[' b'or' b']' b'but' b'they' b'have' b'no'
    b'close' b'appearance' b',' b'a' b'good' b'tactical' b'with' b'out' b'with' b'Stahn' b',' b"'" b'If' b'seem' b'rarely' b'go' b'into' b'<unk>' b'.' b'"'
    b'To' b'explain' b'then' b'it' b'is' b'possible' b'that' b'they' b'might' b'be' b'somewhat' b'rounded' b'and' b'<unk>' b'about' b'Scandinavia' b'with' b'one' b'of' b'the'
    b'other' b'classes' b',' b'they' b'could' b'be' b'seeking' b'at' b'a' b'lethal' b'monument' b'who' b'could' b'be' b'"' b'killed' b'.' b'"' b'RNF' b'noted'
    b'he' b'was' b'widespread' b'a' b'dramatic' b'bird' b'to' b'have' b'"' b'<unk>' b'"' b'.' b'Another' b'butterflies' b'spoke' b'in' b'breeding' b'action' b',' b'when'
    b'he' b'trapped' b'his' b'gas' b'cosmic' b'nervous' b'eye' b'throughout' b'their' b'chest' b'by' b'young' b'studies' b'.' b'Entering' b'by' b'farmers' b',' b'they' b'start'
    b'towards' b'ventured' b'Keith' b'coloration' b'(' b'Kobe' b'engagements' b')' b',' b'she' b'ordered' b'it' b'not' b'sons' b'.' b'Once' b'it' b'seems' b'West' b"'s"
    b'costumes' b'between' b'which' b'she' b'placed' b'without' b'another' b'as' b'if' b'they' b'do' b'.' b'Because' b'her' b'abilities' b'certainly' b'tell' b'one' b'towards' b'a'
    b'young' b'angle' b'themselves' b'releases' b'the' b'anion' b'were' b'needed' b'to' b'be' b'constitutes' b'by' b'palette' b',' b'he' b'is' b'also' b'<unk>' b'.' b'The'
    b'parents' b'can' b"'t" b'happen' b'a' b'passing' b'microscope' b'could' b'finally' b'be' b'infected' b'.' b'As' b'they' b'cannot' b'find' b'their' b'ability' b'over' b'"'
    b'eggs' b'"' b'some' b'people' b'use' b'them' b'doesn' b'acids' b'ballot' b':' b'he' b'probably' b'saw' b'the' b'mature' b'power' b'stalled' b'by' b'"' b'one'
    b'freedom' b'to' b'compromise' b'in' b'human' b'history' b',' b'so' b'that' b'cured' b',' b'there' b'has' b'no' b'chance' b'system' b',' b'sending' b'that' b'we'
    b"'re" b'polished' b',' b'because' b'year' b'seem' b'to' b'give' b'useful' b'things' b'they' b"'ve" b'fantastic' b'good' b'@-@' b'controlled' b'.' b'When' b'they' b'is'
    b'more' b'of' b'their' b"'ll" b'think' b'up' b'the' b'signal' b'Siak' b'possession' b'you' b'took' b'the' b'<unk>' b'bar' b'.' b'I' b'get' b'reach' b'much'
    b'again' b'on' b'that' b"'" b'Shane' b"'" b'reason' b',' b'tobacco' b'it' b'must' b'find' b'them' b'DRS' b'productions' b'on' b'the' b'scare' b'to' b'him'
    b',' b'but' b'individuals' b'recommended' b'them' b'out' b',' b'unlike' b'a' b'adventures' b'that' b'would' b'be' b'.' b'"' b'Sometimes' b'a' b'dependency' b'story' b'of'
    b'Zapata' b',' b'however' b',' b'<unk>' b'representative' b'of' b'planet' b'is' b'poor' b'by' b'Wins' b',' b'and' b'immediately' b'moves' b'as' b'.' b'<eos>' b'The'
    b'gardens' b'are' b'characterised' b'by' b'encrusted' b'affiliation' b'by' b'Fish' b',' b'barely' b'leading' b'.' b'With' b'what' b'is' b'less' b'effective' b',' b'unified' b'they'
    b'eat' b'such' b'as' b'the' b'tendencies' b'.' b'He' b'also' b'enters' b'the' b'behaviour' b'of' b'fox' b'acid' b',' b'but' b'a' b'edibility' b'to' b'consider'
    b';' b'hares' b'is' b'unable' b'to' b'conduct' b'and' b'wrote' b'.' b'<eos>' b'RedOctane' b'on' b'Mona' b'<unk>' b'states' b'in' b'various' b'<unk>' b'efforts' b'in'
    b'the' b'conclusion' b'of' b'the' b'locals' b'style' b'that' b'Ceres' b'kicked' b'on' b'to' b'have' b'begun' b';' b'they' b'think' b'that' b'some' b'of' b'one'
    b'chicks' b'"' b'procedures' b'between' b'cool' b'and' b'bad' b'aspects' b'of' b'Christianity' b'"' b'.' b'He' b'called' b'it' b'they' b'time' b'a' b'"' b'pet'
    b'barefoot' b'"' b',' b'which' b'does' b'not' b'admit' b'or' b'run' b'.' b'<eos>' b'The' b'selenide' b'is' b'granite' b'along' b'and' b'fresh' b'outside' b'variable'
    b'peoples' b'of' b'leading' b'events' b',' b'if' b'is' b'with' b'<unk>' b',' b'individually' b'relationship' b'up' b'and' b'instead' b'of' b'kinds' b'that' b'it' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.5
    loss: 5.168
    elapsed time (seconds): 104.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  9.801 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
