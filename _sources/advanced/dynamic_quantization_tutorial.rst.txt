.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'represent' b'motorised' b'breakdown' b'and' b'death' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Habitat' b'=' b'=' b'<eos>' b'<eos>' b'The' b'king' b'holds' b'its'
    b'establishment' b'of' b'certain' b'commentary' b'with' b'Mecca' b'<unk>' b'on' b'any' b'side' b';' b'Jordan' b"'s" b'is' b'Odaenathus' b';' b'a' b'short' b'storage' b'responsible'
    b'have' b'successful' b'support' b'\xe2\x80\x94' b'Carl' b'Matthews' b'and' b'UFO' b'in' b'late' b'1999' b'.' b'Boise' b'State' b'Sun' b"'Toole" b'spent' b'one' b'third' b'year'
    b',' b'and' b'that' b'"' b'<unk>' b'notices' b'a' b'abuse' b'of' b'trap' b'\xe2\x80\x94' b'they' b'feel' b'a' b'independent' b'difference' b'in' b'most' b'countries' b'and'
    b'head' b'.' b'"' b'He' b'returns' b'toward' b'in' b'the' b'Rural' b'<unk>' b'Live' b'very' b'<unk>' b'first' b'.' b'The' b'topped' b'secret' b'play' b'in'
    b'the' b'Rich' b'Factor' b'saw' b'<unk>' b'Hiller' b',' b'clergy' b'and' b'redemption' b',' b'Nicholas' b'chat' b'Johnston' b'and' b'Committees' b'.' b'<eos>' b'<eos>' b'<eos>'
    b'=' b'Benjamin' b'violacea' b'=' b'<eos>' b'<eos>' b'Six' b'Torah' b'is' b'governed' b'by' b'reports' b'used' b'by' b'Air' b'commissions' b'at' b'a' b'southern' b'10'
    b',' b'giving' b'of' b'1' b'million' b'tons' b'(' b'4' b'@.@' b'72' b'km' b')' b',' b'which' b'served' b'a' b'large' b'curve' b'itself' b'on'
    b'the' b'flood' b'.' b'A' b'period' b'of' b'observations' b'@-@' b'driven' b'complexes' b'are' b'still' b'taken' b'on' b'Lake' b'Earth' b',' b'which' b'bears' b'many'
    b'aptitude' b'in' b'glitches' b'.' b'A' b'previously' b'speculated' b'of' b'the' b'exemplary' b'post' b'@-@' b'year' b',' b'its' b'Palestine' b'Ziltoid' b'the' b'green' b'crossover'
    b'of' b'nests' b'.' b'The' b'maximum' b'race' b'of' b'this' b'last' b'transit' b'of' b'Peshkin' b'as' b'the' b'first' b'parrot' b'process' b',' b'a' b'lethal'
    b'e4' b'planet' b',' b'consists' b'of' b'the' b'modern' b'corps' b'of' b'Milburn' b'designed' b'to' b'build' b',' b'where' b'under' b'certain' b',' b'on' b'Filmfare'
    b"'s" b'Rock' b'.' b'The' b'game' b"'s" b'multi' b'@-@' b'Islamic' b'<unk>' b',' b'nominal' b'as' b'Directed' b'by' b'its' b'drilling' b',' b'objects' b'is'
    b',' b'or' b'or' b'extinct' b',' b'30' b'%' b'of' b'females' b',' b'long' b',' b'290' b'brilliantly' b'gardens' b',' b'and' b'wing' b'communications' b'as'
    b'well' b'as' b'native' b',' b'low' b'and' b'agricultural' b',' b'Ullev\xc3\xa5l' b',' b'landscape' b',' b'<unk>' b'and' b'roll' b'to' b'more' b'than' b'20' b'%'
    b'.' b'It' b'is' b'also' b'reducing' b'by' b'bird' b'Right' b',' b'as' b'they' b'improved' b'physical' b'originated' b'on' b'image' b'to' b'a' b'special' b'farm'
    b'alkaline' b'by' b'humans' b'.' b'The' b'kakapo' b'may' b'fly' b'shorten' b'neighborhood' b'of' b'nearby' b'eukaryotic' b'spores' b',' b'especially' b'<unk>' b'or' b'Putnam' b','
    b'<unk>' b'.' b'<eos>' b'antibiotic' b'called' b'for' b'Oxford' b'Union' b',' b'is' b'strained' b'in' b'Gruffudd' b',' b'which' b'was' b'recorded' b'on' b'2' b'October'
    b'2014' b',' b'and' b'began' b'in' b'various' b'pools' b'from' b'Ireland' b'.' b'The' b'semicircular' b'trigger' b',' b'contains' b'the' b'famous' b'genus' b'Shiva' b'on'
    b'the' b'island' b'of' b'spiny' b'Avon' b',' b'stragglers' b',' b'is' b'different' b'than' b'achieving' b'blue' b'areas' b',' b'as' b'they' b'are' b'included' b','
    b'but' b'they' b'eventually' b'feed' b'on' b'factor' b'.' b'They' b'are' b'also' b'evident' b'as' b'transcription' b'elaborate' b',' b'frequencies' b',' b'<unk>' b',' b'Arabia'
    b',' b'mega' b',' b'valve' b',' b'olive' b'tiny' b',' b'and' b'slip' b'Box' b',' b'does' b'not' b',' b'who' b'may' b'translate' b'from' b'by'
    b'sex' b'.' b'This' b'species' b'has' b'been' b'originally' b'being' b'descriptive' b',' b'from' b'high' b'requirements' b'with' b'them' b',' b'Lactarius' b'heat' b')' b','
    b'value' b',' b'humour' b'Minh' b'and' b'Learning' b'population' b'each' b',' b'short' b'rare' b',' b'hanging' b'and' b'Mennonites' b'.' b'Common' b'insects' b'also' b'created'
    b'heavy' b'birds' b',' b'which' b'for' b'many' b'other' b'737s' b'.' b'Northern' b'farm' b'obtained' b'and' b'rifled' b'journeys' b';' b'they' b'was' b'published' b'in'
    b'the' b'late' b'South' b'century' b'in' b'<unk>' b'and' b'Utah' b',' b'where' b',' b'several' b'smaller' b'languages' b'were' b'lost' b'near' b'this' b'elements' b'.'
    b'dentistry' b'hired' b'evidence' b'instead' b'of' b'common' b'lanthanide' b',' b'beginning' b'to' b'be' b'more' b'recent' b'.' b'A' b'collection' b'of' b'this' b'species' b'that'
    b'also' b'blamed' b'their' b'195' b'adultery' b',' b'"' b'Ishmaelites' b'"' b'may' b'be' b'found' b'over' b'20' b'minutes' b'per' b'year' b',' b'except' b'the'
    b'vigil' b'with' b'other' b'non' b'@-@' b'<unk>' b'<unk>' b'fertility' b'attempts' b'.' b'However' b',' b'Old' b"'Malley" b'has' b'three' b'reigned' b'Ogdon' b',' b'with'
    b'the' b'same' b'offspring' b'to' b'flash' b'humans' b',' b'sometimes' b'catapulted' b'several' b'riverbanks' b',' b'primarily' b'Walters' b',' b'Including' b'well' b'or' b'is' b'<unk>'
    b'.' b'<eos>' b'With' b'copper' b',' b'territory' b'alone' b',' b'feeding' b'meetings' b'typhoon' b'gravitational' b',' b'unions' b'and' b'other' b'acts' b'are' b'likely' b'to'
    b'be' b'more' b'memorable' b'.' b'The' b'combination' b'of' b'pathetic' b'Indian' b'acts' b'can' b'be' b'constitute' b'using' b'it' b'and' b'their' b'nest' b'recall' b','
    b'such' b'as' b'Seminoles' b'or' b'reuse' b'it' b'to' b'ensure' b'.' b'A' b'degree' b'in' b'northern' b'2009' b',' b'participants' b'discover' b'"' b'<unk>' b'"'
    b'have' b'ended' b'by' b'<unk>' b',' b'especially' b'in' b'response' b'to' b'some' b'undistinguished' b'terms' b'.' b'<eos>' b'Silverstone' b'Essential' b'starling' b',' b'consumption' b'for'
    b'Australian' b'explosions' b',' b'could' b'be' b'sent' b'to' b'a' b'solar' b'reptile' b'until' b'early' b'2002' b'or' b'those' b',' b'arranged' b'in' b'high' b'areas'
    b'from' b'Bir' b'One' b'form' b',' b'the' b'posterior' b'implication' b'while' b'extending' b'by' b'their' b'<unk>' b'while' b'over' b'20' b'metres' b'(' b'4' b'ft'
    b')' b'.' b'It' b'is' b'extremely' b'widely' b'produced' b'by' b'them' b'and' b'snakes' b'.' b'As' b'of' b'August' b'1963' b'are' b'the' b'largest' b'litter'
    b'range' b'between' b'Ceres' b',' b'its' b'plumage' b'in' b'1801' b'DAGs' b'imagined' b'provided' b'since' b'desert' b'waters' b',' b'so' b'these' b'sales' b'can' b'be'
    b'made' b'from' b'maximum' b'trees' b'.' b'This' b'may' b'be' b'rare' b'in' b'Gothic' b'components' b',' b'indicating' b'ability' b',' b'conducting' b'them' b',' b'even'
    b'name' b'exceptional' b',' b'such' b'as' b'<unk>' b',' b'adult' b'normal' b',' b'while' b'.' b'understandable' b'of' b'Conservation' b"'s" b'objections' b'(' b'waving' b'<unk>'
    b')' b'is' b'the' b'major' b'city' b'head' b'by' b'flash' b'certification' b'.' b'Common' b'starlings' b'were' b'characterized' b'by' b'other' b'female' b'native' b'hair' b'along'
    b'with' b'masturbation' b',' b'asci' b',' b'and' b'racial' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Nod' b'names' b'=' b'=' b'<eos>' b'<eos>' b'The'
    b'species' b'undescribed' b'noise' b',' b'and' b'cylindrical' b'body' b'vaulted' b';' b'most' b'drums' b'under' b'Australia' b'is' b'regarded' b'in' b'common' b'events' b'and' b'even'
    b'on' b'1901' b'and' b'conditions' b'.' b'<unk>' b'may' b'often' b'disperse' b'by' b'ribosomes' b'range' b'from' b'flow' b',' b'in' b'2010' b',' b'in' b'Russia'
    b',' b'an' b'fumbles' b'of' b'the' b'booms' b'and' b'French' b'masses' b'may' b'<unk>' b'or' b'express' b'.' b'Common' b'behaviour' b'occurs' b'spelled' b'incorporate' b'them'
    b'as' b'when' b'they' b'resemble' b'dark' b'or' b'goods' b'around' b'normal' b'rocks' b'are' b'access' b'to' b'others' b'at' b'a' b'rate' b'of' b'females' b','
    b'with' b'"' b'males' b'"' b'and' b'they' b'may' b'be' b'necessary' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Congress' b'of' b'Syria' b'=' b'<eos>' b'<eos>'
    b'Ceres' b'living' b'back' b'recording' b'materials' b'because' b'of' b'many' b'common' b'prime' b'starlings' b',' b'Molokai' b'(' b'1888' b')' b'(' b'Utah' b')' b','
    b'Shiina' b',' b'Cell' b'Republic' b',' b'being' b'discovered' b'to' b'the' b'UK' b'Foundation' b'along' b'towards' b'the' b'south' b'of' b'1630' b',' b'plus' b'information'
    b'on' b'a' b'Beaver' b'<unk>' b'station' b',' b'on' b'a' b'basis' b'near' b'its' b'home' b'as' b'a' b'food' b'oxide' b'.' b'The' b'group' b'was'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.4
    loss: 5.168
    elapsed time (seconds): 103.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  9.401 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
