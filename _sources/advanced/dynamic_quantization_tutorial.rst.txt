
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'or' b'not' b'with' b'doors' b',' b'based' b'on' b'all' b'of' b'each' b'other' b',' b'<unk>' b',' b'tar' b',' b'a' b'big' b'guilt' b'.'
    b'<eos>' b'Or' b'that' b'evidence' b'might' b'have' b'in' b'form' b',' b'cats' b"'" b'acquisition' b'occurred' b'a' b'year' b'between' b'reservoirs' b';' b'the' b'most'
    b'prominent' b'after' b'the' b'scale' b'to' b'\xce\xbaB' b'.' b'This' b'seems' b'so' b'probably' b'in' b'the' b'film' b'as' b'the' b'Ambroise' b'best' b'probable' b'of'
    b'a' b'season' b',' b'but' b'found' b'to' b'hold' b'his' b'culture' b'until' b'the' b'seven' b'main' b'stories' b',' b'and' b'recourse' b'its' b'own' b','
    b'and' b'it' b'is' b'too' b'starting' b'that' b'this' b'should' b'be' b'donated' b'.' b'They' b'of' b'non' b'@-@' b'127' b'typically' b'occurs' b'at' b'least'
    b'1' b'feet' b'(' b'3' b'@.@' b'4' b'in' b')' b'in' b'diameter' b'and' b'any' b'other' b'stability' b'are' b'envisioned' b'to' b'a' b'top' b'mantle'
    b'at' b'both' b'best' b'days' b'.' b'There' b'is' b'no' b'widespread' b'influence' b'in' b'making' b'trees' b',' b'while' b'as' b'it' b'will' b'be' b'traced'
    b',' b'they' b'angered' b'.' b'At' b'this' b'point' b',' b'the' b'laser' b'date' b'of' b'minor' b'by' b'females' b',' b'Indo' b'@-@' b'nine' b'commonly'
    b'on' b'the' b'heat' b'.' b'Initially' b'to' b'4' b'cm' b'(' b'9' b'km' b'/' b'h' b')' b',' b'they' b'can' b'Die' b'think' b'that'
    b'airfields' b'search' b'and' b'over' b'a' b'porch' b'will' b'be' b'originated' b'.' b'<eos>' b'Mycena' b'Boom' b'Bang' b'!' b'accepted' b'a' b'three' b'@-@' b'female'
    b'female' b'eye' b',' b'which' b'could' b'be' b'seen' b'as' b'a' b'random' b'origin' b'or' b'knocked' b'towards' b'Fort' b'Fox' b'to' b'happen' b',' b'they'
    b'was' b'specified' b'up' b'.' b'dust' b'records' b'would' b'be' b'further' b'.' b'For' b'example' b',' b'\xc3\x8ele' b'Ion' b'presented' b'the' b'right' b'of' b'Elliott'
    b'and' b'concentrated' b'1' b'metres' b'(' b'4' b'@.@' b'2' b'in' b')' b'.' b'The' b'chicks' b'is' b'rarely' b'plain' b'and' b'unworthy' b'.' b'Colorado'
    b'peckii' b'defected' b'back' b'in' b'a' b'short' b'deal' b'normally' b'.' b'6' b',' b'expanding' b'outside' b',' b'most' b'sophisticated' b'or' b'clearly' b'says' b','
    b'Then' b'his' b'first' b'lives' b';' b'that' b'only' b'one' b'burn' b'display' b'mother' b'and' b'don' b"'t" b'later' b'form' b'their' b'order' b'in' b'ribonuclease'
    b'Avloed' b'into' b'HMS' b'M.' b'genealogical' b'(' b'Tsubame' b')' b'Sword' b'Kildare' b'Ukraine' b'in' b'1999' b'.' b'mobile' b'them' b'was' b'eased' b'almost' b'in'
    b'system' b',' b'with' b'only' b'60' b'freshmen' b'.' b'helical' b'birds' b'were' b'introduced' b'to' b'The' b'diet' b',' b'thus' b'began' b'to' b'discourage' b'estimate'
    b'or' b'lacks' b'a' b'coloured' b'yacht' b'pass' b',' b'and' b'each' b'objects' b'agreed' b'for' b'the' b'eye' b'.' b'When' b'they' b'have' b'made' b'<unk>'
    b'in' b'<unk>' b',' b'they' b'believe' b'to' b'be' b'the' b'first' b'risk' b'of' b'the' b'noisy' b'Republic' b'.' b'In' b'1789' b',' b'operating' b'eggs'
    b'football' b',' b'common' b'luminosity' b'was' b'steered' b'throughout' b'age' b',' b'so' b'these' b'grows' b'standards' b'of' b'activity' b'species' b'stated' b'to' b'have' b'moved'
    b'to' b'Australia' b'from' b'John' b'generation' b'of' b'Ceres' b'.' b'These' b'kinds' b'include' b'this' b'push' b'in' b'Omaha' b'to' b'find' b'up' b'to' b'risk'
    b'\xe2\x80\x94' b'scenario' b'usually' b'factors' b'in' b'Wales' b'.' b'The' b'poorly' b'American' b'starling' b'and' b'the' b'diversity' b'of' b'All' b'Korea' b'will' b'turn' b'<unk>'
    b'with' b'adaptable' b'to' b'<unk>' b',' b'conservation' b'.' b'The' b'head' b'also' b'have' b'filled' b'always' b'of' b'being' b'triple' b'.' b'While' b'when' b'migrant'
    b'kakapo' b'lubricated' b'touch' b'off' b'them' b'the' b'predators' b'still' b'sealed' b'very' b'barbettes' b'in' b'it' b',' b'they' b'were' b'originally' b'very' b'their' b'male'
    b'.' b'Around' b'opening' b',' b'96' b'%' b'of' b'Ceres' b'featured' b'or' b'<unk>' b'any' b'hats' b'smell' b',' b'may' b'combine' b'to' b'increase' b'its'
    b'left' b'system' b'or' b'even' b'to' b'have' b'long' b',' b'largely' b'after' b'to' b'burn' b'<unk>' b'.' b'Manufactured' b'in' b'daylight' b',' b'the' b'nest'
    b'is' b'finally' b'common' b',' b'although' b'their' b'faults' b'outages' b'aims' b'to' b'develop' b'it' b'.' b'Starting' b'on' b'temporary' b'artistic' b'birds' b'(' b'Herons'
    b',' b'<unk>' b',' b'Divine' b'when' b'masons' b'exist' b'for' b'numbers' b')' b'.' b'The' b'difficulty' b'of' b'other' b'as' b'juveniles' b'bulky' b'starlings' b'have'
    b'been' b'praised' b'.' b'<eos>' b'As' b'however' b',' b'this' b'may' b'be' b'performed' b'on' b'a' b'hole' b',' b'which' b'Go\xc3\xa2ve' b'particularly' b'three' b'limited'
    b'Grade' b'effects' b';' b'however' b',' b'it' b'provides' b'that' b'queries' b'rely' b'in' b'in' b'species' b'of' b'horizontal' b'events' b'.' b'<eos>' b'The' b'kakapo'
    b'occurs' b'around' b'the' b'mouths' b'of' b'<unk>' b',' b'Ireland' b',' b'and' b'wills' b'and' b'fishing' b'manifestation' b'of' b'these' b'remember' b'.' b'The' b'non'
    b'@-@' b'trick' b'cross' b'largely' b'moisture' b'when' b'they' b'are' b'.' b'In' b'the' b'order' b'they' b'pitch' b',' b'running' b'for' b'inconsistent' b'preventing' b'them'
    b'from' b'mercury' b',' b'because' b'both' b'females' b'typically' b'refer' b'to' b'their' b'incidents' b'.' b'Food' b'with' b'a' b'even' b'easily' b'collected' b'at' b'least'
    b'2' b'@.@' b'2' b'million' b'.' b'<unk>' b'(' b'reliquaries' b')' b'tends' b'to' b'say' b'that' b'Ceres' b'instrumental' b'females' b'of' b'allows' b'<unk>' b'forever'
    b'.' b'coincidence' b'Typhoon' b'Venus' b'predation' b'the' b'eggs' b'between' b'Friars' b',' b'perhaps' b'a' b'family' b'taste' b'activity' b'.' b'"' b'These' b'leather' b'cut'
    b'may' b'be' b'AAR' b'in' b'a' b'overly' b'time' b'harmonica' b',' b'Cellular' b',' b'vast' b',' b'or' b'fluorescence' b'a' b'extraordinary' b'Vickers' b'air' b'imitate'
    b'modification' b',' b'or' b'<unk>' b'females' b'aimed' b'for' b'birds' b'there' b'could' b'not' b'be' b'extremely' b'microscopy' b'as' b'they' b'could' b'be' b'close' b'to'
    b'consider' b'underground' b',' b'black' b'on' b'his' b'outer' b'arms' b'"' b'.' b'This' b'system' b'is' b'close' b'to' b'stages' b',' b'and' b'by' b'Romania'
    b',' b'whereas' b'in' b'some' b'areas' b',' b'they' b'were' b'having' b'a' b'pair' b'of' b'from' b'from' b'<unk>' b'for' b'10' b'individuals' b',' b'making'
    b'significant' b'damage' b'that' b'they' b'feed' b'in' b'each' b'of' b'50' b'.' b'Then' b'the' b'kakapo' b'and' b'afterward' b'are' b'also' b'hypothesized' b'of' b'residents'
    b'.' b'<unk>' b'Boswell' b"'s" b'sulfide' b'gets' b'by' b'the' b'<unk>' b'graduation' b'and' b'K\xc5\x8dsaku' b'generated' b'for' b'integrity' b',' b'Fannie' b',' b'<unk>' b','
    b'<unk>' b',' b'actor' b',' b'The' b'stadion' b',' b'slip' b'and' b'luminosity' b'towards' b'Nizam' b',' b'440' b'subtype' b',' b'and' b'hot' b'lighting' b','
    b'with' b'a' b'common' b'head' b'of' b'airspace' b'and' b'Narayana' b'and' b'oni' b'.' b'In' b'southern' b'Ireland' b',' b'the' b'kakapo' b'does' b'not' b'speak'
    b',' b'facilitated' b'by' b'mass' b'<unk>' b':' b'(' b'shoulders' b')' b'.' b'delayed' b'diet' b',' b'foreign' b',' b'commandments' b',' b'whites' b',' b'a'
    b'stick' b'[' b'his' b'feathers' b'can' b'be' b'differentiated' b'in' b'its' b'size' b'.' b'These' b'player' b'is' b'well' b'only' b'.' b'<eos>' b'The' b'kakapo'
    b'Supporters' b'brown' b',' b'A.' b'Heginbotham' b'(' b'Scottish' b':' b'<unk>' b')' b'and' b'ammonia' b'loyalty' b'being' b'lifting' b'by' b'English' b'.' b'Architecture' b'ago'
    b'engineering' b'<unk>' b'depicting' b'land' b'to' b'reduce' b'Box' b'nations' b',' b'it' b'can' b'excavate' b'up' b'semblance' b'for' b'breeding' b'@-@' b'active' b'form' b'.'
    b'Shiina' b'would' b'contribute' b'to' b'some' b'diseases' b',' b'called' b'their' b'neutron' b'lifestyle' b'by' b'a' b'<unk>' b'or' b'<unk>' b'that' b'can' b'be' b'varied'
    b'.' b'<eos>' b'Males' b'takes' b'place' b'on' b'the' b'basis' b'of' b'others' b',' b'usually' b'so' b'trawling' b'when' b'it' b'falls' b',' b'or' b'generally'
    b'greater' b'starlings' b'.' b'<unk>' b',' b'they' b'are' b'inclined' b'to' b'produce' b'it' b'clerical' b'<unk>' b'with' b'Riata' b'.' b'Their' b'image' b'is' b'able'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 189.5
    loss: 5.168
    elapsed time (seconds): 103.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  2.054 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
