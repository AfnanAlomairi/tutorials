.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'as' b'eye' b'.' b'The' b'way' b'have' b'been' b'spp' b'as' b'Gallia' b'Digg' b'.' b'<eos>' b'The' b'best' b'Treaty' b'of' b'a' b'short' b'motion'
    b'spanned' b'which' b'houses' b'equal' b'around' b'150' b'passes' b',' b'records' b'into' b'<unk>' b'or' b'environmental' b'else' b',' b'are' b'a' b'double' b'starling' b'until'
    b'Wales' b'.' b'The' b'hypothesis' b'and' b'has' b'received' b'over' b'20' b'\xc2\xb0' b'year' b'at' b'the' b'proposed' b'mainland' b'of' b'its' b'planet' b'before' b'their'
    b'final' b'best' b'TV' b'date' b'for' b'the' b'short' b'<unk>' b',' b'suggest' b'with' b'four' b'fatalities' b'.' b'It' b'is' b'now' b'a' b'considerable' b'plant'
    b'in' b'the' b'country' b',' b'as' b'in' b'the' b'same' b'year' b'(' b'it' b'could' b'be' b'that' b'this' b'has' b'insufficient' b'rule' b'.' b'The'
    b'committee' b',' b'short' b'known' b'150' b'@.@' b'9' b'years' b'old' b',' b'was' b'specifically' b'not' b'put' b'in' b'20' b'\xe2\x80\x93' b'27' b'(' b'1850'
    b')' b',' b'and' b'has' b'over' b'six' b'<unk>' b',' b'such' b'as' b'<unk>' b',' b'Phineas' b'<' b'49' b'@.@' b'3' b'in' b'(' b'600'
    b'mm' b')' b'long' b'ledges' b'Military' b',' b'and' b'Rich' b'Vintage' b',' b'7' b'@.@' b'31' b'\xc2\xb0' b'in' b'1930' b',' b'while' b'Alabama' b'Relationships'
    b'was' b'assumed' b'by' b'3' b'@.@' b'5' b'in' b'(' b'39' b'@.@' b'6' b'times' b')' b',' b'which' b'was' b'tied' b'on' b'a' b'star'
    b'@-@' b'house' b'best' b'@-@' b'touchdown' b'school' b'.' b'A' b'implications' b'for' b'only' b'29' b'%' b'of' b'planets' b'have' b'than' b'1' b'@.@' b'8'
    b'in' b',' b'is' b'recently' b'<unk>' b'by' b'classical' b'.' b'However' b',' b'a' b'bookcase' b'of' b'decision' b':' b'a' b'family' b'Lisle' b'branded' b'only'
    b'becoming' b'outside' b'asteroids' b'(' b'and' b'then' b'present' b'Evesham' b'long' b')' b',' b'him' b'of' b'those' b'best' b'to' b'<unk>' b'chasing' b'(' b'R'
    b'odoratus' b')' b'.' b'Europium' b'contains' b'its' b'first' b'feet' b',' b'but' b'recent' b'failed' b'between' b'it' b'and' b'exceeded' b'pigment' b'"' b'.' b'<eos>'
    b'Sun' b'Tanya' b'rises' b'up' b'when' b'proven' b'with' b'it' b'was' b'attributed' b'to' b'orbit' b',' b'and' b'that' b'recognizing' b'new' b'planet' b'texts' b'.'
    b'<eos>' b'Aware' b'on' b'13' b'November' b'2004' b',' b'in' b'2010' b',' b'there' b'was' b'"' b'possible' b'with' b'water' b'sound' b',' b'<unk>' b'spaces'
    b',' b'power' b',' b'and' b'<unk>' b'"' b',' b'Samuel' b'Boom' b'or' b'Adams' b'.' b'and' b'the' b'species' b',' b'the' b'popular' b'survival' b'of'
    b'Persia' b'was' b'3' b'years' b'old' b',' b'and' b'they' b'were' b'in' b'his' b'headlining' b'slice' b',' b'while' b'105' b'@.@' b'4' b'points' b'Counties'
    b'the' b'storm' b"'s" b'breeding' b'and' b'decrease' b'stages' b'.' b'A' b'female' b'for' b'8' b'@.@' b'3' b'\xe2\x80\x93' b'4' b'@.@' b'5' b'm' b'('
    b'16' b'@.@' b'18' b'in' b')' b'tall' b',' b'one' b'increased' b'8th' b'@-@' b'pound' b'@-@' b'radius' b'(' b'4' b'@.@' b'81' b'\xc2\xb0' b'more'
    b'or' b'7' b'ha' b')' b'was' b'separated' b'on' b'H.G.' b'Island' b'for' b'the' b'leukemic' b'churches' b'(' b'like' b'in' b'the' b'overall' b'body' b'for'
    b"'" b'previous' b'[' b'"' b'or' b'each' b'power' b')' b'is' b'an' b'Canadian' b'free' b'adult' b'rapid' b'war' b'(' b'e.g.' b'"' b')' b'is'
    b'used' b'.' b'"' b'Both' b'activities' b'were' b'designated' b'in' b'Fountain' b'and' b'<unk>' b'High' b'Forest' b'in' b'his' b'final' b'attempt' b'to' b'argue' b'she'
    b'should' b'<unk>' b'in' b'front' b'of' b'of' b'8' b'\xe2\x80\x93' b'4' b';' b'their' b'first' b'season' b'resulted' b'in' b'an' b'embroidered' b'of' b'Ireland' b','
    b'which' b'were' b'legally' b'originally' b'located' b'on' b'a' b'step' b'of' b'4' b'@.@' b'5' b'metres' b'(' b'10' b'@.@' b'5' b'kg' b')' b'long'
    b'at' b'a' b'one' b'of' b'average' b'over' b'cruise' b'km2' b'.' b'The' b'50' b'refute' b'rows' b'also' b'won' b'Haifa' b'to' b'km2' b'additional' b'headman'
    b',' b'and' b'will' b'have' b'predicted' b'vary' b'in' b'an' b'condensation' b'.' b'They' b'have' b'traded' b'on' b'the' b'points' b'to' b'44b' b'of' b'680'
    b',' b'invasion' b'between' b'Madison' b'and' b'stock' b',' b'near' b'a' b'junction' b'of' b'mate' b',' b'the' b'mini' b'@-@' b'dreadnought' b',' b'medical' b','
    b'and' b'United' b'States' b'efforts' b'respectively' b',' b'and' b'augment' b'its' b'breaking' b'M\xc4\x81ori' b'to' b'argues' b'there' b'to' b'be' b'used' b'to' b'reuse' b'its'
    b'distance' b'considerably' b'into' b'another' b'face' b'(' b'"' b'I' b'infected' b'stand' b'habit' b'to' b'"' b')' b'.' b'Over' b'a' b'full' b'up' b'of'
    b'100' b'@.@' b'1' b'km2' b',' b'narrow' b'population' b'million' b'shaft' b'<unk>' b'in' b'the' b'data' b'.' b'An' b'combination' b'of' b'sized' b'Valeria' b','
    b'internal' b',' b'fell' b'from' b'subgraph' b'before' b'parallel' b'.' b'In' b'relation' b',' b'there' b'are' b'two' b'manufacture' b'from' b'the' b'small' b'measurements' b'in'
    b'Ireland' b'covering' b'the' b'next' b'to' b'northern' b'14' b'\xc2\xb0' b'tall' b'(' b'4' b'\xc2\xb0' b'F' b')' b'.' b'As' b'of' b'2016' b',' b'Yours'
    b'images' b'note' b'that' b'this' b'same' b'year' b'is' b'poor' b'breeding' b'or' b'then' b'by' b'clay' b',' b'armlets' b',' b'and' b'overlooking' b'combined' b'feathers'
    b'.' b'On' b'16' b'June' b'1931' b',' b'Frankish' b'Carolina' b'had' b'fewer' b'of' b'the' b'country' b',' b'with' b'the' b'population' b',' b'phase' b'of'
    b'Ceres' b',' b'infrastructure' b',' b'and' b'coatings' b'.' b'These' b'relative' b'of' b'<unk>' b',' b'led' b'with' b'a' b'successful' b'"' b'acute' b'"' b'density'
    b'for' b'three' b'species' b'are' b'grows' b'by' b'Royal' b'schools' b',' b'and' b'probably' b'emphasis' b'as' b'the' b'potentially' b'north' b'says' b'that' b'is' b'entirely'
    b'because' b'they' b'are' b'very' b'dense' b'.' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'and' b'absorbed' b'=' b'=' b'<eos>' b'<eos>' b'There' b'are' b'no'
    b'completely' b'Palestinian' b'study' b'of' b'<unk>' b'itself' b',' b'Finland' b'and' b'evolution' b',' b'with' b'collection' b'of' b'smell' b',' b'and' b'animal' b'hatred' b'stones'
    b'.' b'Further' b'of' b'psychedelic' b'and' b'cold' b',' b'Poland' b'contacts' b'birds' b',' b'though' b'the' b'other' b'male' b'provides' b'even' b'considered' b'using' b'completely'
    b'a' b'type' b'market' b'.' b'<eos>' b'Ireland' b'had' b'15' b'galericulata' b'during' b'central' b'Ireland' b',' b'around' b'16' b'years' b',' b'introduced' b'mediate' b'a'
    b'growing' b'average' b'of' b'encounters' b',' b'them' b'risk' b'to' b'mid' b'to' b'accumulate' b',' b'and' b'are' b'a' b'heat' b'by' b'240' b'@.@' b'5'
    b'%' b'of' b'the' b'upper' b'birds' b'on' b'11' b'December' b'.' b'<eos>' b'Most' b'species' b'was' b'<unk>' b'to' b'the' b'fruit' b'by' b'<unk>' b'and'
    b'Anglo' b'@-@' b'Irish' b'fires' b'and' b'end' b'because' b'they' b'are' b'impossible' b'.' b'If' b'serious' b',' b'increased' b',' b'ribosomes' b'were' b'visited' b'with'
    b'fatty' b'numbers' b',' b'with' b'S.S.' b'<unk>' b',' b'ordered' b'in' b'the' b'cycle' b'of' b'evenly' b',' b'and' b'before' b'other' b',' b'automobile' b','
    b'ambassadors' b'@-@' b'shaped' b',' b'pelvic' b',' b'<unk>' b',' b'or' b'stores' b'below' b'them' b',' b'walking' b'in' b'woodland' b',' b'to' b'1906' b','
    b'and' b'they' b'research' b'steel' b'thousands' b'.' b'These' b'original' b'colour' b'arrest' b'Seward' b'Father' b'will' b'be' b'significant' b'by' b'other' b'species' b',' b'which'
    b'they' b'were' b'made' b'of' b'their' b'final' b'small' b'roads' b'.' b'<eos>' b'A' b'miracle' b'to' b'the' b'Middle' b'Republic' b'Victor' b'Sterling' b'is' b'also'
    b'currently' b'taken' b'very' b'different' b'throughout' b'the' b'country' b',' b'eating' b'just' b'of' b'Casa' b'Rico' b'Relay' b'such' b'as' b'<unk>' b',' b'<unk>' b','
    b'Unit' b',' b'Bo' b',' b'wages' b',' b'Radio' b',' b'<unk>' b'(' b'similar' b',' b'Traphont' b',' b'Sanskrit' b'<unk>' b')' b',' b'meat' b'basketball'
    b'(' b'gentle' b'common' b'body' b',' b'or' b'Metro' b'basket' b')' b'.' b'Jesus' b'have' b'the' b'same' b'material' b'<unk>' b'.' b'The' b'scientist' b'('


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 200.3
    loss: 5.168
    elapsed time (seconds): 107.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  16.929 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
