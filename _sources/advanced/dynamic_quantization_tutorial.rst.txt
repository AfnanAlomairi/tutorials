.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'such' b'as' b'survey' b'riffs' b',' b'ranks' b'Colorado' b'and' b'Ilich' b'matter' b'.' b'"' b'The' b'heroic' b'heart' b'of' b'money' b'successive' b'<unk>'
    b'9' b'kilometres' b'(' b'20' b'm' b')' b'in' b'24' b'times' b'took' b'time' b'towards' b'gentle' b'literature' b',' b'but' b'not' b'intended' b'when' b'it'
    b'questioned' b'quite' b'Huron' b'\xe2\x80\x93' b'first' b'from' b'mischievous' b'accessibility' b',' b'armed' b'for' b'the' b'search' b'is' b'clearly' b'unknown' b',' b'because' b'[' b'of'
    b'other' b'writing' b'of' b'its' b']' b'storage' b',' b'and' b'Consequently' b'at' b'its' b'love' b'than' b'cooking' b'ability' b'/' b'are' b'want' b'to' b'Billboard'
    b'.' b'They' b'disappears' b'into' b'these' b'<unk>' b'.' b'Baja' b'details' b':' b'They' b'who' b'went' b'back' b'with' b'me' b'to' b'hunt' b'mostly' b'to'
    b'get' b'and' b'they' b'certainly' b'have' b'won' b'total' b'a' b'matter' b';' b'Castle' b'Ferrari' b'wills' b"'s" b'will' b'be' b'picked' b'with' b'the' b'supernatural'
    b'<unk>' b'popping' b'reprising' b'when' b'their' b'contemplative' b'privacy' b',' b'another' b'bird' b'can' b'certainly' b'be' b'Bunbury' b'or' b'Charlie' b'.' b'If' b'step' b'with'
    b'it' b',' b'there' b'are' b'lap' b'even' b'<unk>' b',' b'so' b'their' b'services' b'is' b'strong' b',' b'death' b',' b'and' b'holding' b'an' b'number'
    b'of' b'collar' b'declines' b'from' b'other' b'megalithic' b'works' b'on' b'support' b';' b'there' b'are' b'widespread' b'big' b'enough' b'to' b'sleep' b'to' b'it' b'if'
    b'treat' b'he' b'averaged' b'ground' b'!' b'Cash' b',' b'who' b'never' b'wants' b'the' b'movie' b'to' b'kill' b'different' b'DNA' b'.' b'It' b'is' b'also'
    b'clear' b'that' b'their' b'third' b'or' b'extent' b',' b'including' b'a' b'very' b'short' b',' b'documented' b'to' b'a' b'air' b'.' b'This' b'condition' b'is'
    b'severely' b'added' b';' b'"' b'if' b'@-@' b'S' b'"' b'were' b'only' b'affects' b'by' b'<unk>' b'.' b'The' b'family' b'attempted' b'to' b'send' b'more'
    b'so' b'may' b'be' b'used' b'with' b'dialogues' b'.' b'The' b'poems' b'are' b'believed' b'to' b'continue' b'.' b'The' b'potential' b'objects' b'of' b'breeding' b'governments'
    b'is' b'effective' b'from' b'simple' b'the' b'remix' b'.' b'slipping' b',' b'males' b'don' b"'t" b'have' b'seen' b'the' b'knowledge' b'of' b'"' b'or' b'no'
    b'one' b'move' b']' b'"' b'.' b'Thus' b',' b'at' b'their' b'Cup' b'bell' b'(' b'style' b'of' b'Cambridge' b')' b'will' b'John' b'maskrays' b','
    b'sometimes' b'all' b'in' b'the' b'other' b'or' b'methods' b'are' b'similar' b'.' b'<eos>' b'According' b'to' b'the' b'discovery' b'of' b'Mycena' b'Marina' b',' b'Maggie'
    b'surround' b'1440' b'hordes' b'in' b'importance' b'.' b'Their' b'when' b'Stacee' b'will' b'be' b'down' b',' b'rather' b'listener' b'on' b'Piazzi' b'.' b'<eos>' b'The'
    b'most' b'twenty' b'<unk>' b'edible' b'Typically' b'from' b'32' b'%' b'pesos' b',' b'by' b'Tommy' b'Doohan' b'degradation' b'which' b'are' b'<unk>' b',' b'also' b'compared'
    b'to' b'Ernst' b',' b'which' b'open' b'food' b'more' b'than' b'7' b'Baal' b'for' b'a' b'male' b';' b'one' b'@-@' b'person' b'attracted' b'him' b'to'
    b'arm' b'throw' b'and' b'one' b'side' b'of' b'the' b'color' b',' b'many' b'charges' b'who' b'describes' b'them' b'adding' b'.' b'<eos>' b'Jeff' b'subplots' b','
    b'when' b'unnecessary' b'as' b'such' b',' b'parallel' b',' b'the' b'necessary' b',' b'civilians' b'a' b'variety' b'of' b'behaviour' b'are' b'Lover' b'.' b'Kreeft' b'and'
    b'its' b'determination' b'are' b'enlarged' b'that' b'other' b'spots' b'can' b'access' b'to' b'a' b'possible' b'such' b',' b'by' b'plums' b'when' b'they' b'upper' b'killed'
    b'\xe2\x80\x94' b'which' b'lost' b'that' b'them' b'.' b'Nepal' b'all' b'related' b'damage' b'on' b'a' b'long' b'screen' b'with' b'Jacksonville' b'creatures' b'on' b'power' b','
    b'but' b'the' b'chicks' b'have' b'Stahn' b',' b'so' b'other' b',' b'but' b'close' b'to' b'often' b'Affleck' b'.' b'The' b'function' b'of' b'players' b','
    b'without' b'the' b'other' b'Greek' b'help' b',' b'takes' b'one' b'to' b'other' b'eggs' b'forced' b'them' b'.' b'One' b'female' b'differs' b'between' b'severe' b'or'
    b'other' b'tourists' b'.' b'In' b'1839' b',' b'her' b'females' b'127' b'are' b'belonged' b'by' b'<unk>' b',' b'<unk>' b',' b'and' b'<unk>' b'.' b'In'
    b'this' b'period' b',' b'more' b'sword' b'is' b'limited' b'a' b'culture' b'and' b'even' b'CCTV' b',' b'their' b'feathers' b'were' b'highly' b'<unk>' b'over' b'it'
    b'or' b'her' b'<unk>' b'.' b'<unk>' b'soundly' b'native' b'or' b'wears' b'<unk>' b',' b'may' b'be' b'sensitive' b'by' b'<unk>' b'or' b'Cyprus' b'near' b'playing'
    b',' b'without' b'several' b'more' b'CPS' b'the' b'splicing' b'types' b'that' b'belong' b'to' b'to' b'twenty' b'females' b'.' b'This' b'breeding' b'.' b'It' b'watch'
    b'his' b'appearance' b'into' b'the' b'contracting' b'20' b'in' b'medical' b'directions' b'with' b'each' b'other' b'.' b'<eos>' b'The' b'female' b'@-@' b'<unk>' b'of' b'males'
    b'have' b'seen' b'just' b'370' b'disabilities' b'while' b'even' b'mechanics' b'holding' b'subsided' b'to' b'monitor' b'eye' b',' b'and' b'they' b'are' b'able' b'to' b'have'
    b'favoured' b'a' b'powerful' b'or' b'produce' b'larger' b'weakly' b'patch' b',' b'a' b'4' b'@.@' b'Greenwich' b'civilization' b',' b'Scenic' b'branches' b',' b'50' b'\xe2\x80\x93'
    b'5' b'<unk>' b',' b'which' b'are' b'fully' b'obtained' b'until' b'diameter' b'.' b'Also' b',' b'they' b'are' b'forced' b'to' b'place' b',' b'so' b'are'
    b'one' b'of' b'the' b'best' b'two' b'languages' b',' b'and' b'possibly' b'upgrade' b',' b'it' b'may' b'be' b'held' b'up' b'tracking' b'by' b'9' b'kilometres'
    b'(' b'3' b'@.@' b'8' b'mi' b')' b'to' b'promote' b'the' b'left' b'domesticated' b'.' b'Females' b'were' b'<unk>' b'out' b'like' b'it' b'sings' b'small'
    b'courtship' b',' b'beyond' b'archival' b',' b'so' b'it' b'is' b'possibly' b'defined' b'.' b'<unk>' b',' b'some' b'humiliated' b',' b'can' b'be' b'trees' b'as'
    b'1' b'@.@' b'8' b'years' b',' b'either' b'<unk>' b'.' b'There' b'are' b'snakes' b'of' b'20' b'@.@' b'10' b'times' b'per' b'range' b',' b'and'
    b'33' b'birds' b'have' b'associated' b'females' b'from' b'major' b'or' b'microscopic' b'darkness' b'.' b'About' b'60' b'kilometres' b'(' b'6' b'@.@' b'8' b'in' b')'
    b'high' b'amounts' b'may' b'be' b'smell' b'with' b'less' b'mature' b'letters' b',' b'and' b'with' b'large' b'understory' b'singly' b',' b'if' b'and' b'their' b'males'
    b'were' b'@-@' b'sac' b'.' b'Furthermore' b',' b'they' b'are' b'distinguished' b'or' b'unlock' b'at' b'Malta' b'.' b'Males' b'have' b'been' b'introduced' b'to' b'males'
    b'in' b'print' b'<unk>' b',' b'such' b'as' b'anthracycline' b'or' b'<unk>' b',' b'as' b'they' b'may' b'be' b'easier' b'to' b'receive' b'humans' b'.' b'They'
    b'can' b'be' b'said' b'to' b'have' b'some' b'insects' b'repeated' b'during' b'the' b'existence' b',' b'and' b'the' b'nestling' b'care' b'stems' b'by' b'them' b'is'
    b'deeply' b'Forever' b'among' b'another' b'clock' b'.' b'If' b'common' b'male' b',' b'facing' b'their' b'black' b'view' b'foundation' b'during' b'track' b',' b'he' b'then'
    b'could' b'use' b'small' b'heat' b'cells' b'on' b'sexual' b'behaviour' b',' b'so' b'on' b'fire' b'<unk>' b',' b'cadmium' b'and' b'neutron' b'plates' b'Threepwood' b'according'
    b'to' b'common' b'well' b'fountain' b'.' b'They' b'14' b'\xe2\x80\x93' b'5' b'in' b'(' b'2' b'@.@' b'50' b'in' b')' b'tall' b',' b'particularly' b'above'
    b'1' b'@.@' b'5' b'm3' b'(' b'8' b'in' b')' b'.' b'Once' b'I' b'usually' b'smell' b'or' b'normal' b'females' b',' b'males' b'are' b'incapable'
    b'missing' b'above' b'up' b'when' b'are' b'high' b'.' b'Females' b'spread' b'in' b'gills' b'when' b'those' b'is' b'largely' b'useful' b',' b'particularly' b'before' b'normally'
    b'holes' b'.' b'The' b'determined' b'lamina' b',' b'non' b'@-@' b'transcriptional' b'bones' b'are' b'get' b'in' b'some' b'birds' b'by' b'Christians' b'.' b'The' b'Firecrest'
    b'allows' b'only' b'to' b'be' b'more' b'<unk>' b'or' b'is' b'both' b'<unk>' b'.' b'According' b'to' b'Sunday' b',' b'Rodrigues' b'starlings' b'on' b'a' b'orange'
    b'smell' b'call' b'dead' b'when' b'Ceres' b'can' b'continue' b'to' b'end' b'low' b'.' b'The' b'diagnosis' b'of' b'<unk>' b'with' b'marred' b'<unk>' b'<unk>' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 198.5
    loss: 5.168
    elapsed time (seconds): 101.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  7.725 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
