
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'s" b'accusations' b'takes' b'place' b'in' b'folk' b',' b'the' b'minor' b'in' b'claims' b'.' b'<eos>' b'In' b'September' b'his' b'Outer' b'Association' b'published' b'to'
    b'prevent' b'access' b',' b'as' b'airplane' b"'s" b'invaded' b'soundtracks' b'since' b'all' b'conference' b'attacks' b'style' b',' b'favouring' b'wine' b'through' b'his' b'resignation' b'to'
    b'have' b'a' b'decisive' b'when' b'"' b'almost' b'six' b'are' b'only' b'much' b'influenced' b'and' b'the' b'people' b'and' b'(' b'Ernest' b')' b'could' b'have'
    b'a' b'rich' b'Peru' b'who' b'would' b'not' b'warrant' b'.' b'"' b'Most' b'points' b'after' b'girl' b'visited' b'for' b'Echmarcach' b',' b'a' b'precinct' b'in'
    b'Somerset' b',' b'and' b'his' b'mother' b',' b'The' b'NS' b"'" b'marriage' b'Hall' b'breeds' b'in' b'Toronto' b'@-@' b'Al' b'(' b'survivors' b'from' b'an'
    b'mound' b'refer' b'to' b'was' b'specifically' b'Harvard' b'and' b'the' b'<unk>' b'of' b'<unk>' b'as' b'a' b'native' b'planet' b')' b'.' b'<eos>' b'Peter' b'M.'
    b'Conrad' b'enjoyed' b'Jack' b'uproar' b'a' b'4' b'@.@' b'3' b'baseball' b'@-@' b'hour' b'@-@' b'vertex' b'766th' b'<unk>' b',' b'which' b'was' b'described' b'as'
    b'a' b'planet' b'because' b'intermedius' b',' b'supported' b'by' b'another' b'six' b'Gruffudd' b'with' b'the' b'Hoover' b'War' b'is' b'highly' b'variable' b'than' b'that' b','
    b'and' b'felt' b'it' b'had' b'since' b'of' b'"' b'dear' b'trouble' b'American' b'monstrous' b'Catholic' b',' b'and' b'at' b'the' b'nineteenth' b'century' b'of' b'claim'
    b'"' b'.' b'They' b'usually' b'rotator' b'<unk>' b'due' b'to' b'during' b'<unk>' b'Earth' b',' b'saying' b'that' b'"' b'her' b'revered' b'dog' b'polynomial' b'...'
    b'and' b'him' b',' b'<unk>' b'those' b'bears' b'a' b'rapid' b'atmosphere' b',' b'make' b'the' b'discovery' b'of' b'a' b'destruction' b'over' b'stories' b'than' b'the'
    b'prohibiting' b'ad' b'translating' b'from' b'a' b'rather' b'device' b'and' b'tropical' b'American' b'@-@' b'term' b',' b'while' b'now' b'happened' b'against' b'it' b'with' b'sacraments'
    b'of' b'somebody' b',' b'putting' b'latitudes' b'as' b'<unk>' b'at' b'Princeton' b'feet' b'"' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Boise' b'de' b'Bang' b'!'
    b'(' b'Investment' b';' b'Malayalam' b')' b'=' b'<eos>' b'<eos>' b'Ceres' b'were' b'illegal' b'in' b'his' b'father' b',' b'origins' b'.' b'The' b'large' b'command'
    b'of' b'Petroleum' b'is' b'a' b'birthplace' b'by' b'Lord' b'L.' b'oversight' b',' b'joined' b'by' b'14' b'in' b'(' b'Senna' b"'s" b'small' b'novel' b')'
    b'.' b'It' b'was' b'the' b'fifth' b'act' b'in' b'a' b'number' b'of' b'rises' b'between' b'odds' b'and' b'UK' b'series' b'.' b'In' b'the' b'late'
    b'1980s' b',' b'these' b'critics' b'fishing' b'could' b'be' b'important' b'<unk>' b'.' b'Hispanic' b'appearance' b'drink' b'CCM' b'billion' b',' b'implementation' b'Half' b'and' b'more'
    b'than' b'Basra' b';' b'those' b'of' b'two' b'million' b'accounts' b'to' b'prevent' b'lamps' b'.' b'Afterwards' b',' b'2006' b',' b'when' b'an' b'third' b'@-@'
    b'two' b'<unk>' b',' b'cold' b'manager' b',' b'upward' b'and' b'headline' b'to' b'run' b'to' b'her' b'subspecies' b'could' b'be' b'acquisition' b'distinct' b'.' b'Kyle'
    b'Bartov' b'was' b'captured' b'by' b'a' b'control' b'of' b'Mercy' b'in' b'1970' b'.' b'Ceres' b'had' b'seen' b'alter' b'anywhere' b'with' b'acids' b'to' b'compete'
    b'in' b'control' b'and' b'become' b'accompanied' b'by' b'gold' b'by' b'pointing' b'without' b'rapid' b'ability' b'through' b'this' b'map' b'around' b'a' b'dozen' b'screen' b'from'
    b'Taylor' b'.' b'The' b'home' b'is' b'referring' b'to' b'fastest' b'series' b'of' b'gameplay' b',' b'or' b'leaked' b'herself' b',' b'which' b'is' b'capable' b'from'
    b'a' b'tributary' b',' b'and' b'that' b'"' b'they' b'have' b'been' b'66' b'm' b'DiBiase' b'from' b'the' b'dried' b'period' b'of' b'most' b'sole' b'white'
    b',' b'they' b'that' b'fined' b'some' b'as' b'good' b'or' b'tough' b'.' b'You' b'is' b'"' b'to' b'classify' b'those' b'its' b'will' b'.' b'When'
    b'declaring' b'that' b'the' b'production' b'would' b'be' b'a' b'tough' b'stand' b'to' b'blue' b',' b'they' b'will' b'be' b'limited' b'.' b'No' b'species' b'nifurtimox'
    b'would' b'be' b'swept' b'to' b'a' b'section' b'of' b'debt' b'.' b'For' b'this' b'reason' b'where' b'many' b'dark' b'notable' b'measures' b'that' b'are' b'still'
    b'1684' b'cannot' b'be' b'.' b'males' b'responded' b'out' b'of' b'improvements' b'repeated' b'off' b'Moe' b'across' b'the' b'2000s' b',' b'stanzas' b'measures' b'to' b'prevent'
    b'male' b'avatars' b',' b'they' b'will' b'be' b'influenced' b'by' b'those' b'or' b'can' b'be' b'possible' b'again' b'.' b'No' b'\xe2\x80\x93' b'player' b'was' b'cut'
    b'for' b'than' b'20' b'I' b'both' b'flattened' b'.' b'<eos>' b'The' b'cephalothorax' b'for' b'the' b'nascent' b'sequence' b',' b'the' b'precision' b'of' b'massive' b'Ceres'
    b',' b'knows' b'lines' b'for' b'them' b'"' b'happened' b'"' b',' b'setting' b'its' b'role' b'.' b'He' b'said' b'he' b'would' b'show' b'out' b'what'
    b'in' b'the' b'context' b'of' b'Deception' b';' b'it' b'is' b'not' b'important' b'from' b'other' b'use' b'of' b'the' b'ice' b',' b'but' b'there' b'may'
    b'be' b'argued' b'after' b'.' b'However' b',' b'it' b'is' b'able' b'to' b'be' b'all' b'looking' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Isotopes' b'='
    b'=' b'<eos>' b'<eos>' b'Reviewers' b'who' b'was' b'handled' b'during' b'the' b'storm' b'very' b'than' b'half' b'of' b'the' b'various' b'racial' b'user' b'stories' b'('
    b'crest' b')' b'.' b'The' b'season' b'as' b'occurring' b'with' b'four' b'giant' b'script' b',' b'accepted' b'at' b'a' b'all' b'intensity' b',' b'56' b'.'
    b'"' b'grants' b'a' b'overt' b'authority' b'to' b'accomplish' b'Jesus' b"'" b'printing' b'necessary' b'called' b'"' b'construction' b'active' b'after' b'after' b'complete' b',' b'Washington'
    b'under' b'Ewing' b'Britain' b',' b'William' b',' b'claims' b'of' b'the' b'<unk>' b'Union' b':' b'"' b'The' b'colored' b'people' b'of' b'The' b'human' b'films'
    b'is' b'the' b'fictional' b'object' b'of' b'all' b'just' b'something' b'to' b'happen' b'alongside' b'some' b'other' b'novels' b'and' b'their' b'combinations' b'of' b'Square' b','
    b'but' b'this' b'is' b'a' b'novel' b'killer' b'underneath' b'the' b'abuse' b'of' b'Hairan' b'Lewis' b'Soon' b'by' b'its' b'classmate' b'onwards' b',' b'when' b'is'
    b'there' b'to' b'pray' b'that' b'information' b'him' b'on' b'it' b'.' b'"' b'Twenty' b'Contact' b'died' b'by' b"'Cruz" b',' b'<unk>' b'cults' b',' b'recognition'
    b',' b'untimely' b',' b'<unk>' b'and' b'collect' b'a' b'damage' b'being' b'relieved' b'.' b'This' b'intended' b'Fringe' b'input' b'nature' b',' b'so' b'but' b'see'
    b'a' b'bird' b'of' b'<unk>' b'captures' b'man' b'and' b'Meyer' b'using' b'a' b'tough' b'planet' b'she' b'says' b'they' b'began' b'to' b'be' b'as' b'"'
    b'not' b'care' b'that' b'most' b'successful' b'had' b'gone' b',' b'instead' b'wants' b'to' b'assist' b'someone' b'when' b'they' b'should' b'see' b'them' b'like' b'him'
    b'when' b'you' b'is' b'attracted' b'to' b'character' b'willows' b'where' b'he' b'was' b'too' b'entertaining' b'.' b'"' b'<unk>' b'<unk>' b'slugs' b'was' b'also' b'known'
    b'to' b'campaign' b'although' b'he' b'can' b'also' b'be' b'supported' b'by' b'<unk>' b'.' b'Poet' b'settle' b'Walpole' b"'s" b'"' b'<unk>' b'of' b'a' b'source'
    b'"' b',' b'suggesting' b'that' b'"' b'it' b'advised' b'sort' b'of' b'an' b'whole' b'tenuous' b'planet' b'shows' b'instead' b'than' b'a' b'person' b'on' b'Plunketts'
    b'religion' b'.' b'He' b'is' b'so' b'unwilling' b'to' b'have' b'been' b'on' b'fact' b';' b'it' b'is' b'deeply' b'customized' b'or' b'varied' b'.' b'"'
    b'And' b'it' b'was' b'probably' b'a' b'less' b'direct' b'character' b',' b'BAS' b',' b'Nomura' b',' b'repetitive' b',' b'and' b'power' b';' b'on' b'the'
    b'without' b'hand' b'\xe2\x80\x93' b'18' b'onwards' b'is' b'traditional' b',' b'so' b'their' b'male' b'<unk>' b'may' b'then' b'be' b'responsible' b'for' b'<unk>' b'.' b'Being'
    b'they' b'fired' b'in' b'southeast' b'at' b'these' b'times' b',' b'Force' b'simply' b'starling' b'@-@' b'smell' b',' b'aren' b'or' b'flocks' b'were' b'distinguished' b'and'
    b'heavily' b'impossible' b'to' b'eat' b'it' b'so' b'high' b',' b'with' b'waiting' b'with' b'large' b',' b'eye' b'@-@' b'bearing' b'palaces' b',' b'or' b'from'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 189.7
    loss: 5.168
    elapsed time (seconds): 120.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.631 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
