
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'gully' b',' b'hard' b',' b'<unk>' b',' b'ensembles' b',' b'and' b'contraction' b'of' b'a' b'stool' b',' b'a' b'wide' b'being' b'named' b'by' b'side'
    b'.' b'The' b'1759' b'study' b'designed' b'Hazel' b'Cabrera' b',' b'who' b'separated' b'him' b'her' b'association' b'that' b'caused' b',' b'<unk>' b'about' b'28' b'%'
    b'of' b'chirps' b'depicts' b'at' b'17' b'years' b'.' b'<eos>' b'1865' b'Noel' b'Mosley' b'contacted' b'Mercedes' b'Man' b'Warspite' b'on' b'October' b'17' b',' b'2014'
    b',' b'with' b'111' b'%' b'to' b'1945' b',' b'in' b'two' b'target' b'buildings' b'pitched' b'on' b'six' b'television' b'games' b'in' b'the' b'1920s' b'.'
    b'The' b'contacts' b'stated' b'that' b'the' b'story' b'was' b'driven' b'by' b'family' b'construction' b'during' b'the' b'1920s' b'and' b'everyday' b',' b'Hentz' b',' b'were'
    b'significant' b'described' b'by' b'ScrewAttack' b'in' b'stats' b'.' b'Adams' b"'s" b'victory' b'and' b'withdraws' b'update' b'at' b'lever' b'to' b'speak' b'books' b'.' b'The'
    b'<unk>' b'Yorke' b'were' b'nominated' b',' b'plain' b'patrols' b',' b'<unk>' b'and' b'commercial' b'biologist' b',' b'and' b'Omar' b'appeal' b'for' b'for' b'special' b'patients'
    b'.' b'<eos>' b'There' b'was' b'spoken' b'to' b'go' b'for' b'a' b'FIFA' b'Mariners' b'squandering' b'<unk>' b'.' b'The' b'originator' b'of' b'Season' b'(' b'Ha'
    b'Boom' b'Bang' b'Bang' b')' b'of' b'King' b'Hobbs' b"'" b',' b'King' b'<unk>' b'Wilderness' b'(' b'1164' b')' b',' b'is' b'given' b'to' b'a'
    b'<unk>' b'undergone' b'lead' b'by' b'2' b'%' b'in' b'a' b'planet' b'was' b'considered' b'down' b'in' b'1909' b',' b'but' b'is' b'recorded' b'on' b'stage'
    b'or' b'by' b'on' b'that' b'day' b'.' b'spending' b'his' b'introduction' b'and' b'production' b',' b'Stevens' b'starts' b'his' b'short' b'third' b'session' b'to' b'come'
    b'away' b'before' b'the' b'central' b'chapter' b'.' b'As' b'he' b'were' b'disappointing' b'into' b'<unk>' b'throughout' b'the' b'<unk>' b',' b'J.' b'Weyden' b'thought' b'that'
    b'"' b'It' b'is' b'calculated' b'that' b'Brown' b'is' b'not' b'killed' b'.' b'"' b'Fermi' b'Power' b'of' b'Wales' b'described' b'the' b'term' b'Network' b'of'
    b'523' b'from' b'a' b'engineering' b'show' b'others' b'from' b'Scotti' b'Intifada' b'.' b'Jarvis' b',' b'is' b'probably' b'real' b'everywhere' b'at' b'a' b'meeting' b'of'
    b'22' b'January' b'he' b'<unk>' b'Vikings' b'.' b'These' b'sessions' b'have' b'even' b'been' b'made' b'in' b'power' b',' b'almost' b'to' b'spreading' b'.' b'The'
    b'Treaty' b'is' b'slated' b'to' b'be' b'more' b'devastated' b'by' b'claiming' b'that' b'they' b'went' b'ahead' b'of' b'a' b'intellectual' b'mosaic' b'game' b'and' b'by'
    b'what' b'they' b'live' b'stump' b'or' b'that' b'point' b'allow' b'that' b'even' b'with' b'civilians' b'to' b'take' b'Lake' b'History' b'as' b'it' b"'s" b'Pompey'
    b',' b'Harvey' b'jointly' b'.' b'<unk>' b',' b'rather' b'than' b'the' b'other' b'hill' b',' b'who' b'is' b'assassinated' b'to' b'be' b'presumed' b'and' b'dioxide'
    b'.' b'At' b'the' b'end' b'of' b'the' b'decades' b',' b'there' b'were' b'no' b'what' b'he' b'"' b'knew' b'it' b'leaves' b'.' b'"' b'<eos>'
    b'Unfortunately' b'a' b'abrupt' b'campaign' b'before' b'now' b'about' b'one' b',' b'it' b'is' b'joined' b'and' b'the' b'<unk>' b',' b'but' b'can' b'be' b'written'
    b'as' b'.' b'This' b'rolls' b'includes' b'solids' b'for' b'short' b'breath' b'just' b'may' b'them' b',' b'total' b'to' b'be' b'going' b'to' b'check' b'.'
    b'Mosley' b'told' b'it' b'a' b'number' b'of' b'living' b'research' b',' b'and' b'<unk>' b'achieve' b'.' b'At' b'those' b'drop' b',' b'Ulster' b'takes' b'<unk>'
    b'from' b'rapid' b'males' b'who' b'had' b'custom' b'down' b'their' b'interception' b'to' b'a' b'prolific' b'Tudor' b'test' b'mystery' b',' b'hype' b'or' b'short' b'thou'
    b'among' b'each' b'other' b'.' b'Although' b'He' b'can' b'do' b'equals' b'for' b'the' b'<unk>' b'rotation' b',' b'<unk>' b'is' b'high' b'<unk>' b',' b'allowing'
    b'them' b'to' b'be' b'<unk>' b'happening' b'.' b'<eos>' b'As' b'he' b'decides' b'to' b'produce' b'all' b'his' b'visibility' b',' b'there' b'are' b'sixth' b'choice'
    b'of' b'headdress' b'are' b'available' b'.' b'<unk>' b'find' b'the' b'feeding' b'letters' b'of' b'the' b'<unk>' b'culling' b':' b'"' b'naked' b',' b'fear' b'even'
    b'and' b'cruise' b',' b'so' b'16' b'%' b'mode' b'(' b'no' b'those' b'Services' b',' b'so' b'purple' b'driver' b'4' b'would' b'be' b'developed' b')'
    b'in' b'2007' b',' b'but' b'they' b'can' b'be' b'kept' b'back' b'spirit' b'should' b'be' b'more' b'reconciled' b'an' b'one' b'immense' b'deal' b'on' b'the'
    b'<unk>' b'without' b'sex' b',' b'so' b'on' b'that' b'day' b'all' b'over' b'the' b'other' b'<unk>' b'Scully' b',' b'which' b'was' b'flightless' b'to' b'them'
    b'and' b'one' b'will' b'be' b';' b'one' b'together' b',' b'lives' b',' b'al' b'Piano' b'coronation' b',' b'megaliths' b'(' b'sic' b')' b',' b'but'
    b'rank' b'cease' b'.' b'When' b'it' b'uses' b'their' b'an' b'thinking' b'.' b'"' b'-' b'"' b'the' b'design' b'is' b'the' b'floods' b'of' b'occurrence'
    b'"' b',' b'[' b'of' b']' b'fusion' b',' b'or' b'the' b'primary' b'position' b'of' b'hunger' b'.' b'Thousands' b'put' b'high' b'damage' b'that' b'they'
    b'actually' b'discover' b'rather' b'sympathetic' b'and' b'allowed' b'.' b'He' b'is' b'missing' b'to' b'favour' b'of' b'times' b'.' b'For' b'example' b',' b'some' b'elements'
    b'were' b'exceptional' b'to' b'act' b'upon' b'at' b'least' b'one' b'property' b'player' b'.' b'As' b'of' b'this' b'instrument' b',' b'outstanding' b'flocks' b'like' b'<unk>'
    b',' b'discussed' b'225' b'beliefs' b',' b'have' b'the' b'rank' b'of' b'<unk>' b'.' b'<eos>' b'The' b'highest' b'disciples' b'when' b'Blackie' b'was' b'adopted' b'at'
    b'her' b'life' b',' b'or' b'classification' b'four' b'.' b'It' b'is' b'already' b'learned' b'from' b'7' b'.' b'users' b'are' b'oars' b',' b'depending' b'on'
    b'1' b'@.@' b'48' b'%' b'entrance' b'that' b'comes' b'from' b'the' b'alarm' b'cycle' b'.' b'It' b'is' b'by' b'the' b'other' b'beautiful' b',' b'most'
    b'of' b'his' b'most' b'good' b'parrot' b'display' b',' b'harmonica' b',' b'G.' b'David' b'\xc5\xbbele\xc5\x84ski' b'(' b'<unk>' b')' b',' b'the' b'nest' b'(' b'later'
    b'the' b'<unk>' b'/' b'PML' b'9' b'@-@' b'spored' b'The' b'first' b'that' b'year' b'was' b'to' b'begin' b'the' b'final' b'end' b'prior' b'.' b'In'
    b'this' b'studio' b',' b'from' b'the' b'Pulse' b'of' b'Mrs.' b'Typography' b',' b'it' b'has' b'a' b'chin' b'into' b'finance' b'the' b'form' b'of' b'"'
    b'genital' b'!' b'"' b'.' b'In' b'pursuers' b',' b'common' b'starlings' b'have' b'raised' b'cause' b',' b'around' b'a' b')' b'of' b'27' b'periods' b'died'
    b',' b'the' b'female' b'(' b'a' b'part' b'of' b'pre' b'@-@' b'milk' b')' b'.' b'The' b'quarter' b'of' b'Mahesh' b"'s" b'name' b'is' b'little'
    b',' b'a' b'increasingly' b'pleasant' b'sum' b'prior' b'to' b'a' b'high' b'writer' b'which' b'is' b'strongly' b'particularly' b'<unk>' b'as' b'open' b'.' b'Lust' b'crust'
    b'a' b'lack' b'of' b'lead' b'or' b'the' b'male' b',' b'even' b'with' b'just' b'eyed' b'Angle' b'.' b'Since' b'Feldman' b'toured' b'youthful' b'nestlings' b'allowed'
    b'a' b'female' b',' b'they' b'pale' b'perform' b'for' b'rock' b'@-@' b'brown' b'trees' b'without' b'King' b'B.' b'Douglas' b'.' b'In' b'the' b'same' b'kneeling'
    b',' b'<unk>' b'<unk>' b'of' b'the' b'barrel' b'(' b'Les' b'Catherine' b')' b'is' b'noted' b'that' b'narratives' b'enters' b'it' b'.' b'A' b'integral' b'species'
    b'produces' b'inviting' b'a' b'problems' b'in' b'invertebrates' b'in' b'the' b'Lansdowne' b'source' b'of' b'La' b'v.' b'diastereoselectivity' b'and' b'opposed' b'females' b'as' b'keep' b'up'
    b'mowing' b'at' b'Villa' b'Sacred' b'.' b'In' b'western' b'hagiography' b',' b'each' b'other' b'later' b'sy\xc4\x81dv\xc4\x81da' b'may' b'be' b'large' b'by' b'many' b'all' b'or'
    b'<unk>' b'.' b'It' b'described' b'many' b'specimens' b"'" b'absorption' b'Shuffle' b',' b'and' b'sometimes' b'recommended' b'with' b'blended' b'items' b'against' b'their' b'predominantly' b'scenery'
    b'.' b'It' b'is' b'separated' b'within' b'lower' b'guests' b'when' b'they' b'were' b'white' b'.' b'A' b'female' b'of' b'stone' b'of' b'their' b'inscriptions' b','





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.7
    loss: 5.168
    elapsed time (seconds): 110.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  28.798 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
