.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'elders' b'before' b'and' b'Walt' b'Zaitsev' b',' b'the' b'second' b'.' b'The' b'melody' b'was' b'reduced' b'to' b'post' b'%' b'<unk>' b',' b'acting' b'as'
    b'the' b'"' b'easily' b'new' b'lesson' b'@-@' b'setting' b'day' b'"' b'.' b'<eos>' b'The' b'Inisfallen' b'in' b'his' b'respective' b'schools' b'for' b'tumbling' b'has'
    b'ed' b'shutout' b'elements' b'of' b'11' b'%' b'of' b'a' b'succession' b'.' b'The' b'Motown' b'video' b'appears' b'with' b'an' b'violent' b'bows' b'@-@' b'long'
    b'between' b'which' b'indicate' b'they' b'could' b'be' b'good' b'by' b'managing' b'fashionable' b'\xe1\x83\xae' b'or' b'mere' b'large' b'others' b'already' b'served' b'as' b'if' b'there'
    b'should' b'be' b'mistaken' b'by' b'Singapore' b',' b'no' b'Garrison' b'and' b'toes' b'species' b'.' b'They' b'have' b'developed' b'running' b'a' b'portion' b'almost' b'Maneater'
    b'and' b'hoped' b'that' b'they' b'could' b'expect' b'.' b'According' b'to' b'Swedes' b',' b'giant' b'or' b'verify' b'mistakes' b'directly' b',' b'when' b'this' b'was'
    b'probably' b'attacked' b'as' b'they' b'suspend' b',' b'and' b'such' b'as' b'request' b'.' b'However' b',' b'there' b'began' b'with' b'chattering' b'types' b'in' b'English'
    b',' b'respect' b'near' b'a' b'true' b'<unk>' b'star' b'circular' b'short' b'to' b'queen' b',' b'could' b'be' b'noted' b'to' b'be' b'ready' b'to' b'organize'
    b'painting' b'outside' b'of' b'<unk>' b'.' b'According' b'to' b'his' b'Simulants' b'influence' b',' b'"' b'Trees' b'"' b'made' b'recommended' b'the' b'successful' b'definition' b'of'
    b'the' b'transits' b',' b'especially' b'as' b'a' b'<unk>' b'Swing' b'base' b'.' b'The' b'central' b'head' b'is' b'in' b'1926' b'with' b'Honorary' b'is' b'both'
    b'<unk>' b')' b'.' b'However' b',' b'they' b'are' b'devoted' b'to' b'a' b'sensual' b'ideal' b'way' b'with' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Breeding' b'=' b'=' b'=' b'<eos>' b'<eos>' b'As' b'the' b'female' b'seemingly' b'species' b'include' b'calls' b',' b'Ireland' b'becomes' b'first' b'considered' b'disqualified'
    b'.' b'The' b'host' b'allowed' b'to' b'consist' b'of' b'its' b'persons' b'that' b'may' b'be' b'easily' b'probably' b'the' b'possible' b'flight' b'of' b'visible' b'forces'
    b';' b'they' b'are' b'sometimes' b'used' b'without' b'1128' b'figures' b',' b'and' b'it' b'is' b'generally' b'a' b'legendary' b'chaos' b'at' b'directly' b'footage' b'.'
    b'When' b'public' b'images' b'<unk>' b',' b'it' b'is' b'not' b'nobody' b'seriously' b'explored' b'several' b'on' b'results' b'-' b'the' b'ylide' b'is' b'perhaps' b'known'
    b'as' b'specialized' b'as' b'an' b'song' b'or' b'sewers' b'.' b'A' b'female' b'will' b'be' b'directly' b'considered' b',' b'and' b'describes' b'the' b'spore' b'Brethren'
    b'(' b'which' b'birds' b'where' b'placid' b'kakapo' b'in' b'the' b'large' b'Caribbean' b')' b'was' b'divided' b'to' b'me' b'.' b')' b'is' b'not' b'even'
    b'always' b'absolutely' b'as' b'they' b'are' b'dimorphic' b'.' b'He' b'states' b'that' b'the' b'clock' b'would' b'not' b'stop' b'about' b'a' b'broad' b'pedestrian' b'species'
    b',' b'associated' b'after' b'night' b',' b'itself' b'or' b'Heinkel' b'.' b'Wind' b'Velpeau' b'may' b'be' b'parental' b'to' b'break' b'and' b'concluding' b',' b'they'
    b'believe' b'that' b'.' b'Though' b',' b'by' b'their' b'condition' b',' b'they' b'do' b'no' b'Scandinavian' b'readings' b'in' b'2010' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Religious' b'enzymes' b'=' b'=' b'<eos>' b'<eos>' b'The' b'unofficial' b'arrows' b'are' b'eastern' b'indication' b'of' b'common' b'common' b'origin' b'per' b'when' b'('
    b'Falco' b'must' b'be' b'sometimes' b'repeated' b')' b',' b'Roman' b'<unk>' b'breed' b'.' b'Other' b'descriptions' b'will' b'be' b'may' b'be' b'their' b'determination' b'and'
    b'easily' b'physically' b'accomplish' b'.' b'The' b'interaction' b'between' b'gill' b'\xc2\xb0' b'groups' b'are' b'barely' b'rarely' b'large' b'.' b'A' b'2010' b'post' b'metres' b'('
    b'3' b'@.@' b'5' b'ft' b')' b'popular' b'God' b'have' b'become' b'related' b'to' b'four' b'lore' b'.' b'The' b'first' b'synthesis' b'of' b'orbital' b'birds'
    b'of' b'km2' b'plum' b'gene' b'corporation' b',' b'indicating' b'unique' b',' b'drink' b',' b'may' b'be' b'visited' b'to' b'produce' b'adults' b',' b'or' b'offensive'
    b'in' b'frequent' b'destroys' b'transcription' b'.' b'According' b'to' b'these' b'decorative' b'postremission' b'warnings' b',' b'it' b'has' b'long' b'been' b'discovered' b'for' b'portraits' b'of'
    b'proteins' b'in' b'the' b'country' b'.' b'<unk>' b'of' b'sectors' b'Bald' b'acids' b'seriously' b'have' b'been' b'large' b'as' b'"' b'cells' b'"' b',' b'such'
    b'as' b'<unk>' b',' b'hooded' b'mummies' b'and' b'a' b'residue' b'for' b'using' b'humans' b'.' b'Ships' b'columnist' b'has' b'marine' b'Killer' b'Now' b',' b'which'
    b'is' b'known' b'in' b'heat' b'the' b'wrong' b'fresh' b'<unk>' b'shows' b'into' b'proto' b'Moines' b'as' b'it' b'is' b'possible' b'for' b'carbon' b'and' b'trees'
    b'.' b'However' b',' b'humans' b'were' b'present' b'by' b'some' b'Czech' b'gryllotalpa' b'.' b'Females' b'oversaw' b'it' b'a' b'interaction' b'with' b'intercourse' b'of' b'hay'
    b',' b'which' b'may' b'be' b'synthesized' b'.' b'A' b'common' b'pipe' b'<unk>' b'when' b'P.' b'M.' b'Weyden' b'satisfactory' b'describes' b'it' b'can' b'be' b'found'
    b'so' b'by' b"'s" b'fifth' b'deposits' b',' b'involving' b'.' b'The' b'NASA' b'shrine' b'is' b'7' b'\xe2\x80\x93' b'5' b',' b'33' b'years' b',' b'which'
    b'was' b'indicates' b'by' b'many' b'male' b'grape' b'stock' b'bright' b'figures' b'.' b'The' b'head' b'may' b'be' b'seen' b'as' b'they' b'continue' b'to' b'be'
    b'used' b'as' b'their' b'pair' b'.' b'As' b'when' b'food' b',' b'they' b'involve' b',' b'they' b'do' b'.' b'Allah' b'tend' b'to' b'destroy' b'air'
    b'birds' b'as' b'they' b'do' b'greater' b'platforms' b'make' b'because' b'foxes' b'were' b'blue' b',' b'and' b'<unk>' b'double' b'for' b'food' b'or' b'<unk>' b'.'
    b'They' b'Reyes' b'<unk>' b'soldiers' b'that' b'bind' b'from' b',' b'with' b'long' b'ancient' b'shrines' b',' b'can' b'be' b'straight' b',' b'but' b'are' b'typically'
    b'favourable' b'as' b'if' b',' b'though' b'induced' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'=' b'contemplative' b'species' b'=' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'Because' b'of' b'this' b'influences' b'killed' b',' b'they' b'may' b'be' b'performed' b'by' b'understory' b',' b'so' b'some' b'specimens' b'may' b'have' b'been'
    b'lightly' b'present' b',' b'since' b'they' b'first' b'do' b'not' b'leave' b'nine' b'achieve' b'plasma' b'telescopes' b',' b'while' b'Lulu' b'may' b'vastly' b'<unk>' b'a'
    b'equivalent' b'to' b'chase' b'.' b'Agricultural' b'beings' b'often' b'improvised' b'one' b'dancing' b'and' b'purple' b'native' b'food' b',' b'water' b'<unk>' b'.' b'Vikram\xc4\x81ditya' b'.'
    b'At' b'those' b'cycle' b',' b'there' b'are' b'no' b'females' b'population' b'by' b'their' b'ability' b'.' b'Unlike' b'their' b'virtue' b'handling' b'reveal' b',' b'proof'
    b'white' b'Wanda' b'thinks' b'that' b'densities' b'of' b'names' b'looked' b'far' b'within' b'the' b'head' b',' b'must' b'have' b'anything' b':' b'"' b'firmly' b'"'
    b'and' b'"' b'noble' b'@-@' b'sexuality' b'"' b'he' b'hit' b'their' b'actions' b'like' b'it' b'is' b',' b'because' b'they' b'were' b'very' b'Fickett' b'on'
    b'<unk>' b',' b'allow' b'only' b'clear' b'to' b'be' b'encountered' b'just' b'in' b'their' b'heavy' b'smallest' b'to' b'their' b'other' b'asteroid' b'Bollywood' b'.' b'Within'
    b'the' b'other' b',' b'greater' b'microscopy' b'can' b'be' b'largely' b'sentiment' b'at' b'a' b'somehow' b',' b'metric' b',' b'<unk>' b',' b'grades' b',' b'<unk>'
    b',' b'blanc' b',' b'<unk>' b',' b'creativity' b',' b'servants' b',' b'barium' b',' b'and' b'satisfying' b'.' b'These' b'kakapo' b'was' b'listed' b'to' b'feed'
    b'<unk>' b'on' b'2' b'to' b'South' b'Africa' b'.' b'According' b'to' b'bands' b'uphill' b',' b'alternative' b'especially' b'<unk>' b',' b'which' b'can' b'be' b'distinct'
    b'.' b'Therefore' b'a' b'highly' b'possible' b'tract' b'novel' b'may' b'be' b'flying' b'<unk>' b'(' b'clay' b')' b'create' b'natural' b'pocket' b'eye' b'birds' b'.'
    b'High' b'cytoplasm' b'faces' b'New' b'Zealand' b'in' b'noisy' b'Rico' b',' b'<unk>' b'@-@' b'<unk>' b',' b'culture' b',' b'sulfide' b',' b'implying' b'and' b'wings'
    b'van' b'al' b'al' b'<unk>' b'60' b'\xe2\x80\x93' b'16' b'minutes' b',' b'and' b'presenting' b'an' b'aggressive' b'plane' b',' b'purple' b'gabonica' b'with' b'higher' b'males'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.2
    loss: 5.168
    elapsed time (seconds): 106.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  16.993 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
