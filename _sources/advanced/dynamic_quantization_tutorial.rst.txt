.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'advanced' b'them' b'or' b'very' b'moving' b'only' b'behind' b'<unk>' b'Williams' b'for' b'La' b'(' b'The' b'Lithuanian' b'Petersburg' b')' b',' b'<unk>' b'<unk>' b'and'
    b'Schuster' b'(' b'entertained' b'West' b'@-@' b'America' b')' b':' b'<unk>' b'<unk>' b'<unk>' b'(' b'1909' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Early'
    b'life' b'=' b'=' b'<eos>' b'<eos>' b'The' b'series' b'of' b'March' b'30' b'(' b'June' b'2' b'to' b'April' b'30' b',' b'2006' b'as' b'a'
    b'<unk>' b'Bowl' b'(' b'Sinclair' b')' b'films' b'in' b'Cortex' b'Enrique' b'on' b'4' b'July' b'1964' b',' b'the' b'leading' b'200' b'@-@' b'century' b'Hix'
    b'39th' b'Above' b'wind' b'circle' b'and' b'other' b'centuries' b',' b'0' b'@.@' b'5' b'Tech' b'in' b'supplemented' b'Baltimore' b'.' b'At' b'a' b'conversation' b'for'
    b'the' b'mid' b'@-@' b'five' b'Deception' b'a' b'comedy' b'Chaoyangsaurus' b'closed' b'from' b'their' b'last' b'down' b'in' b'1960' b',' b'and' b'strove' b'led' b'to'
    b'forecast' b'to' b'the' b'coastal' b'invasion' b'of' b'Barnsley' b'.' b'A' b'Law' b'system' b'seized' b'into' b'the' b'Ancients' b'name' b',' b'which' b'rebuilt' b'by'
    b'Cornwallis' b'into' b'Australia' b'.' b'<eos>' b'About' b'half' b'of' b'six' b'year' b',' b'it' b'reached' b'the' b'eastern' b'United' b'Kingdom' b',' b'and' b'moved'
    b'to' b'Australia' b',' b'Alabama' b'resumed' b'in' b'the' b'Tech' b'Pride' b'before' b'which' b'ran' b'to' b'South' b'Africa' b'.' b'<eos>' b'The' b'fatality' b'began'
    b'easily' b'to' b'be' b'by' b'is' b'a' b'year' b',' b'alligators' b'as' b'Famitsu' b'policy' b'but' b'well' b'as' b'design' b'M' b'@-@' b'Competition' b'and'
    b'St' b'Leonard' b'is' b'Hakim' b'deposited' b',' b'a' b'city' b'of' b'Northern' b'Ireland' b'used' b'on' b'final' b'side' b',' b'Georgia' b'in' b'the' b'Battle'
    b'of' b'<unk>' b',' b'while' b'Liberal' b'Weekly' b'composed' b'the' b'territories' b'for' b'two' b'mushrooms' b'which' b'are' b'Ng\xc3\xb4' b'and' b'Larssen' b'.' b'While' b'there'
    b'is' b'no' b'alternates' b'least' b'to' b'be' b'lost' b',' b'was' b'disbanded' b'by' b'Work' b'and' b'changing' b',' b'but' b'that' b'free' b'tourists' b'limited'
    b'by' b'\xc2\xb5m' b'are' b'synonymous' b'with' b'specifications' b'.' b'It' b'Castle' b'opened' b'with' b'their' b'front' b'River' b'encroachment' b'was' b'given' b'continuing' b'annually' b';'
    b'in' b'nickel' b',' b'<unk>' b'females' b'could' b'secure' b'mostly' b'feral' b'opportunities' b'according' b'to' b'Starr' b'members' b'non' b'@-@' b'<unk>' b',' b'with' b'their'
    b'content' b'or' b'<unk>' b',' b'Pier' b',' b'orange' b'policing' b',' b'extratropical' b'Irish' b'localities' b'on' b'seeing' b'barium' b'meetings' b'.' b'In' b'contrast' b','
    b'they' b'are' b'Georgian' b'name' b'during' b'the' b'Municipal' b'Sea' b',' b'resulting' b'in' b'the' b'Irish' b'zombie' b'Athletics' b'series' b',' b'Bourbon' b'and' b'Action'
    b',' b'a' b'future' b'clip' b'for' b'palatinate' b'or' b'construction' b'<unk>' b',' b'taking' b'twenty' b'years' b'of' b'$' b'11' b'@,@' b'000' b'per' b'week'
    b'.' b'<eos>' b'The' b'third' b'gameplay' b'contain' b'over' b'11' b'million' b'years' b'next' b'of' b'Jupiter' b"'s" b'darkness' b',' b'although' b'described' b'by' b'some'
    b'other' b'people' b'\xe2\x80\x94' b'measurements' b'defends' b'their' b'longest' b'pattern' b',' b'many' b'for' b'vocalist' b'Vaballathus' b'Bay' b'and' b'William' b'Newman' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'entertain' b'through' b'literature' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Medical' b'quarter' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'Most' b'measures' b'of' b'humans' b'was' b'first' b'named' b'Ireland' b'significantly' b',' b'and' b'Cake' b'sanctioned' b'account' b'of' b'corruption' b'in' b'1803' b',' b'though'
    b'Ireland' b'was' b'really' b'allowed' b'to' b'hunt' b'Somerset' b'Why' b',' b'and' b'the' b'stable' b'troops' b'were' b'initiated' b'from' b'available' b'.' b'Australia' b'then'
    b'noted' b'into' b'their' b'employer' b'The' b'<unk>' b'de' b'paving' b'by' b'<unk>' b'(' b'1865' b')' b'.' b'In' b'1995' b',' b'the' b'election' b'opened'
    b'2' b'@.@' b'4' b'km' b'(' b'4' b'@.@' b'8' b'in' b')' b',' b'a' b'planet' b'of' b'972' b'feet' b'per' b'game' b"'" b'<unk>'
    b'increased' b'off' b'high' b'islands' b'.' b'It' b'has' b'been' b'suggested' b'pre' b'@-@' b'9' b'among' b'heat' b'sailors' b',' b'particularly' b'prize' b'30' b'\xe2\x80\x93'
    b'4' b'@.@' b'1' b'kilometres' b'(' b'4' b'@.@' b'5' b'in' b')' b'old' b'for' b'de' b'Jannetty' b'.' b'Both' b'generated' b'runs' b'from' b'a'
    b'compilation' b'speed' b'arms' b',' b'wide' b'temperature' b',' b'stressed' b'it' b'<unk>' b'poles' b',' b'dinosaurs' b',' b'manual' b',' b'or' b'orphans' b'.' b'In'
    b'majority' b'species' b',' b'more' b'than' b'75' b'million' b'species' b'will' b'be' b'shaped' b',' b'and' b'the' b'style' b'of' b'first' b'U' b'Johnson' b"'s"
    b'Confession' b'subtype' b'was' b'intended' b'to' b'<unk>' b'segment' b',' b'with' b'several' b'birds' b'were' b'stable' b',' b'induced' b'by' b'arrest' b'or' b'export' b'assigned'
    b'to' b'it' b'from' b'gills' b'that' b'consist' b'on' b'the' b'ground' b'.' b'The' b'size' b'of' b'Ceres' b'were' b'introduced' b'to' b'determine' b'their' b'control'
    b'and' b'newer' b'violence' b'throughout' b'Europe' b'.' b'There' b'are' b'moderate' b'species' b'of' b'smaller' b'fields' b'.' b'ventilation' b':' b'predators' b'compared' b',' b'and'
    b'the' b'<unk>' b"'s" b'<unk>' b'is' b'imminent' b'by' b'feeding' b',' b'systematic' b'Radetzky' b',' b'they' b'were' b'largely' b'limited' b',' b'requiring' b'of' b'26'
    b'\xe2\x80\x93' b'3' b'.' b'Many' b'birds' b'provided' b'back' b'no' b'this' b'period' b'before' b'.' b'Multiple' b'damage' b'were' b'killed' b'by' b'symptoms' b'than' b'pregnancy'
    b',' b'dam' b',' b'supplies' b',' b'yellowish' b',' b'buildings' b',' b'Sports' b',' b'and' b'lakes' b'in' b'chartered' b'trees' b',' b'and' b'layer' b'being'
    b'still' b'were' b'introduced' b'for' b'safe' b'transcription' b'.' b'Once' b'males' b',' b'model' b',' b'rulers' b'originally' b'approved' b'large' b'birds' b'that' b'should' b'be'
    b'Billund' b'and' b'patter' b',' b'can' b'be' b'sensitive' b'.' b'However' b',' b'by' b'the' b'Gaboon' b'Up' b',' b'there' b'are' b'also' b'no' b'evidence'
    b'of' b'adults' b':' b'Beginning' b'.' b'Ireland' b'bestowed' b'around' b'first' b'of' b'a' b'krypton' b'constructed' b'by' b'friendlies' b'.' b'In' b'Australia' b',' b'it'
    b'on' b'both' b'regions' b'have' b'travelling' b'around' b'Caen' b',' b'the' b'evolution' b'of' b'the' b'perpetual' b'Seas' b'Sites' b',' b'often' b'known' b'as' b'signals'
    b',' b'Ramanujacharya' b',' b'Bourne' b',' b'Babylonian' b',' b'<unk>' b',' b'elimination' b'and' b'habitat' b'streets' b'Sola' b'.' b'The' b'development' b'of' b'native' b'populations'
    b'and' b'latex' b'habitats' b'have' b'conservation' b',' b'drained' b'and' b'many' b'150' b'temperatures' b'is' b'found' b'when' b'it' b'was' b'rapidly' b'misunderstood' b'.' b'Large'
    b'were' b'probably' b'introduced' b'by' b'this' b'species' b'in' b'1999' b',' b'instead' b'of' b'towns' b'that' b'may' b'be' b'resolved' b'by' b'perfect' b'data' b','
    b'such' b'as' b'polyurethane' b',' b'<unk>' b',' b'Norway' b',' b'<unk>' b',' b'gill' b'salmon' b',' b'Sword' b'Cameron' b'Evans' b'and' b'an' b'associated' b'compartmentalization'
    b'and' b'creator' b'reactor' b'recommended' b'to' b'suffer' b'almost' b'speak' b'.' b'Massive' b'species' b'including' b'resources' b'have' b'lived' b'in' b'the' b'central' b'tip' b'of'
    b'their' b'three' b'@-@' b'year' b'<unk>' b',' b'a' b'planet' b'settle' b'early' b'officers' b'of' b'wood' b',' b'4' b'@-@' b'trans' b'<unk>' b'bound' b'toward'
    b'20' b'ft' b',' b'hot' b'and' b'seven' b'species' b'.' b'Since' b'also' b'black' b'towards' b'the' b'fairy' b'island' b',' b'they' b'Brotzman' b'glowing' b'ability'
    b',' b'and' b'higher' b'investments' b'are' b'rebuilt' b',' b'but' b'this' b'is' b'accumulate' b'photographing' b'.' b'In' b'this' b'case' b',' b'it' b'is' b'also'
    b'tested' b'by' b'country' b'and' b'nitrogen' b',' b'and' b'are' b'not' b'produced' b'.' b'When' b'other' b'Veerashaiva' b',' b'common' b',' b'CCM' b',' b'or'
    b'statistical' b'colleagues' b'cattle' b'splits' b'determination' b'.' b'It' b'may' b'not' b'cause' b'females' b'with' b'them' b',' b'safeguard' b'high' b'capping' b'and' b'attract' b'the'
    b'map' b',' b'complex' b',' b'or' b'prepare' b'to' b'comprise' b'numbers' b'.' b'They' b'can' b'first' b'assemble' b'any' b'other' b'limits' b'by' b'hook' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 208.8
    loss: 5.168
    elapsed time (seconds): 114.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.202 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
