.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'studying' b'it' b'was' b'brief' b'to' b'create' b'"' b'Protestant' b'status' b'and' b'<unk>' b'<unk>' b'that' b'a' b'dark' b'low' b'@-@' b'woman' b'"' b'.'
    b'Hornung' b'explained' b'this' b'only' b'People' b"'s" b'sound' b',' b'which' b'seeks' b'to' b'be' b'delivered' b',' b'as' b'he' b'praised' b'the' b'other' b'other'
    b'four' b'books' b'as' b'open' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Managerial' b'planet' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b"'s" b'fictional' b'death' b'of'
    b'fiction' b'has' b'exceeded' b'two' b'favorable' b'issues' b'without' b'the' b'verses' b'at' b'a' b'time' b'against' b'large' b'school' b',' b'charged' b'in' b'1985' b'.'
    b'The' b'last' b'red' b'version' b'was' b'the' b'<unk>' b'Post' b'Gallery' b'bid' b'books' b'in' b'Victorian' b'reviews' b'and' b'replaced' b'himself' b'.' b'Despite' b'a'
    b'singular' b'appearance' b'by' b'Choral' b'Morris' b'whilst' b'Echmarcach' b'began' b'writing' b'and' b'last' b'known' b'eighth' b'historian' b'Guy' b'W.' b'mB\xc3\xb3' b'magazine' b'of' b'St.'
    b'<unk>' b'.' b'The' b'Viscount' b'too' b'on' b'his' b'speech' b'as' b'a' b'extraterrestrial' b'in' b'the' b'2003' b'show' b'reveal' b',' b'Elsinore' b',' b'a'
    b'state' b'Frost' b'by' b'sky' b'<unk>' b'who' b'adopted' b'argued' b'that' b'both' b'the' b'65th' b'rules' b'was' b'wanting' b'.' b'Once' b'also' b'after' b'the'
    b'Chamber' b'of' b'<unk>' b'to' b'Montagne' b'while' b'to' b'experiment' b'in' b'financial' b'programs' b'he' b'felt' b'"' b'<unk>' b'shortly' b'"' b'.' b'<eos>' b'Yukon'
    b'of' b'Magnolia' b'berries' b'Robotic' b'<unk>' b'the' b'stated' b'to' b'write' b'its' b'conclusions' b'in' b'1967' b',' b'school' b'pm' b'to' b'parity' b',' b'and'
    b'his' b'discrete' b'stories' b'were' b'that' b'Kalyanasundara' b',' b'"' b'the' b'detailed' b'planet' b'.' b'"' b'Another' b'phone' b'tying' b'details' b'in' b'two' b'specific'
    b'stories' b'are' b'from' b'philosophy' b'of' b'ten' b'years' b',' b'could' b'run' b'approximate' b'in' b'the' b'race' b'(' b'resulting' b'after' b'what' b'is' b'usually'
    b'separated' b'south' b';' b'and' b'do' b'some' b'separate' b'and' b'detectable' b'freedom' b')' b',' b'sometimes' b'because' b'of' b'a' b'bonus' b'chess' b'star' b'than'
    b'to' b'factories' b'are' b',' b'and' b'termed' b'it' b'may' b'suggest' b'"' b'one' b'of' b'80' b'mm' b'"' b'.' b'Wippleman' b'put' b'Key' b'Antiquaries'
    b"'s" b'noctilio' b'design' b'of' b'$' b'60' b'million' b'in' b'addition' b'.' b'It' b'is' b'generally' b'tangle' b'from' b'being' b'posing' b'by' b'him' b','
    b'<unk>' b'and' b'<unk>' b'.' b'In' b'addition' b',' b'Earth' b'signed' b'Oldham' b"'s" b'Imp\xc3\xa9tueux' b',' b'serving' b'as' b'a' b'Ambon' b'in' b'honor' b'of'
    b'his' b'nephew' b',' b'in' b'a' b'new' b'race' b'following' b'playing' b'in' b'of' b'a' b'grassland' b'<unk>' b'Santiago' b'and' b'that' b'spends' b'eastern' b'Americans'
    b'Harris' b'briefly' b'contributed' b'to' b'him' b'.' b'The' b'District' b'13' b'charges' b'of' b'thirty' b'@-@' b'played' b'game' b'sports' b':' b'an' b'McCarron' b'coins'
    b'was' b'sent' b'to' b'Baltimore' b'.' b'In' b'1996' b'a' b'group' b'that' b'launched' b'on' b'how' b'kakapo' b'had' b'the' b'worst' b'event' b'to' b'be'
    b'Mosley' b"'s" b'planet' b',' b'which' b'took' b'two' b'students' b'a' b'clergy' b'rights' b'.' b'A' b'virtue' b'of' b'<unk>' b'heard' b',' b'Stone' b'Kahane'
    b'have' b'the' b'term' b'Young' b'who' b'<unk>' b'onto' b'a' b'palace' b'path' b',' b'selling' b'confidence' b'and' b'negative' b'forfeits' b'.' b'For' b'the' b'Persian'
    b'burning' b'of' b'galaxies' b'did' b'not' b'offer' b'he' b'obtained' b'they' b'slowed' b'following' b'<unk>' b',' b'Chuck' b'<unk>' b',' b'Barry' b'Evangelist' b'and' b'O'
    b"'Malley" b',' b'The' b'title' b'reason' b'to' b'develop' b'efforts' b'old' b'structures' b'were' b'fair' b'with' b'published' b'sense' b'of' b'<unk>' b',' b'a' b'Viscount'
    b'of' b'KaBOOM' b',' b'looking' b'again' b'to' b'thought' b'.' b'In' b'cases' b',' b'the' b'FIA' b'follows' b'that' b'other' b'the' b'Key' b'agree' b'using'
    b'a' b'budget' b',' b'"' b'whereas' b'I' b'rent' b'it' b'it' b'always' b'wouldn' b"'t" b'really' b'compose' b'his' b'armament' b'.' b'A' b'bit' b'concept'
    b',' b'<unk>' b'Us' b'ionizing' b'I' b"'m" b'quite' b'the' b'idea' b'that' b'what' b"'ve" b'<unk>' b'.' b'And' b'there' b'is' b'more' b'brutally' b','
    b'this' b'is' b'not' b'and' b'far' b'if' b'his' b'corpse' b'returns' b'it' b'to' b'one' b'fashion' b'cut' b'unless' b'like' b'that' b'I' b'are' b'killed'
    b'by' b'changes' b'.' b'"' b'Kreeft' b"'s" b'company' b'remained' b'Masato' b'to' b'Tintin' b'demand' b'the' b'crew' b',' b'allowing' b'him' b'Stetson' b"'s" b'<unk>'
    b'of' b'the' b'FISA' b'interview' b'.' b'His' b'<unk>' b'is' b'a' b'nomen' b'Party' b'truce' b'.' b'He' b'explains' b':' b'"' b'So' b'their' b'final'
    b'and' b'cadets' b'[' b'I' b']' b'could' b'be' b'because' b'his' b'HNC' b'would' b'approve' b'it' b'.' b'So' b'earth' b'here' b'in' b'his' b'car'
    b']' b'where' b'English' b'parents' b'act' b',' b'and' b'should' b'look' b'"' b'divided' b'her' b'counterparts' b'.' b'sympathy' b'insisted' b'into' b'Li' b'Lewis' b'Stewart'
    b'who' b'had' b'all' b'a' b'bit' b'of' b'modern' b'children' b',' b'but' b'decided' b'their' b'registered' b'hip' b'car' b'they' b'resulted' b'.' b'The' b'screen'
    b'of' b'Covington' b'were' b'happens' b'for' b'with' b'wolf' b'and' b'legal' b'support' b'.' b'sex' b'studies' b'defined' b'lyrical' b'demands' b'to' b'legacies' b'innovations' b'and'
    b'attacks' b'Kody' b'Billy' b'leptophylla' b'.' b'It' b'is' b'said' b'that' b'Whole' b'Britain' b'females' b'had' b'some' b'pads' b'as' b'some' b'do' b'not' b'remain'
    b'to' b'take' b'the' b'plan' b'instead' b'.' b'Ages' b'may' b'be' b'employed' b'had' b'come' b'in' b'orchestra' b'.' b'boiling' b'I' b'dealt' b'on' b'!'
    b'<unk>' b'in' b'undercover' b'volumes' b',' b'Walton' b'Weekly' b'and' b'Ecclestone' b'(' b'"' b'Little' b'Isles' b'"' b')' b',' b'are' b'mainly' b'transcribed' b'as'
    b'computing' b',' b'and' b'so' b'outside' b'a' b'female' b'airplay' b'has' b'an' b'objective' b'.' b'She' b'Norske' b'missions' b'his' b'evidence' b'for' b'direct' b'syndrome'
    b'and' b'items' b'to' b'acquire' b'a' b'new' b'next' b'scene' b'.' b'<eos>' b'Paramount' b'appears' b'on' b'to' b'come' b'on' b'to' b'have' b'originated' b'any'
    b'so' b'the' b'intruder' b"'" b'R\xc3\xa9union' b'/' b'movement' b',' b'which' b'is' b'<unk>' b'HMV' b'.' b'However' b',' b'Taylor' b'do' b'not' b'tipped' b'the'
    b'husbandman' b'may' b'control' b'solely' b'his' b'skies' b'five' b'or' b'I' b'need' b'through' b'them' b',' b'they' b'should' b'\xe2\x80\x94' b'in' b'Pondicherry' b',' b'they'
    b'listen' b'to' b'this' b'or' b'taking' b'someone' b'to' b'<unk>' b'.' b'Instead' b',' b'there' b'has' b'not' b'enough' b'to' b'be' b'able' b'to' b'destroy'
    b'themselves' b';' b'the' b'other' b'merger' b'time' b'before' b'a' b'death' b'over' b'it' b'when' b'fault' b'did' b'not' b'prove' b'food' b'the' b'it' b'of'
    b'existence' b'by' b'helix' b'.' b'The' b'ability' b'of' b'Marlborough' b'offers' b'or' b'or' b'leave' b'the' b'relative' b'pronunciation' b'down' b'by' b'a' b'few' b'long'
    b'race' b',' b'Harry' b'interphase' b'<unk>' b'(' b'hair' b')' b',' b'simply' b'a' b'effigies' b'<unk>' b'representing' b'a' b'halt' b'from' b'her' b'<unk>' b'.'
    b'In' b'the' b'separation' b'down' b'only' b'a' b'very' b'short' b'phenomenon' b',' b'Alfred' b'galericulata' b'and' b'Nancy' b'Dungeon' b'determined' b'it' b':' b'"' b'deserved'
    b'or' b'structured' b'is' b'perceive' b'and' b'so' b'his' b'asteroid' b'combinatorial' b'power' b'.' b'Age' b'if' b'<unk>' b'dead' b'back' b',' b'and' b'it' b'doesn'
    b"'t" b'be' b'"' b'when' b'this' b'feature' b'them' b'does' b'not' b'engage' b'.' b'Most' b'choice' b'have' b'since' b'communicated' b'to' b'an' b'Renaissance' b'tuning'
    b',' b'but' b'the' b'Australians' b'be' b'able' b'to' b'reach' b'home' b'level' b'or' b'when' b'they' b'Bir' b"'t" b'say' b'how' b'they' b'have' b'sex'
    b'.' b'One' b'researchers' b'are' b'often' b'two' b'Pavilion' b';' b'these' b'planets' b'will' b'be' b'after' b'one' b'intricate' b'drug' b'toward' b'up' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Documentaries' b'=' b'=' b'<eos>' b'<eos>' b'nuclei' b'engaged' b'their' b'discovery' b'largely' b'to' b'second' b'court' b',' b'such' b'as' b'calls'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 203.5
    loss: 5.168
    elapsed time (seconds): 105.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  17.219 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
