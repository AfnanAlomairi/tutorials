.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'the' b'world' b'version' b'"' b'The' b'supreme' b'Abdul' b'"' b'.' b'He' b'died' b'at' b'a' b'$' b'53' b'@,@' b'000' b'of' b'these'
    b'distances' b',' b'and' b'he' b'placed' b'plans' b'for' b'the' b'system' b',' b'only' b'as' b'to' b'speak' b'in' b'his' b'Valkyria' b'Trek' b',' b'lower'
    b'political' b'artwork' b'such' b'as' b'styled' b'drivers' b'from' b'Lock' b'Francisco' b'squads' b',' b'S.S.' b'Green' b',' b'Nelson' b'Hutchinson' b',' b'Rosaleen' b',' b'Canon'
    b'Pilots' b',' b'overcrowded' b'@-@' b'1036' b'alert' b',' b'Hungary' b',' b'France' b',' b'ceilings' b';' b'\xe2\x80\x9c' b'magazines' b'to' b'scout' b'himself' b'for' b'60'
    b'years' b'that' b'do' b'not' b'metaphorical' b'the' b'nestlings' b'of' b'eka' b'for' b'Synopsis' b'hidden' b'.' b'Rainn' b'in' b'a' b'family' b'or' b'off' b'French'
    b'airports' b'have' b'during' b'a' b'large' b'restaurant' b'.' b'For' b'other' b'top' b'unearthed' b',' b'Aj' b'assures' b'<unk>' b'won' b'eight' b'principal' b'stories' b'in'
    b'its' b'plain' b'shorts' b',' b'including' b'a' b'guidance' b'published' b'in' b'more' b'in' b'the' b'accuracy' b'following' b'permanence' b'cameos' b'(' b'<unk>' b'<unk>' b')'
    b'.' b'This' b'preferred' b'Dublin' b'contains' b'in' b'its' b'search' b'to' b'be' b'linked' b',' b'and' b'in' b'1975' b'they' b'are' b'discovered' b'on' b'minor'
    b'of' b'his' b'other' b'paintings' b'.' b'Charmed' b'initially' b'sought' b'to' b'create' b'an' b'short' b'novice' b'ability' b'to' b'build' b'his' b'numbers' b';' b'stripes'
    b'would' b'<unk>' b'Anonymous' b',' b'although' b'packaging' b'envoy' b'<unk>' b'Valkyria' b"'Malley" b'spent' b'himself' b'52' b'years' b'old' b'until' b'the' b'early' b'1980s' b'.'
    b'When' b'he' b'was' b'absent' b'at' b'goods' b',' b'The' b'Sapper' b'(' b'Patrick' b'testimonies' b')' b'and' b'transferred' b'information' b'out' b'to' b'Ruth' b'may'
    b'have' b'from' b'repeated' b'.' b'Despite' b'such' b'day' b'Cynthia' b'Boys' b'Strange' b'26' b'who' b'had' b'also' b'left' b',' b'every' b'harassment' b'by' b'using'
    b'<unk>' b',' b'<unk>' b',' b'and' b'treasure' b'voice' b'persons' b'west' b'of' b'interacted' b'short' b'<unk>' b'with' b'<unk>' b',' b'and' b'New' b'York' b'.'
    b'It' b'is' b'often' b'written' b'by' b'100' b'm' b'(' b'<unk>' b'mm' b')' b'into' b'a' b'size' b'onto' b'alerted' b'to' b'support' b'an' b'calculation'
    b'of' b'victims' b'in' b'the' b'24' b'@-@' b'year' b'(' b'<unk>' b')' b'.' b'Some' b'of' b'the' b'<unk>' b',' b'Mac' b'the' b'year' b'for'
    b'<unk>' b'and' b'white' b',' b'are' b'killed' b'and' b'after' b'the' b'water' b'comprises' b'1955' b'to' b'warfare' b'with' b',' b'moving' b'to' b'those' b'or'
    b'nothing' b'.' b'<eos>' b'A' b'4' b'\xc3\x97' b'4' b'<unk>' b'half' b'of' b'the' b'mouths' b'winner' b'ordered' b'The' b'latter' b"'s" b'Abdul' b'.' b'<unk>'
    b'will' b'be' b'longer' b'developing' b'his' b'three' b'pattern' b'is' b'because' b'one' b'Manual' b'of' b'Rihanna' b'was' b'still' b'killed' b',' b'some' b'of' b'its'
    b'parents' b'fails' b'to' b'be' b'encrusted' b'.' b'In' b'1994' b',' b'Valkyria' b'Oyebanjo' b'created' b'recordings' b'northeastward' b'not' b'solely' b'and' b'not' b'intense' b'threats'
    b'as' b'individuals' b'like' b'by' b'some' b'skulls' b'.' b'In' b'1909' b',' b'female' b'observations' b'carbonate' b'the' b'possibility' b'of' b'their' b'analysis' b'on' b'a'
    b'117' b'million' b'contraceptive' b'theatre' b'stand' b'before' b'the' b'contestants' b',' b'which' b'is' b'a' b'supportive' b'innovations' b'.' b'Some' b'such' b'is' b'safe' b':'
    b'<eos>' b'Comes' b'not' b'that' b'daughter' b'as' b'they' b"'ve" b'around' b'it' b'when' b'they' b'<unk>' b',' b'them' b'their' b'ancestral' b'seas' b'around' b'It'
    b'.' b'To' b'hear' b'the' b'specimen' b'from' b'"' b'arms' b'"' b',' b'when' b'in' b'honor' b'of' b'the' b'body' b'from' b'whatever' b'the' b'fifteenth'
    b'country' b',' b'some' b'birds' b'see' b'about' b'discipline' b'than' b'mice' b',' b'use' b',' b'Baltic' b',' b'and' b'feet' b'wintering' b',' b'so' b'rather'
    b'craftsman' b'are' b'true' b'to' b';' b'it' b'cite' b'only' b'a' b'mix' b',' b'however' b'.' b'However' b'1937' b'the' b'<unk>' b'of' b'manufacturers' b'were'
    b'absorbed' b'to' b'eradicate' b'<unk>' b'.' b'continental' b'food' b'wings' b'also' b'adopted' b'tolerance' b',' b'and' b'corresponds' b'to' b'boxes' b'from' b'the' b'M\xc4\x81ori' b','
    b'although' b'others' b'could' b'monitor' b'every' b'large' b'angle' b'.' b'murders' b'into' b'their' b'plumage' b'they' b'do' b'so' b'is' b'mainly' b'divided' b'down' b'Keyblade'
    b'water' b',' b'or' b'defend' b'and' b'even' b'three' b'so' b'@-@' b'attracting' b'or' b'theoretical' b'plating' b'.' b'Most' b'committees' b'suggest' b'when' b'cracks' b'often'
    b'<unk>' b'off' b'any' b'other' b'printing' b',' b'reflecting' b'only' b'heavily' b'preacher' b',' b'with' b'an' b'popular' b'gap' b'between' b'physics' b'\xe2\x80\x93' b'her' b'being'
    b'very' b'convenient' b';' b'however' b',' b'compared' b'<unk>' b',' b'and' b'to' b'Wanting' b'plumage' b'.' b'The' b'spikes' b'used' b'from' b'males' b'it' b'may'
    b'have' b'usually' b'since' b'collected' b'.' b'They' b'begin' b'up' b'the' b'natural' b'starling' b',' b'but' b'that' b'they' b'encountered' b'them' b'through' b'<unk>' b','
    b'and' b'crouch' b',' b'serving' b'on' b'into' b'1646' b'.' b'They' b'have' b'helped' b'during' b'both' b'of' b'its' b'largest' b',' b'and' b'a' b'exotic'
    b'ending' b'on' b'the' b'first' b'map' b'and' b'allow' b'extra' b'<unk>' b',' b'defines' b'even' b'been' b'set' b'to' b'other' b'or' b'basing' b'to' b'be'
    b'periodic' b',' b'except' b'the' b'kakapo' b'or' b'appear' b'close' b'on' b'them' b'.' b'As' b'they' b'admired' b'their' b'desired' b'wings' b'to' b'be' b'<unk>'
    b'.' b'In' b'1961' b',' b'height' b'of' b'New' b'Zealand' b'sensors' b'I' b'provides' b'eight' b'more' b'images' b'of' b'soul' b',' b'representing' b'Maldives' b'measures'
    b'Miss' b'Falls' b',' b'Robert' b'Emma' b'Heinz' b'Robert' b'Lynch' b'<unk>' b'(' b'potassium' b'or' b'even' b'sisters' b')' b'and' b'related' b'Olga' b'Antimony' b'('
    b'Andrew' b'black' b')' b',' b'<unk>' b'and' b'the' b'other' b'donor' b'(' b'<unk>' b')' b'(' b'born' b'Holdsworth' b'to' b'startling' b'but' b'59' b'%'
    b')' b'.' b'They' b'slowed' b'Australia' b'<unk>' b'<unk>' b',' b'Edmontosaurus' b'Shoulders' b'<unk>' b'<unk>' b',' b'Delta' b'2300' b'Brodribb' b',' b'Norway' b'y' b'Nicholas'
    b'Mills' b'<unk>' b',' b'S.' b'Nirnaya' b',' b'RIAJ' b'corporations' b',' b'and' b'Childs' b';' b'the' b'slogan' b'ambassador' b'acknowledges' b'impaired' b'jimmadseni' b'added' b'in'
    b'support' b'of' b'a' b'non' b'@-@' b'year' b'divisions' b'.' b'The' b'Victor' b'subversion' b'is' b'also' b'known' b'to' b'be' b'follicles' b'for' b'1070' b'specimens'
    b'who' b'needed' b'prescribed' b'excavations' b',' b'which' b'pursuers' b'how' b'females' b'require' b'stream' b'by' b'deserted' b'birds' b',' b'called' b'about' b'<unk>' b'province' b','
    b'expanding' b',' b'and' b'all' b'Fruitbodies' b'based' b'funding' b',' b'as' b'they' b'explain' b'its' b'food' b'(' b'jewelry' b')' b'.' b'<eos>' b'The' b'first'
    b'two' b'other' b'elements' b'have' b'been' b'exist' b'with' b'<unk>' b'predators' b',' b'looking' b'from' b'two' b'shaft' b'applicants' b',' b'or' b'believe' b'to' b'go'
    b'minorities' b'with' b'which' b'they' b'live' b'.' b'<eos>' b'The' b'kakapo' b'chicks' b'contains' b'good' b'Babu' b'with' b'but' b'averages' b'their' b'native' b'time' b'were'
    b'approached' b'.' b'Once' b'the' b'nests' b'of' b'diverse' b'mist' b'common' b'problems' b'are' b'Monica' b',' b'they' b'did' b'so' b'be' b'established' b'from' b'their'
    b'missing' b'contents' b',' b'and' b'their' b'trading' b'treatment' b'could' b'be' b'expected' b'to' b'have' b'a' b'home' b'country' b'or' b'damages' b'.' b'This' b'predators'
    b'is' b'sometimes' b'surrounded' b'by' b'<unk>' b',' b'<unk>' b'and' b'white' b'.' b'<eos>' b'They' b'traveling' b'\xce\xb2' b'for' b'near' b'about' b'100' b'years' b','
    b'or' b'after' b'inside' b'15' b'by' b'pieces' b'in' b'its' b'subsequent' b'areas' b'.' b'The' b'first' b'two' b'subspecies' b'have' b'transition' b'1838' b'with' b'the'
    b'data' b',' b'while' b'difficulty' b'they' b'could' b'indicate' b'to' b'do' b'anything' b'on' b'them' b'due' b'to' b'they' b'Flatts' b'islands' b'.' b'She' b'<unk>'
    b'139' b'@-@' b'developed' b'during' b'the' b'survival' b'of' b'a' b'brood' b'and' b'other' b'denominations' b',' b'on' b'athletes' b'.' b'It' b'with' b'its' b'flying'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.5
    loss: 5.168
    elapsed time (seconds): 111.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  32.590 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
