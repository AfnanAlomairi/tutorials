
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/usb_semisup_learn.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_usb_semisup_learn.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_usb_semisup_learn.py:


Semi-Supervised Learning using USB built upon PyTorch
=============================


**Author**: `Hao Chen <https://github.com/Hhhhhhao>`_
 

Introduction
------------

USB is a semi-supervised learning framework built upon PyTorch.
Based on Datasets and Modules provided by PyTorch, USB becomes a flexible, modular, and easy-to-use framework for semi-supervised learning.
It supports a variety of semi-supervised learning algorithms, including FixMatch, FreeMatch, DeFixMatch, SoftMatch, etc.
It also supports a variety of imbalanced semi-supervised learning algorithms.
The benchmark results across different datasets of computer vision, natural language processing, and speech processing are included in USB.

This tutorial will walk you through the basics of using the usb lighting package. 
Let's get started by training a FreeMatch/SoftMatch model on CIFAR-10 using pre-trained ViT!
And we will show it is easy to change the semi-supervised algorithm and train on imbalanced datasets.

 
.. figure:: /_static/img/usb_semisup_learn/code.png
   :alt: USB framework illustration

.. GENERATED FROM PYTHON SOURCE LINES 29-41

Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning
--------------------
Here we provide a brief introduction to FreeMatch and SoftMatch.
First we introduce a famous baseline for semi-supervised learning called FixMatch.
FixMatch is a very simple framework for semi-supervised learning, where it utilizes a strong augmentation to generate pseudo labels for unlabeled data.
It adopts a confidence thresholding strategy to filter out the low-confidence pseudo labels with a fixed threshold set.
FreeMatch and SoftMatch are two algorithms that improve upon FixMatch.
FreeMatch proposes adaptive thresholding strategy to replace the fixed thresholding strategy in FixMatch. 
The adaptive thresholding progressively increases the threshold according to the learning status of the model on each class.
SoftMatch absorbs the idea of confidence thresholding as an weighting mechanism.
It proposes a Gaussian weighting mechanism to overcome the quantity-quality trade-off in pseudo-labels. 
In this tutorial, we will use USB to train FreeMatch and SoftMatch.

.. GENERATED FROM PYTHON SOURCE LINES 44-63

Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels
--------------------
USB is a Pytorch-based Python package for Semi-Supervised Learning (SSL). 
It is easy-to-use/extend, affordable to small groups, and comprehensive for developing and evaluating SSL algorithms. 
USB provides the implementation of 14 SSL algorithms based on Consistency Regularization, and 15 tasks for evaluation from CV, NLP, and Audio domain.
It has a modular design that allows users to easily extend the package by adding new algorithms and tasks.
It also supports a python api for easier adaptation to different SSL algorithms on new data.


Now, let's use USB to train FreeMatch and SoftMatch on CIFAR-10.
First, we need to install USB package ``semilearn`` and import necessary api functions from USB.
Below is a list of functions we will use from ``semilearn``:
- ``get_dataset`` to load dataset, here we use CIFAR-10
- ``get_data_loader`` to create train (labeled and unlabeled) and test data loaders, the train unlabeled loaders will provide both strong and weak augmentation of unlabeled data
- ``get_net_builder`` to create a model, here we use pre-trained ViT
- ``get_algorithm`` to create the semi-supervised learning algorithm, here we use FreeMatch and SoftMatch
- ``get_config``: to get default configuration of the algorithm
- ``Trainer``: a Trainer class for training and evaluating the algorithm on dataset


.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default

    import semilearn
    from semilearn import get_dataset, get_data_loader, get_net_builder, get_algorithm, get_config, Trainer





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/envs/py_3.10/lib/python3.10/site-packages/transformers/utils/generic.py:309: UserWarning:

    torch.utils._pytree._register_pytree_node is deprecated. Please use torch.utils._pytree.register_pytree_node instead.





.. GENERATED FROM PYTHON SOURCE LINES 67-69

After importing necessary functions, we first set the hyper-parameters of the algorithm.


.. GENERATED FROM PYTHON SOURCE LINES 69-113

.. code-block:: default

    config = {
        'algorithm': 'freematch',
        'net': 'vit_tiny_patch2_32',
        'use_pretrain': True, 
        'pretrain_path': 'https://github.com/microsoft/Semi-supervised-learning/releases/download/v.0.0.0/vit_tiny_patch2_32_mlp_im_1k_32.pth',

        # optimization configs
        'epoch': 1,  
        'num_train_iter': 4000,  
        'num_eval_iter': 500,  
        'num_log_iter': 50,  
        'optim': 'AdamW',
        'lr': 5e-4,
        'layer_decay': 0.5,
        'batch_size': 16,
        'eval_batch_size': 16,


        # dataset configs
        'dataset': 'cifar10',
        'num_labels': 40,
        'num_classes': 10,
        'img_size': 32,
        'crop_ratio': 0.875,
        'data_dir': './data',
        'ulb_samples_per_class': None,

        # algorithm specific configs
        'hard_label': True,
        'T': 0.5,
        'ema_p': 0.999,
        'ent_loss_ratio': 0.001,
        'uratio': 2,
        'ulb_loss_ratio': 1.0,

        # device configs
        'gpu': 0,
        'world_size': 1,
        'distributed': False,
        "num_workers": 4,
    }
    config = get_config(config)









.. GENERATED FROM PYTHON SOURCE LINES 114-117

Then, we load the dataset and create data loaders for training and testing.
And we specify the model and algorithm to use.


.. GENERATED FROM PYTHON SOURCE LINES 117-124

.. code-block:: default

    dataset_dict = get_dataset(config, config.algorithm, config.dataset, config.num_labels, config.num_classes, data_dir=config.data_dir, include_lb_to_ulb=config.include_lb_to_ulb)
    train_lb_loader = get_data_loader(config, dataset_dict['train_lb'], config.batch_size)
    train_ulb_loader = get_data_loader(config, dataset_dict['train_ulb'], int(config.batch_size * config.uratio))
    eval_loader = get_data_loader(config, dataset_dict['eval'], config.eval_batch_size)
    algorithm = get_algorithm(config,  get_net_builder(config.net, from_name=False), tb_log=None, logger=None)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar10/cifar-10-python.tar.gz

      0%|          | 0/170498071 [00:00<?, ?it/s]
      0%|          | 393216/170498071 [00:00<00:43, 3896803.30it/s]
      3%|3         | 5472256/170498071 [00:00<00:05, 31373969.47it/s]
      7%|6         | 11370496/170498071 [00:00<00:03, 43885611.37it/s]
     11%|#1        | 19431424/170498071 [00:00<00:02, 58328074.08it/s]
     16%|#5        | 26574848/170498071 [00:00<00:02, 62931839.87it/s]
     20%|#9        | 33619968/170498071 [00:00<00:02, 65475829.56it/s]
     24%|##4       | 41091072/170498071 [00:00<00:01, 68473537.16it/s]
     28%|##8       | 48234496/170498071 [00:00<00:01, 69401228.35it/s]
     33%|###2      | 55836672/170498071 [00:00<00:01, 71404348.32it/s]
     38%|###7      | 64159744/170498071 [00:01<00:01, 75010173.81it/s]
     44%|####4     | 75792384/170498071 [00:01<00:01, 87586756.31it/s]
     51%|#####     | 86147072/170498071 [00:01<00:00, 92376840.91it/s]
     57%|#####7    | 97779712/170498071 [00:01<00:00, 99575427.50it/s]
     64%|######3   | 108331008/170498071 [00:01<00:00, 101256189.33it/s]
     70%|#######   | 119570432/170498071 [00:01<00:00, 104581466.34it/s]
     77%|#######6  | 130973696/170498071 [00:01<00:00, 107406887.12it/s]
     84%|########3 | 142376960/170498071 [00:01<00:00, 109333638.17it/s]
     90%|########9 | 153321472/170498071 [00:01<00:00, 109159186.54it/s]
     96%|#########6| 164265984/170498071 [00:01<00:00, 107458211.51it/s]
    100%|##########| 170498071/170498071 [00:01<00:00, 86744399.31it/s] 
    Extracting ./data/cifar10/cifar-10-python.tar.gz to ./data/cifar10
    lb count: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    ulb count: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000]
    Files already downloaded and verified
    Files already downloaded and verified
    lb count: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    ulb count: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000]
    Files already downloaded and verified
    unlabeled data number: 50000, labeled data number 40
    Create train and test data loaders
    [!] data loader keys: dict_keys(['train_lb', 'train_ulb', 'eval'])
    Downloading: "https://github.com/microsoft/Semi-supervised-learning/releases/download/v.0.0.0/vit_tiny_patch2_32_mlp_im_1k_32.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vit_tiny_patch2_32_mlp_im_1k_32.pth

      0%|          | 0.00/115M [00:00<?, ?B/s]
     20%|#9        | 22.8M/115M [00:00<00:00, 239MB/s]
     44%|####3     | 50.3M/115M [00:00<00:00, 268MB/s]
     68%|######7   | 77.6M/115M [00:00<00:00, 276MB/s]
     92%|#########1| 105M/115M [00:00<00:00, 281MB/s] 
    100%|##########| 115M/115M [00:00<00:00, 276MB/s]
    _IncompatibleKeys(missing_keys=['head.weight', 'head.bias'], unexpected_keys=[])
    Create optimizer and scheduler




.. GENERATED FROM PYTHON SOURCE LINES 125-128

We can start Train the algorithms on CIFAR-10 with 40 labels now.
We train for 4000 iterations and evaluate every 500 iterations.


.. GENERATED FROM PYTHON SOURCE LINES 128-132

.. code-block:: default

    trainer = Trainer(config, algorithm)
    trainer.fit(train_lb_loader, train_ulb_loader, eval_loader)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch: 0
    50 iteration USE_EMA: True, train/sup_loss: 2.3513, train/unsup_loss: 0.5778, train/total_loss: 2.9040, train/util_ratio: 1.0000, train/run_time: 0.5858, lr: 0.0005, train/prefetch_time: 0.0042 
    100 iteration USE_EMA: True, train/sup_loss: 1.7265, train/unsup_loss: 0.4632, train/total_loss: 2.1642, train/util_ratio: 1.0000, train/run_time: 0.5843, lr: 0.0005, train/prefetch_time: 0.0042 
    150 iteration USE_EMA: True, train/sup_loss: 1.0115, train/unsup_loss: 0.7544, train/total_loss: 1.7438, train/util_ratio: 1.0000, train/run_time: 0.5862, lr: 0.0005, train/prefetch_time: 0.0042 
    200 iteration USE_EMA: True, train/sup_loss: 0.2376, train/unsup_loss: 0.9218, train/total_loss: 1.1450, train/util_ratio: 1.0000, train/run_time: 0.5868, lr: 0.0005, train/prefetch_time: 0.0042 
    250 iteration USE_EMA: True, train/sup_loss: 0.0962, train/unsup_loss: 0.9522, train/total_loss: 1.0409, train/util_ratio: 1.0000, train/run_time: 0.5862, lr: 0.0005, train/prefetch_time: 0.0041 
    300 iteration USE_EMA: True, train/sup_loss: 0.0683, train/unsup_loss: 0.8243, train/total_loss: 0.8852, train/util_ratio: 1.0000, train/run_time: 0.5858, lr: 0.0005, train/prefetch_time: 0.0043 
    350 iteration USE_EMA: True, train/sup_loss: 0.1354, train/unsup_loss: 0.7362, train/total_loss: 0.8641, train/util_ratio: 1.0000, train/run_time: 0.5864, lr: 0.0005, train/prefetch_time: 0.0042 
    400 iteration USE_EMA: True, train/sup_loss: 0.0369, train/unsup_loss: 0.3576, train/total_loss: 0.3843, train/util_ratio: 1.0000, train/run_time: 0.5858, lr: 0.0005, train/prefetch_time: 0.0040 
    450 iteration USE_EMA: True, train/sup_loss: 0.0362, train/unsup_loss: 0.6811, train/total_loss: 0.7070, train/util_ratio: 1.0000, train/run_time: 0.5869, lr: 0.0005, train/prefetch_time: 0.0042 
    validating...
    /opt/conda/envs/py_3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning:

    Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.

    confusion matrix:
    [[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
     [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    500 iteration, USE_EMA: True, train/sup_loss: 0.0100, train/unsup_loss: 0.6766, train/total_loss: 0.6817, train/util_ratio: 1.0000, train/run_time: 0.5874, eval/loss: 4.9611, eval/top-1-acc: 0.1001, eval/balanced_acc: 0.1000, eval/precision: 0.0100, eval/recall: 0.1000, eval/F1: 0.0182, lr: 0.0005, train/prefetch_time: 0.0042 BEST_EVAL_ACC: 0.1001, at 500 iters
    550 iteration USE_EMA: True, train/sup_loss: 0.0248, train/unsup_loss: 0.7435, train/total_loss: 0.7660, train/util_ratio: 1.0000, train/run_time: 0.5870, lr: 0.0005, train/prefetch_time: 0.0041 
    600 iteration USE_EMA: True, train/sup_loss: 0.0737, train/unsup_loss: 0.8006, train/total_loss: 0.8719, train/util_ratio: 1.0000, train/run_time: 0.5873, lr: 0.0005, train/prefetch_time: 0.0041 
    650 iteration USE_EMA: True, train/sup_loss: 0.0147, train/unsup_loss: 0.7827, train/total_loss: 0.7950, train/util_ratio: 1.0000, train/run_time: 0.5869, lr: 0.0005, train/prefetch_time: 0.0040 
    700 iteration USE_EMA: True, train/sup_loss: 0.0741, train/unsup_loss: 0.6795, train/total_loss: 0.7487, train/util_ratio: 0.9688, train/run_time: 0.5841, lr: 0.0005, train/prefetch_time: 0.0040 
    750 iteration USE_EMA: True, train/sup_loss: 0.0136, train/unsup_loss: 0.4564, train/total_loss: 0.4651, train/util_ratio: 1.0000, train/run_time: 0.5846, lr: 0.0005, train/prefetch_time: 0.0042 
    800 iteration USE_EMA: True, train/sup_loss: 0.0032, train/unsup_loss: 0.5226, train/total_loss: 0.5235, train/util_ratio: 0.9375, train/run_time: 0.5861, lr: 0.0005, train/prefetch_time: 0.0042 
    850 iteration USE_EMA: True, train/sup_loss: 0.0112, train/unsup_loss: 0.4315, train/total_loss: 0.4382, train/util_ratio: 0.9688, train/run_time: 0.5854, lr: 0.0005, train/prefetch_time: 0.0042 
    900 iteration USE_EMA: True, train/sup_loss: 0.0135, train/unsup_loss: 0.7610, train/total_loss: 0.7722, train/util_ratio: 0.9688, train/run_time: 0.5858, lr: 0.0005, train/prefetch_time: 0.0041 
    950 iteration USE_EMA: True, train/sup_loss: 0.0157, train/unsup_loss: 0.7712, train/total_loss: 0.7821, train/util_ratio: 1.0000, train/run_time: 0.5872, lr: 0.0005, train/prefetch_time: 0.0043 
    validating...
    /opt/conda/envs/py_3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning:

    Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.

    confusion matrix:
    [[1.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [8.24984346e-02 9.15309956e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 2.19160927e-03]
     [8.59950094e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
      4.25764192e-02 9.65377417e-02 9.35745477e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [6.38541014e-01 9.39261115e-04 0.00000000e+00 0.00000000e+00
      5.94865373e-03 3.53475266e-01 1.09580463e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.38492808e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
      6.57598499e-01 2.97060663e-03 9.38086304e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [1.25098101e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
      2.82530215e-03 8.72076597e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [7.22118088e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
      6.09184630e-03 5.93564511e-03 2.65854420e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [8.95172629e-01 0.00000000e+00 0.00000000e+00 0.00000000e+00
      3.71816904e-02 6.17091080e-02 0.00000000e+00 5.93657241e-03
      0.00000000e+00 0.00000000e+00]
     [9.86052343e-01 7.20890143e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 1.88058298e-03 0.00000000e+00 0.00000000e+00
      9.40291490e-04 3.91788121e-03]
     [5.80390335e-01 7.96158612e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 1.08426270e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 3.38909542e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    1000 iteration, USE_EMA: True, train/sup_loss: 0.0400, train/unsup_loss: 0.2332, train/total_loss: 0.2689, train/util_ratio: 0.9688, train/run_time: 0.5847, eval/loss: 1.8411, eval/top-1-acc: 0.4054, eval/balanced_acc: 0.4057, eval/precision: 0.6542, eval/recall: 0.4057, eval/F1: 0.3605, lr: 0.0005, train/prefetch_time: 0.0043 BEST_EVAL_ACC: 0.4054, at 1000 iters
    1050 iteration USE_EMA: True, train/sup_loss: 0.0020, train/unsup_loss: 0.4415, train/total_loss: 0.4411, train/util_ratio: 0.9688, train/run_time: 0.5866, lr: 0.0005, train/prefetch_time: 0.0046 
    1100 iteration USE_EMA: True, train/sup_loss: 0.1537, train/unsup_loss: 0.5760, train/total_loss: 0.7274, train/util_ratio: 1.0000, train/run_time: 0.5868, lr: 0.0005, train/prefetch_time: 0.0047 
    1150 iteration USE_EMA: True, train/sup_loss: 0.0530, train/unsup_loss: 0.5867, train/total_loss: 0.6374, train/util_ratio: 1.0000, train/run_time: 0.5849, lr: 0.0005, train/prefetch_time: 0.0047 
    1200 iteration USE_EMA: True, train/sup_loss: 0.0548, train/unsup_loss: 0.6421, train/total_loss: 0.6945, train/util_ratio: 1.0000, train/run_time: 0.5876, lr: 0.0005, train/prefetch_time: 0.0043 
    1250 iteration USE_EMA: True, train/sup_loss: 0.0159, train/unsup_loss: 0.4712, train/total_loss: 0.4848, train/util_ratio: 0.9062, train/run_time: 0.5891, lr: 0.0005, train/prefetch_time: 0.0044 
    1300 iteration USE_EMA: True, train/sup_loss: 0.0054, train/unsup_loss: 0.4679, train/total_loss: 0.4684, train/util_ratio: 0.9688, train/run_time: 0.5876, lr: 0.0005, train/prefetch_time: 0.0053 
    1350 iteration USE_EMA: True, train/sup_loss: 0.0530, train/unsup_loss: 0.4793, train/total_loss: 0.5300, train/util_ratio: 1.0000, train/run_time: 0.5881, lr: 0.0004, train/prefetch_time: 0.0044 
    1400 iteration USE_EMA: True, train/sup_loss: 0.0183, train/unsup_loss: 0.3250, train/total_loss: 0.3410, train/util_ratio: 1.0000, train/run_time: 0.5847, lr: 0.0004, train/prefetch_time: 0.0041 
    1450 iteration USE_EMA: True, train/sup_loss: 0.0030, train/unsup_loss: 0.2406, train/total_loss: 0.2387, train/util_ratio: 0.9688, train/run_time: 0.5867, lr: 0.0004, train/prefetch_time: 0.0047 
    validating...
    confusion matrix:
    [[9.96096799e-01 2.02966432e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.36768150e-04 9.36768150e-04]
     [2.03506575e-03 9.90763932e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 7.20100188e-03]
     [1.33343731e-01 0.00000000e+00 5.87024329e-01 9.35745477e-04
      1.46912040e-01 1.07454772e-01 2.32376794e-02 0.00000000e+00
      0.00000000e+00 1.09170306e-03]
     [4.08578585e-02 9.39261115e-04 2.97432686e-03 4.28772699e-01
      4.88415780e-02 4.15936130e-01 5.65122104e-02 9.39261115e-04
      2.19160927e-03 2.03506575e-03]
     [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.74515322e-01 1.04752971e-02 3.12695435e-03 1.07879925e-02
      1.09443402e-03 0.00000000e+00]
     [2.04049600e-03 0.00000000e+00 0.00000000e+00 1.09872861e-03
      1.09872861e-02 9.76141893e-01 9.41767383e-04 8.78982891e-03
      0.00000000e+00 0.00000000e+00]
     [1.70259294e-02 0.00000000e+00 1.87441425e-03 0.00000000e+00
      3.90502968e-03 2.96782256e-03 9.74226804e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.26495860e-02 0.00000000e+00 0.00000000e+00 0.00000000e+00
      7.63943134e-02 1.42009061e-01 0.00000000e+00 7.38947040e-01
      0.00000000e+00 0.00000000e+00]
     [3.09512616e-01 3.11863344e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 4.07459646e-03 0.00000000e+00 0.00000000e+00
      6.32816173e-01 2.24102805e-02]
     [1.50247831e-02 5.60718711e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 9.28903346e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    1500 iteration, USE_EMA: True, train/sup_loss: 0.0093, train/unsup_loss: 0.1834, train/total_loss: 0.1904, train/util_ratio: 0.9062, train/run_time: 0.5876, eval/loss: 0.5756, eval/top-1-acc: 0.8229, eval/balanced_acc: 0.8228, eval/precision: 0.8755, eval/recall: 0.8228, eval/F1: 0.8170, lr: 0.0004, train/prefetch_time: 0.0046 BEST_EVAL_ACC: 0.8229, at 1500 iters
    1550 iteration USE_EMA: True, train/sup_loss: 0.0181, train/unsup_loss: 0.2744, train/total_loss: 0.2901, train/util_ratio: 0.8438, train/run_time: 0.5857, lr: 0.0004, train/prefetch_time: 0.0041 
    1600 iteration USE_EMA: True, train/sup_loss: 0.0016, train/unsup_loss: 0.4007, train/total_loss: 0.3975, train/util_ratio: 0.9688, train/run_time: 0.5877, lr: 0.0004, train/prefetch_time: 0.0041 
    1650 iteration USE_EMA: True, train/sup_loss: 0.0023, train/unsup_loss: 0.2296, train/total_loss: 0.2273, train/util_ratio: 0.8750, train/run_time: 0.5857, lr: 0.0004, train/prefetch_time: 0.0041 
    1700 iteration USE_EMA: True, train/sup_loss: 0.0048, train/unsup_loss: 0.3184, train/total_loss: 0.3188, train/util_ratio: 0.9375, train/run_time: 0.5860, lr: 0.0004, train/prefetch_time: 0.0042 
    1750 iteration USE_EMA: True, train/sup_loss: 0.0043, train/unsup_loss: 0.3825, train/total_loss: 0.3823, train/util_ratio: 0.9062, train/run_time: 0.5868, lr: 0.0004, train/prefetch_time: 0.0040 
    1800 iteration USE_EMA: True, train/sup_loss: 0.0069, train/unsup_loss: 0.5010, train/total_loss: 0.5008, train/util_ratio: 0.9688, train/run_time: 0.5862, lr: 0.0004, train/prefetch_time: 0.0049 
    1850 iteration USE_EMA: True, train/sup_loss: 0.0008, train/unsup_loss: 0.4772, train/total_loss: 0.4732, train/util_ratio: 0.8125, train/run_time: 0.5853, lr: 0.0004, train/prefetch_time: 0.0041 
    1900 iteration USE_EMA: True, train/sup_loss: 0.0341, train/unsup_loss: 0.3558, train/total_loss: 0.3876, train/util_ratio: 0.8750, train/run_time: 0.5851, lr: 0.0004, train/prefetch_time: 0.0044 
    1950 iteration USE_EMA: True, train/sup_loss: 0.0022, train/unsup_loss: 0.1670, train/total_loss: 0.1620, train/util_ratio: 0.7812, train/run_time: 0.5861, lr: 0.0004, train/prefetch_time: 0.0041 
    validating...
    confusion matrix:
    [[9.78922717e-01 4.21545667e-03 0.00000000e+00 0.00000000e+00
      1.09289617e-03 0.00000000e+00 1.09289617e-03 0.00000000e+00
      7.80640125e-03 6.86963310e-03]
     [1.09580463e-03 9.87946149e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 1.09580463e-02]
     [5.00623830e-02 0.00000000e+00 7.92108546e-01 2.02744853e-03
      1.18059888e-01 2.18340611e-02 1.38802246e-02 9.35745477e-04
      0.00000000e+00 1.09170306e-03]
     [9.07952411e-03 9.39261115e-04 1.00187852e-02 6.94583594e-01
      3.16217909e-02 2.06324358e-01 4.02316844e-02 3.13087038e-03
      3.13087038e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 0.00000000e+00 2.03252033e-03
      9.64665416e-01 2.03252033e-03 5.94121326e-03 2.42338962e-02
      1.09443402e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.41767383e-04 5.02275938e-03
      1.00455188e-02 9.69549521e-01 9.41767383e-04 1.34986658e-02
      0.00000000e+00 0.00000000e+00]
     [5.15463918e-03 0.00000000e+00 1.87441425e-03 0.00000000e+00
      1.87441425e-03 9.37207123e-04 9.90159325e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [1.15606936e-02 0.00000000e+00 2.03093267e-03 9.37353539e-04
      2.46836432e-02 8.60803000e-02 0.00000000e+00 8.74707077e-01
      0.00000000e+00 0.00000000e+00]
     [7.47531735e-02 1.70819621e-02 9.40291490e-04 0.00000000e+00
      0.00000000e+00 1.09700674e-03 0.00000000e+00 0.00000000e+00
      8.91082902e-01 1.50446638e-02]
     [4.95662949e-03 4.13568773e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.52757125e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    2000 iteration, USE_EMA: True, train/sup_loss: 0.0017, train/unsup_loss: 0.2763, train/total_loss: 0.2709, train/util_ratio: 0.9688, train/run_time: 0.5865, eval/loss: 0.2900, eval/top-1-acc: 0.9097, eval/balanced_acc: 0.9096, eval/precision: 0.9203, eval/recall: 0.9096, eval/F1: 0.9087, lr: 0.0004, train/prefetch_time: 0.0045 BEST_EVAL_ACC: 0.9097, at 2000 iters
    2050 iteration USE_EMA: True, train/sup_loss: 0.0011, train/unsup_loss: 0.5341, train/total_loss: 0.5305, train/util_ratio: 0.7812, train/run_time: 0.5857, lr: 0.0004, train/prefetch_time: 0.0041 
    2100 iteration USE_EMA: True, train/sup_loss: 0.0022, train/unsup_loss: 0.4701, train/total_loss: 0.4699, train/util_ratio: 0.9062, train/run_time: 0.5861, lr: 0.0004, train/prefetch_time: 0.0049 
    2150 iteration USE_EMA: True, train/sup_loss: 0.0039, train/unsup_loss: 0.5075, train/total_loss: 0.5066, train/util_ratio: 0.7500, train/run_time: 0.5848, lr: 0.0004, train/prefetch_time: 0.0041 
    2200 iteration USE_EMA: True, train/sup_loss: 0.0036, train/unsup_loss: 0.4032, train/total_loss: 0.4021, train/util_ratio: 0.9062, train/run_time: 0.5874, lr: 0.0004, train/prefetch_time: 0.0048 
    2250 iteration USE_EMA: True, train/sup_loss: 0.0185, train/unsup_loss: 0.5692, train/total_loss: 0.5830, train/util_ratio: 0.8750, train/run_time: 0.5862, lr: 0.0004, train/prefetch_time: 0.0042 
    2300 iteration USE_EMA: True, train/sup_loss: 0.0152, train/unsup_loss: 0.1542, train/total_loss: 0.1670, train/util_ratio: 0.8125, train/run_time: 0.5861, lr: 0.0004, train/prefetch_time: 0.0041 
    2350 iteration USE_EMA: True, train/sup_loss: 0.0020, train/unsup_loss: 0.3662, train/total_loss: 0.3610, train/util_ratio: 0.9375, train/run_time: 0.5844, lr: 0.0003, train/prefetch_time: 0.0041 
    2400 iteration USE_EMA: True, train/sup_loss: 0.0005, train/unsup_loss: 0.1678, train/total_loss: 0.1660, train/util_ratio: 0.8750, train/run_time: 0.5858, lr: 0.0003, train/prefetch_time: 0.0042 
    2450 iteration USE_EMA: True, train/sup_loss: 0.0044, train/unsup_loss: 0.3582, train/total_loss: 0.3603, train/util_ratio: 0.9062, train/run_time: 0.5856, lr: 0.0003, train/prefetch_time: 0.0042 
    validating...
    confusion matrix:
    [[9.74863388e-01 3.12256050e-03 0.00000000e+00 0.00000000e+00
      1.09289617e-03 0.00000000e+00 1.09289617e-03 0.00000000e+00
      1.07728337e-02 9.05542545e-03]
     [0.00000000e+00 9.87006888e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 1.29931121e-02]
     [3.91453525e-02 0.00000000e+00 8.35932626e-01 3.11915159e-03
      9.88771054e-02 1.18527760e-02 9.04553961e-03 2.02744853e-03
      0.00000000e+00 0.00000000e+00]
     [6.10519724e-03 9.39261115e-04 1.08015028e-02 7.82247965e-01
      2.23857232e-02 1.33218535e-01 3.80400751e-02 3.13087038e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 0.00000000e+00 4.06504065e-03
      9.60287680e-01 1.09443402e-03 5.94121326e-03 2.75171982e-02
      1.09443402e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 4.70883692e-03 1.31847434e-02
      8.94679014e-03 9.55893894e-01 9.41767383e-04 1.63239680e-02
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 1.87441425e-03 0.00000000e+00
      1.87441425e-03 9.37207123e-04 9.91252734e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [7.65505390e-03 0.00000000e+00 7.18637713e-03 2.81206062e-03
      1.26542728e-02 5.24917982e-02 0.00000000e+00 9.17200437e-01
      0.00000000e+00 0.00000000e+00]
     [3.36937784e-02 1.11267826e-02 9.40291490e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.44992948e-01 9.24619966e-03]
     [4.02726146e-03 3.20631970e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.62980173e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    2500 iteration, USE_EMA: True, train/sup_loss: 0.0019, train/unsup_loss: 0.5048, train/total_loss: 0.5044, train/util_ratio: 0.9062, train/run_time: 0.5868, eval/loss: 0.2134, eval/top-1-acc: 0.9313, eval/balanced_acc: 0.9313, eval/precision: 0.9351, eval/recall: 0.9313, eval/F1: 0.9307, lr: 0.0003, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.9313, at 2500 iters
    2550 iteration USE_EMA: True, train/sup_loss: 0.0056, train/unsup_loss: 0.1221, train/total_loss: 0.1229, train/util_ratio: 0.8438, train/run_time: 0.5867, lr: 0.0003, train/prefetch_time: 0.0041 
    2600 iteration USE_EMA: True, train/sup_loss: 0.0025, train/unsup_loss: 0.0423, train/total_loss: 0.0401, train/util_ratio: 0.7812, train/run_time: 0.5851, lr: 0.0003, train/prefetch_time: 0.0041 
    2650 iteration USE_EMA: True, train/sup_loss: 0.0073, train/unsup_loss: 0.1170, train/total_loss: 0.1220, train/util_ratio: 0.9375, train/run_time: 0.5860, lr: 0.0003, train/prefetch_time: 0.0041 
    2700 iteration USE_EMA: True, train/sup_loss: 0.0012, train/unsup_loss: 0.1485, train/total_loss: 0.1450, train/util_ratio: 0.7188, train/run_time: 0.5851, lr: 0.0003, train/prefetch_time: 0.0042 
    2750 iteration USE_EMA: True, train/sup_loss: 0.0016, train/unsup_loss: 0.0679, train/total_loss: 0.0647, train/util_ratio: 0.7188, train/run_time: 0.5857, lr: 0.0003, train/prefetch_time: 0.0042 
    2800 iteration USE_EMA: True, train/sup_loss: 0.0074, train/unsup_loss: 0.2367, train/total_loss: 0.2418, train/util_ratio: 0.9375, train/run_time: 0.5863, lr: 0.0003, train/prefetch_time: 0.0043 
    2850 iteration USE_EMA: True, train/sup_loss: 0.0024, train/unsup_loss: 0.0887, train/total_loss: 0.0839, train/util_ratio: 0.7812, train/run_time: 0.5877, lr: 0.0003, train/prefetch_time: 0.0042 
    2900 iteration USE_EMA: True, train/sup_loss: 0.0219, train/unsup_loss: 0.3507, train/total_loss: 0.3679, train/util_ratio: 0.8125, train/run_time: 0.5856, lr: 0.0003, train/prefetch_time: 0.0042 
    2950 iteration USE_EMA: True, train/sup_loss: 0.0010, train/unsup_loss: 0.3004, train/total_loss: 0.2967, train/util_ratio: 0.9375, train/run_time: 0.5858, lr: 0.0003, train/prefetch_time: 0.0042 
    validating...
    confusion matrix:
    [[9.72989852e-01 2.18579235e-03 0.00000000e+00 9.36768150e-04
      1.09289617e-03 0.00000000e+00 1.09289617e-03 0.00000000e+00
      1.26463700e-02 9.05542545e-03]
     [0.00000000e+00 9.85128366e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 1.48716343e-02]
     [3.71179039e-02 0.00000000e+00 8.56830942e-01 4.05489707e-03
      8.28134747e-02 9.98128509e-03 7.17404866e-03 2.02744853e-03
      0.00000000e+00 0.00000000e+00]
     [3.13087038e-03 9.39261115e-04 1.29931121e-02 8.22166562e-01
      1.72197871e-02 1.04571071e-01 3.47526612e-02 1.09580463e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 9.38086304e-04 7.97373358e-03
      9.56222639e-01 1.09443402e-03 6.09756098e-03 2.65791119e-02
      1.09443402e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 4.70883692e-03 1.50682781e-02
      8.94679014e-03 9.57777429e-01 1.88353477e-03 1.16151311e-02
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 2.81162137e-03 0.00000000e+00
      9.37207123e-04 9.37207123e-04 9.91252734e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.68676769e-03 0.00000000e+00 8.12373067e-03 2.81206062e-03
      8.59240744e-03 4.78050305e-02 0.00000000e+00 9.27980003e-01
      0.00000000e+00 0.00000000e+00]
     [2.19401348e-02 8.14919292e-03 9.40291490e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.60664473e-01 8.30590816e-03]
     [4.02726146e-03 2.89653036e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.66078067e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    3000 iteration, USE_EMA: True, train/sup_loss: 0.0012, train/unsup_loss: 0.3336, train/total_loss: 0.3276, train/util_ratio: 0.9062, train/run_time: 0.5860, eval/loss: 0.1851, eval/top-1-acc: 0.9397, eval/balanced_acc: 0.9397, eval/precision: 0.9419, eval/recall: 0.9397, eval/F1: 0.9393, lr: 0.0003, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.9397, at 3000 iters
    3050 iteration USE_EMA: True, train/sup_loss: 0.0104, train/unsup_loss: 0.1426, train/total_loss: 0.1506, train/util_ratio: 0.8750, train/run_time: 0.5859, lr: 0.0002, train/prefetch_time: 0.0040 
    3100 iteration USE_EMA: True, train/sup_loss: 0.0521, train/unsup_loss: 0.4599, train/total_loss: 0.5097, train/util_ratio: 0.8750, train/run_time: 0.5874, lr: 0.0002, train/prefetch_time: 0.0046 
    3150 iteration USE_EMA: True, train/sup_loss: 0.0036, train/unsup_loss: 0.1829, train/total_loss: 0.1842, train/util_ratio: 0.8438, train/run_time: 0.5848, lr: 0.0002, train/prefetch_time: 0.0043 
    3200 iteration USE_EMA: True, train/sup_loss: 0.0007, train/unsup_loss: 0.3560, train/total_loss: 0.3520, train/util_ratio: 0.9062, train/run_time: 0.5855, lr: 0.0002, train/prefetch_time: 0.0044 
    3250 iteration USE_EMA: True, train/sup_loss: 0.1109, train/unsup_loss: 0.0814, train/total_loss: 0.1875, train/util_ratio: 0.8438, train/run_time: 0.5850, lr: 0.0002, train/prefetch_time: 0.0042 
    3300 iteration USE_EMA: True, train/sup_loss: 0.0010, train/unsup_loss: 0.2761, train/total_loss: 0.2699, train/util_ratio: 0.8438, train/run_time: 0.5847, lr: 0.0002, train/prefetch_time: 0.0041 
    3350 iteration USE_EMA: True, train/sup_loss: 0.0019, train/unsup_loss: 0.0677, train/total_loss: 0.0648, train/util_ratio: 0.6875, train/run_time: 0.5848, lr: 0.0002, train/prefetch_time: 0.0042 
    3400 iteration USE_EMA: True, train/sup_loss: 0.0028, train/unsup_loss: 0.1996, train/total_loss: 0.2001, train/util_ratio: 0.7500, train/run_time: 0.5864, lr: 0.0002, train/prefetch_time: 0.0042 
    3450 iteration USE_EMA: True, train/sup_loss: 0.0007, train/unsup_loss: 0.1061, train/total_loss: 0.1045, train/util_ratio: 0.8438, train/run_time: 0.5878, lr: 0.0002, train/prefetch_time: 0.0040 
    validating...
    confusion matrix:
    [[9.70960187e-01 2.18579235e-03 0.00000000e+00 9.36768150e-04
      1.09289617e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00
      1.57689305e-02 9.05542545e-03]
     [0.00000000e+00 9.83093300e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      1.09580463e-03 1.58108954e-02]
     [3.71179039e-02 0.00000000e+00 8.68683718e-01 4.05489707e-03
      7.08047411e-02 9.04553961e-03 9.20149719e-03 1.09170306e-03
      0.00000000e+00 0.00000000e+00]
     [3.13087038e-03 9.39261115e-04 1.09580463e-02 8.45335003e-01
      1.31496556e-02 9.28303068e-02 2.94301816e-02 1.09580463e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 9.38086304e-04 7.97373358e-03
      9.57160725e-01 1.09443402e-03 6.09756098e-03 2.56410256e-02
      1.09443402e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 5.80756553e-03 1.97771151e-02
      8.94679014e-03 9.52911631e-01 1.88353477e-03 1.06733637e-02
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 2.81162137e-03 0.00000000e+00
      9.37207123e-04 9.37207123e-04 9.91252734e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.68676769e-03 0.00000000e+00 7.18637713e-03 5.78034682e-03
      5.78034682e-03 4.26495860e-02 0.00000000e+00 9.33916576e-01
      0.00000000e+00 0.00000000e+00]
     [1.81789688e-02 7.20890143e-03 9.40291490e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.67246513e-01 6.42532518e-03]
     [4.02726146e-03 2.61771995e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.68866171e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    3500 iteration, USE_EMA: True, train/sup_loss: 0.0011, train/unsup_loss: 0.1333, train/total_loss: 0.1298, train/util_ratio: 0.8438, train/run_time: 0.5861, eval/loss: 0.1716, eval/top-1-acc: 0.9440, eval/balanced_acc: 0.9439, eval/precision: 0.9454, eval/recall: 0.9439, eval/F1: 0.9437, lr: 0.0002, train/prefetch_time: 0.0043 BEST_EVAL_ACC: 0.9440, at 3500 iters
    3550 iteration USE_EMA: True, train/sup_loss: 0.0004, train/unsup_loss: 0.6290, train/total_loss: 0.6271, train/util_ratio: 0.9062, train/run_time: 0.5862, lr: 0.0002, train/prefetch_time: 0.0042 
    3600 iteration USE_EMA: True, train/sup_loss: 0.0008, train/unsup_loss: 0.1709, train/total_loss: 0.1669, train/util_ratio: 0.8125, train/run_time: 0.5869, lr: 0.0002, train/prefetch_time: 0.0042 
    3650 iteration USE_EMA: True, train/sup_loss: 0.0045, train/unsup_loss: 0.1530, train/total_loss: 0.1503, train/util_ratio: 0.6875, train/run_time: 0.5870, lr: 0.0002, train/prefetch_time: 0.0042 
    3700 iteration USE_EMA: True, train/sup_loss: 0.0057, train/unsup_loss: 0.2143, train/total_loss: 0.2129, train/util_ratio: 0.8125, train/run_time: 0.5853, lr: 0.0001, train/prefetch_time: 0.0040 
    3750 iteration USE_EMA: True, train/sup_loss: 0.0031, train/unsup_loss: 0.0304, train/total_loss: 0.0287, train/util_ratio: 0.8125, train/run_time: 0.5873, lr: 0.0001, train/prefetch_time: 0.0041 
    3800 iteration USE_EMA: True, train/sup_loss: 0.0007, train/unsup_loss: 0.4251, train/total_loss: 0.4235, train/util_ratio: 0.9688, train/run_time: 0.5867, lr: 0.0001, train/prefetch_time: 0.0048 
    3850 iteration USE_EMA: True, train/sup_loss: 0.0268, train/unsup_loss: 0.5288, train/total_loss: 0.5533, train/util_ratio: 0.9688, train/run_time: 0.5859, lr: 0.0001, train/prefetch_time: 0.0041 
    3900 iteration USE_EMA: True, train/sup_loss: 0.0397, train/unsup_loss: 0.3141, train/total_loss: 0.3514, train/util_ratio: 0.9062, train/run_time: 0.5848, lr: 0.0001, train/prefetch_time: 0.0044 
    3950 iteration USE_EMA: True, train/sup_loss: 0.0116, train/unsup_loss: 0.1066, train/total_loss: 0.1134, train/util_ratio: 0.8750, train/run_time: 0.5847, lr: 0.0001, train/prefetch_time: 0.0048 
    validating...
    confusion matrix:
    [[9.68930523e-01 2.18579235e-03 0.00000000e+00 9.36768150e-04
      1.09289617e-03 0.00000000e+00 0.00000000e+00 1.09289617e-03
      1.77985948e-02 7.96252927e-03]
     [0.00000000e+00 9.83093300e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      1.09580463e-03 1.58108954e-02]
     [3.61821585e-02 0.00000000e+00 8.77729258e-01 4.05489707e-03
      6.37866500e-02 7.95383656e-03 9.20149719e-03 1.09170306e-03
      0.00000000e+00 0.00000000e+00]
     [3.13087038e-03 9.39261115e-04 1.00187852e-02 8.57388854e-01
      1.22103945e-02 8.37507827e-02 2.83343770e-02 1.09580463e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 9.38086304e-04 9.06816760e-03
      9.54033771e-01 1.09443402e-03 6.09756098e-03 2.76735460e-02
      1.09443402e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 5.96452676e-03 2.27593784e-02
      8.00502276e-03 9.50714174e-01 1.88353477e-03 1.06733637e-02
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 3.74882849e-03 9.37207123e-04
      9.37207123e-04 9.37207123e-04 9.89378319e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.68676769e-03 0.00000000e+00 7.18637713e-03 6.71770036e-03
      4.84299328e-03 3.73379160e-02 0.00000000e+00 9.39228246e-01
      0.00000000e+00 0.00000000e+00]
     [1.41043724e-02 7.20890143e-03 9.40291490e-04 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.71321110e-01 6.42532518e-03]
     [4.02726146e-03 2.41635688e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.70879802e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    4000 iteration, USE_EMA: True, train/sup_loss: 0.0012, train/unsup_loss: 0.2264, train/total_loss: 0.2178, train/util_ratio: 0.8750, train/run_time: 0.5870, eval/loss: 0.1638, eval/top-1-acc: 0.9463, eval/balanced_acc: 0.9463, eval/precision: 0.9472, eval/recall: 0.9463, eval/F1: 0.9460, lr: 0.0001, train/prefetch_time: 0.0038 BEST_EVAL_ACC: 0.9463, at 4000 iters
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth




.. GENERATED FROM PYTHON SOURCE LINES 133-135

Finally, let's evaluate the trained model on validation set.
After training 4000 iterations with FreeMatch on only 40 labels of CIFAR-10, we obtain a classifier that achieves above 93 accuracy on validation set.

.. GENERATED FROM PYTHON SOURCE LINES 135-139

.. code-block:: default

    trainer.evaluate(eval_loader)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'acc': 0.94940625, 'precision': 0.9497274908634037, 'recall': 0.9493886660936213, 'f1': 0.9492299500086687}



.. GENERATED FROM PYTHON SOURCE LINES 140-147

Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10
--------------------

Now let's say we have imbalanced labeled set and unlabeled set of CIFAR-10, and we want to train a SoftMatch model on it.
We create an imbalanced labeled set and imbalanced unlabeled set of CIFAR-10, by setting the ``lb_imb_ratio`` and ``ulb_imb_ratio`` to 10.
Also we replace the ``algorithm`` with ``softmatch`` and set the ``imbalanced`` to ``True``.


.. GENERATED FROM PYTHON SOURCE LINES 147-193

.. code-block:: default

    config = {
        'algorithm': 'softmatch',
        'net': 'vit_tiny_patch2_32',
        'use_pretrain': True, 
        'pretrain_path': 'https://github.com/microsoft/Semi-supervised-learning/releases/download/v.0.0.0/vit_tiny_patch2_32_mlp_im_1k_32.pth',

        # optimization configs
        'epoch': 1,  
        'num_train_iter': 4000,  
        'num_eval_iter': 500,  
        'num_log_iter': 50,  
        'optim': 'AdamW',
        'lr': 5e-4,
        'layer_decay': 0.5,
        'batch_size': 16,
        'eval_batch_size': 16,


        # dataset configs
        'dataset': 'cifar10',
        'num_labels': 1500,
        'num_classes': 10,
        'img_size': 32,
        'crop_ratio': 0.875,
        'data_dir': './data',
        'ulb_samples_per_class': None,
        'lb_imb_ratio': 10,
        'ulb_imb_ratio': 10,
        'ulb_num_labels': 3000,

        # algorithm specific configs
        'hard_label': True,
        'T': 0.5,
        'ema_p': 0.999,
        'ent_loss_ratio': 0.001,
        'uratio': 2,
        'ulb_loss_ratio': 1.0,

        # device configs
        'gpu': 0,
        'world_size': 1,
        'distributed': False,
        "num_workers": 4,
    }
    config = get_config(config)








.. GENERATED FROM PYTHON SOURCE LINES 194-197

Then, we re-load the dataset and create data loaders for training and testing.
And we specify the model and algorithm to use.


.. GENERATED FROM PYTHON SOURCE LINES 197-204

.. code-block:: default

    dataset_dict = get_dataset(config, config.algorithm, config.dataset, config.num_labels, config.num_classes, data_dir=config.data_dir, include_lb_to_ulb=config.include_lb_to_ulb)
    train_lb_loader = get_data_loader(config, dataset_dict['train_lb'], config.batch_size)
    train_ulb_loader = get_data_loader(config, dataset_dict['train_ulb'], int(config.batch_size * config.uratio))
    eval_loader = get_data_loader(config, dataset_dict['eval'], config.eval_batch_size)
    algorithm = get_algorithm(config,  get_net_builder(config.net, from_name=False), tb_log=None, logger=None)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Files already downloaded and verified
    lb count: [1500, 1161, 899, 696, 539, 417, 323, 250, 193, 150]
    ulb count: [4500, 3483, 2697, 2088, 1617, 1251, 969, 750, 580, 450]
    Files already downloaded and verified
    Files already downloaded and verified
    lb count: [1500, 1161, 899, 696, 539, 417, 323, 250, 193, 150]
    ulb count: [4500, 3483, 2697, 2088, 1617, 1251, 969, 750, 580, 450]
    Files already downloaded and verified
    unlabeled data number: 18385, labeled data number 6128
    Create train and test data loaders
    [!] data loader keys: dict_keys(['train_lb', 'train_ulb', 'eval'])
    _IncompatibleKeys(missing_keys=['head.weight', 'head.bias'], unexpected_keys=[])
    Create optimizer and scheduler
    distribution alignment p_target: tensor([0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000, 0.1000,
            0.1000])




.. GENERATED FROM PYTHON SOURCE LINES 205-208

We can start Train the algorithms on CIFAR-10 with 40 labels now.
We train for 4000 iterations and evaluate every 500 iterations.


.. GENERATED FROM PYTHON SOURCE LINES 208-212

.. code-block:: default

    trainer = Trainer(config, algorithm)
    trainer.fit(train_lb_loader, train_ulb_loader, eval_loader)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch: 0
    50 iteration USE_EMA: True, train/sup_loss: 2.1973, train/unsup_loss: 0.4957, train/total_loss: 2.6930, train/util_ratio: 1.0000, train/run_time: 0.5848, lr: 0.0005, train/prefetch_time: 0.0041 
    100 iteration USE_EMA: True, train/sup_loss: 1.6948, train/unsup_loss: 0.8520, train/total_loss: 2.5467, train/util_ratio: 1.0000, train/run_time: 0.5853, lr: 0.0005, train/prefetch_time: 0.0047 
    150 iteration USE_EMA: True, train/sup_loss: 1.0849, train/unsup_loss: 0.7233, train/total_loss: 1.8082, train/util_ratio: 1.0000, train/run_time: 0.5855, lr: 0.0005, train/prefetch_time: 0.0042 
    200 iteration USE_EMA: True, train/sup_loss: 0.7781, train/unsup_loss: 0.9914, train/total_loss: 1.7695, train/util_ratio: 1.0000, train/run_time: 0.5851, lr: 0.0005, train/prefetch_time: 0.0042 
    250 iteration USE_EMA: True, train/sup_loss: 0.4300, train/unsup_loss: 0.6139, train/total_loss: 1.0439, train/util_ratio: 1.0000, train/run_time: 0.5843, lr: 0.0005, train/prefetch_time: 0.0041 
    300 iteration USE_EMA: True, train/sup_loss: 0.6376, train/unsup_loss: 0.7055, train/total_loss: 1.3432, train/util_ratio: 1.0000, train/run_time: 0.5837, lr: 0.0005, train/prefetch_time: 0.0042 
    350 iteration USE_EMA: True, train/sup_loss: 0.1702, train/unsup_loss: 0.7808, train/total_loss: 0.9510, train/util_ratio: 1.0000, train/run_time: 0.5856, lr: 0.0005, train/prefetch_time: 0.0041 
    400 iteration USE_EMA: True, train/sup_loss: 0.2648, train/unsup_loss: 0.4772, train/total_loss: 0.7420, train/util_ratio: 0.9994, train/run_time: 0.5856, lr: 0.0005, train/prefetch_time: 0.0041 
    450 iteration USE_EMA: True, train/sup_loss: 0.0894, train/unsup_loss: 0.3531, train/total_loss: 0.4426, train/util_ratio: 1.0000, train/run_time: 0.5854, lr: 0.0005, train/prefetch_time: 0.0041 
    validating...
    /opt/conda/envs/py_3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning:

    Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.

    confusion matrix:
    [[0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         0.99296435 0.         0.00703565 0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         0.99890642 0.         0.00109358 0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]
     [0.         0.         1.         0.         0.         0.
      0.         0.         0.         0.        ]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    500 iteration, USE_EMA: True, train/sup_loss: 0.2538, train/unsup_loss: 0.6373, train/total_loss: 0.8910, train/util_ratio: 0.9999, train/run_time: 0.5848, eval/loss: 4.1686, eval/top-1-acc: 0.1009, eval/balanced_acc: 0.1007, eval/precision: 0.0966, eval/recall: 0.1007, eval/F1: 0.0196, lr: 0.0005, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.1009, at 500 iters
    550 iteration USE_EMA: True, train/sup_loss: 0.1378, train/unsup_loss: 0.3941, train/total_loss: 0.5319, train/util_ratio: 1.0000, train/run_time: 0.5846, lr: 0.0005, train/prefetch_time: 0.0043 
    600 iteration USE_EMA: True, train/sup_loss: 0.0818, train/unsup_loss: 0.4877, train/total_loss: 0.5695, train/util_ratio: 0.9972, train/run_time: 0.5834, lr: 0.0005, train/prefetch_time: 0.0041 
    650 iteration USE_EMA: True, train/sup_loss: 0.1099, train/unsup_loss: 0.3094, train/total_loss: 0.4193, train/util_ratio: 1.0000, train/run_time: 0.5853, lr: 0.0005, train/prefetch_time: 0.0040 
    700 iteration USE_EMA: True, train/sup_loss: 0.1524, train/unsup_loss: 0.6666, train/total_loss: 0.8190, train/util_ratio: 0.9995, train/run_time: 0.5839, lr: 0.0005, train/prefetch_time: 0.0042 
    750 iteration USE_EMA: True, train/sup_loss: 0.1242, train/unsup_loss: 0.3220, train/total_loss: 0.4462, train/util_ratio: 1.0000, train/run_time: 0.5857, lr: 0.0005, train/prefetch_time: 0.0040 
    800 iteration USE_EMA: True, train/sup_loss: 0.2089, train/unsup_loss: 0.2973, train/total_loss: 0.5062, train/util_ratio: 0.9965, train/run_time: 0.5883, lr: 0.0005, train/prefetch_time: 0.0041 
    850 iteration USE_EMA: True, train/sup_loss: 0.1602, train/unsup_loss: 0.7442, train/total_loss: 0.9044, train/util_ratio: 0.9968, train/run_time: 0.5857, lr: 0.0005, train/prefetch_time: 0.0041 
    900 iteration USE_EMA: True, train/sup_loss: 0.4384, train/unsup_loss: 0.3470, train/total_loss: 0.7853, train/util_ratio: 0.9956, train/run_time: 0.5853, lr: 0.0005, train/prefetch_time: 0.0040 
    950 iteration USE_EMA: True, train/sup_loss: 0.0558, train/unsup_loss: 0.5004, train/total_loss: 0.5562, train/util_ratio: 0.9958, train/run_time: 0.5843, lr: 0.0005, train/prefetch_time: 0.0041 
    validating...
    /opt/conda/envs/py_3.10/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning:

    Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.

    confusion matrix:
    [[6.57455113e-01 1.12412178e-02 3.30366901e-01 0.00000000e+00
      0.00000000e+00 9.36768150e-04 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 9.94990607e-01 5.00939261e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.97036806e-01 0.00000000e+00
      1.09170306e-03 1.87149095e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 9.39261115e-04 5.83594239e-01 1.69223544e-01
      4.89981215e-02 1.97244834e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 5.84740463e-02 0.00000000e+00
      9.40587867e-01 9.38086304e-04 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 1.67791555e-01 0.00000000e+00
      1.33417046e-02 8.18866740e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [9.37207123e-04 0.00000000e+00 9.85785692e-01 0.00000000e+00
      1.12464855e-02 0.00000000e+00 2.03061543e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 3.53538510e-01 0.00000000e+00
      6.14435244e-01 3.20262459e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [2.64848770e-02 9.43425795e-02 8.68359191e-01 0.00000000e+00
      3.76116596e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00
      7.05218618e-03 0.00000000e+00]
     [4.18215613e-03 5.84417596e-01 4.08612144e-01 0.00000000e+00
      1.85873606e-03 9.29368030e-04 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    1000 iteration, USE_EMA: True, train/sup_loss: 0.0100, train/unsup_loss: 0.4945, train/total_loss: 0.5045, train/util_ratio: 1.0000, train/run_time: 0.5872, eval/loss: 1.6643, eval/top-1-acc: 0.4583, eval/balanced_acc: 0.4587, eval/precision: 0.6104, eval/recall: 0.4587, eval/F1: 0.3683, lr: 0.0005, train/prefetch_time: 0.0042 BEST_EVAL_ACC: 0.4583, at 1000 iters
    1050 iteration USE_EMA: True, train/sup_loss: 0.3485, train/unsup_loss: 0.5402, train/total_loss: 0.8887, train/util_ratio: 0.9698, train/run_time: 0.5863, lr: 0.0005, train/prefetch_time: 0.0047 
    1100 iteration USE_EMA: True, train/sup_loss: 0.0494, train/unsup_loss: 0.3935, train/total_loss: 0.4429, train/util_ratio: 0.9873, train/run_time: 0.5846, lr: 0.0005, train/prefetch_time: 0.0041 
    1150 iteration USE_EMA: True, train/sup_loss: 0.0724, train/unsup_loss: 0.7487, train/total_loss: 0.8211, train/util_ratio: 0.9823, train/run_time: 0.5839, lr: 0.0005, train/prefetch_time: 0.0048 
    1200 iteration USE_EMA: True, train/sup_loss: 0.0384, train/unsup_loss: 0.3750, train/total_loss: 0.4135, train/util_ratio: 0.9757, train/run_time: 0.5862, lr: 0.0005, train/prefetch_time: 0.0042 
    1250 iteration USE_EMA: True, train/sup_loss: 0.2609, train/unsup_loss: 0.7488, train/total_loss: 1.0098, train/util_ratio: 0.9724, train/run_time: 0.5853, lr: 0.0005, train/prefetch_time: 0.0047 
    1300 iteration USE_EMA: True, train/sup_loss: 0.2344, train/unsup_loss: 0.4661, train/total_loss: 0.7005, train/util_ratio: 0.9967, train/run_time: 0.5845, lr: 0.0005, train/prefetch_time: 0.0042 
    1350 iteration USE_EMA: True, train/sup_loss: 0.1173, train/unsup_loss: 0.3448, train/total_loss: 0.4621, train/util_ratio: 0.9760, train/run_time: 0.5862, lr: 0.0004, train/prefetch_time: 0.0041 
    1400 iteration USE_EMA: True, train/sup_loss: 0.0708, train/unsup_loss: 0.5651, train/total_loss: 0.6360, train/util_ratio: 0.9697, train/run_time: 0.5860, lr: 0.0004, train/prefetch_time: 0.0040 
    1450 iteration USE_EMA: True, train/sup_loss: 0.0548, train/unsup_loss: 0.4645, train/total_loss: 0.5194, train/util_ratio: 0.9791, train/run_time: 0.5885, lr: 0.0004, train/prefetch_time: 0.0047 
    validating...
    confusion matrix:
    [[9.78766589e-01 2.96643247e-03 1.73302108e-02 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.36768150e-04 0.00000000e+00]
     [0.00000000e+00 1.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.27510917e-03 0.00000000e+00 9.91734248e-01 0.00000000e+00
      3.11915159e-03 1.87149095e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [2.19160927e-03 9.39261115e-04 3.69442705e-02 8.12773951e-01
      2.84909205e-02 1.15529117e-01 2.03506575e-03 0.00000000e+00
      1.09580463e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 1.31332083e-02 9.38086304e-04
      9.79831144e-01 1.09443402e-03 2.03252033e-03 2.97060663e-03
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 7.84806153e-03 3.92403076e-03
      9.88855753e-03 9.75357087e-01 0.00000000e+00 2.98226338e-03
      0.00000000e+00 0.00000000e+00]
     [5.15463918e-03 0.00000000e+00 6.85723211e-02 3.74882849e-03
      1.12464855e-02 1.87441425e-03 9.09403311e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.74941415e-03 0.00000000e+00 5.85845962e-02 1.87470708e-03
      2.15278863e-01 6.70207780e-02 0.00000000e+00 6.53491642e-01
      0.00000000e+00 0.00000000e+00]
     [7.42830277e-02 6.51935433e-02 7.69471870e-02 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      7.83576242e-01 0.00000000e+00]
     [3.19083024e-02 6.39560099e-01 5.26641884e-03 0.00000000e+00
      0.00000000e+00 1.08426270e-03 0.00000000e+00 0.00000000e+00
      0.00000000e+00 3.22180917e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    1500 iteration, USE_EMA: True, train/sup_loss: 0.0231, train/unsup_loss: 0.1943, train/total_loss: 0.2173, train/util_ratio: 0.9849, train/run_time: 0.5893, eval/loss: 0.4948, eval/top-1-acc: 0.8402, eval/balanced_acc: 0.8407, eval/precision: 0.8845, eval/recall: 0.8407, eval/F1: 0.8308, lr: 0.0004, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.8402, at 1500 iters
    1550 iteration USE_EMA: True, train/sup_loss: 0.1359, train/unsup_loss: 0.5769, train/total_loss: 0.7128, train/util_ratio: 0.9998, train/run_time: 0.5856, lr: 0.0004, train/prefetch_time: 0.0044 
    1600 iteration USE_EMA: True, train/sup_loss: 0.1639, train/unsup_loss: 0.4931, train/total_loss: 0.6570, train/util_ratio: 0.9859, train/run_time: 0.5843, lr: 0.0004, train/prefetch_time: 0.0041 
    1650 iteration USE_EMA: True, train/sup_loss: 0.1258, train/unsup_loss: 0.1935, train/total_loss: 0.3192, train/util_ratio: 0.9677, train/run_time: 0.5899, lr: 0.0004, train/prefetch_time: 0.0043 
    1700 iteration USE_EMA: True, train/sup_loss: 0.3179, train/unsup_loss: 0.1958, train/total_loss: 0.5137, train/util_ratio: 0.9438, train/run_time: 0.5855, lr: 0.0004, train/prefetch_time: 0.0042 
    1750 iteration USE_EMA: True, train/sup_loss: 0.3593, train/unsup_loss: 0.6953, train/total_loss: 1.0546, train/util_ratio: 0.9682, train/run_time: 0.5844, lr: 0.0004, train/prefetch_time: 0.0041 
    1800 iteration USE_EMA: True, train/sup_loss: 0.3188, train/unsup_loss: 0.4261, train/total_loss: 0.7449, train/util_ratio: 0.9865, train/run_time: 0.5872, lr: 0.0004, train/prefetch_time: 0.0043 
    1850 iteration USE_EMA: True, train/sup_loss: 0.2090, train/unsup_loss: 0.2387, train/total_loss: 0.4477, train/util_ratio: 0.9737, train/run_time: 0.5853, lr: 0.0004, train/prefetch_time: 0.0042 
    1900 iteration USE_EMA: True, train/sup_loss: 0.0471, train/unsup_loss: 0.3788, train/total_loss: 0.4259, train/util_ratio: 0.9368, train/run_time: 0.5877, lr: 0.0004, train/prefetch_time: 0.0042 
    1950 iteration USE_EMA: True, train/sup_loss: 0.1019, train/unsup_loss: 0.2521, train/total_loss: 0.3540, train/util_ratio: 0.9388, train/run_time: 0.5845, lr: 0.0004, train/prefetch_time: 0.0042 
    validating...
    confusion matrix:
    [[9.89071038e-01 1.09289617e-03 4.99609680e-03 2.02966432e-03
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      1.87353630e-03 9.36768150e-04]
     [0.00000000e+00 9.97808391e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 2.19160927e-03]
     [5.30255770e-03 0.00000000e+00 9.82376794e-01 3.11915159e-03
      4.21085465e-03 2.80723643e-03 2.18340611e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [2.19160927e-03 9.39261115e-04 1.51847214e-02 9.04351910e-01
      1.03318723e-02 6.27739512e-02 2.03506575e-03 0.00000000e+00
      2.19160927e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 1.01626016e-02 2.81425891e-03
      9.74828018e-01 2.18886804e-03 2.03252033e-03 7.97373358e-03
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 2.98226338e-03 1.05164024e-02
      6.90629415e-03 9.73630513e-01 0.00000000e+00 5.96452676e-03
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 1.40581068e-02 3.74882849e-03
      0.00000000e+00 1.87441425e-03 9.76257420e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [5.62412123e-03 0.00000000e+00 2.18715826e-02 4.99921887e-03
      5.24917982e-02 3.17137947e-02 0.00000000e+00 8.83299484e-01
      0.00000000e+00 0.00000000e+00]
     [6.40965366e-02 2.61714465e-02 1.06566369e-02 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      8.99075380e-01 0.00000000e+00]
     [2.06009913e-02 1.41418835e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 8.37050805e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    2000 iteration, USE_EMA: True, train/sup_loss: 0.1357, train/unsup_loss: 0.2280, train/total_loss: 0.3637, train/util_ratio: 0.9578, train/run_time: 0.5857, eval/loss: 0.2001, eval/top-1-acc: 0.9417, eval/balanced_acc: 0.9418, eval/precision: 0.9460, eval/recall: 0.9418, eval/F1: 0.9415, lr: 0.0004, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.9417, at 2000 iters
    2050 iteration USE_EMA: True, train/sup_loss: 0.1769, train/unsup_loss: 0.4394, train/total_loss: 0.6164, train/util_ratio: 0.9557, train/run_time: 0.5852, lr: 0.0004, train/prefetch_time: 0.0044 
    2100 iteration USE_EMA: True, train/sup_loss: 0.2291, train/unsup_loss: 0.4305, train/total_loss: 0.6596, train/util_ratio: 0.9934, train/run_time: 0.5850, lr: 0.0004, train/prefetch_time: 0.0041 
    2150 iteration USE_EMA: True, train/sup_loss: 0.1432, train/unsup_loss: 0.1848, train/total_loss: 0.3280, train/util_ratio: 0.9360, train/run_time: 0.5852, lr: 0.0004, train/prefetch_time: 0.0045 
    2200 iteration USE_EMA: True, train/sup_loss: 0.1172, train/unsup_loss: 0.0775, train/total_loss: 0.1947, train/util_ratio: 0.9719, train/run_time: 0.5861, lr: 0.0004, train/prefetch_time: 0.0043 
    2250 iteration USE_EMA: True, train/sup_loss: 0.1411, train/unsup_loss: 0.1490, train/total_loss: 0.2901, train/util_ratio: 0.9110, train/run_time: 0.5860, lr: 0.0004, train/prefetch_time: 0.0045 
    2300 iteration USE_EMA: True, train/sup_loss: 0.0211, train/unsup_loss: 0.2729, train/total_loss: 0.2940, train/util_ratio: 0.9805, train/run_time: 0.5873, lr: 0.0004, train/prefetch_time: 0.0043 
    2350 iteration USE_EMA: True, train/sup_loss: 0.2737, train/unsup_loss: 0.4222, train/total_loss: 0.6959, train/util_ratio: 0.9603, train/run_time: 0.5863, lr: 0.0003, train/prefetch_time: 0.0043 
    2400 iteration USE_EMA: True, train/sup_loss: 0.4368, train/unsup_loss: 0.4463, train/total_loss: 0.8831, train/util_ratio: 0.9895, train/run_time: 0.5870, lr: 0.0003, train/prefetch_time: 0.0044 
    2450 iteration USE_EMA: True, train/sup_loss: 0.0700, train/unsup_loss: 0.3181, train/total_loss: 0.3880, train/util_ratio: 0.9260, train/run_time: 0.5855, lr: 0.0003, train/prefetch_time: 0.0043 
    validating...
    confusion matrix:
    [[9.92037471e-01 1.09289617e-03 1.09289617e-03 2.02966432e-03
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      2.81030445e-03 9.36768150e-04]
     [9.39261115e-04 9.95773325e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 3.28741390e-03]
     [6.39426076e-03 0.00000000e+00 9.81129133e-01 3.11915159e-03
      3.11915159e-03 1.87149095e-03 4.36681223e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.13087038e-03 9.39261115e-04 6.10519724e-03 9.37539136e-01
      7.20100188e-03 3.97620539e-02 2.03506575e-03 1.09580463e-03
      2.19160927e-03 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.22451532e-03 3.90869293e-03
      9.70919325e-01 2.18886804e-03 2.03252033e-03 1.17260788e-02
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.41767383e-04 1.96201538e-02
      5.96452676e-03 9.65468529e-01 0.00000000e+00 8.00502276e-03
      0.00000000e+00 0.00000000e+00]
     [5.15463918e-03 0.00000000e+00 5.77944392e-03 2.81162137e-03
      0.00000000e+00 1.87441425e-03 9.84379881e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.68676769e-03 0.00000000e+00 1.14044681e-02 7.96750508e-03
      2.45274176e-02 1.56225590e-02 0.00000000e+00 9.35791283e-01
      0.00000000e+00 0.00000000e+00]
     [4.23131171e-02 1.61416706e-02 4.85817270e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.35590033e-01 1.09700674e-03]
     [1.68835192e-02 8.50371747e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 8.97149938e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    2500 iteration, USE_EMA: True, train/sup_loss: 0.1164, train/unsup_loss: 0.3619, train/total_loss: 0.4784, train/util_ratio: 0.8609, train/run_time: 0.5867, eval/loss: 0.1316, eval/top-1-acc: 0.9595, eval/balanced_acc: 0.9596, eval/precision: 0.9610, eval/recall: 0.9596, eval/F1: 0.9595, lr: 0.0003, train/prefetch_time: 0.0043 BEST_EVAL_ACC: 0.9595, at 2500 iters
    2550 iteration USE_EMA: True, train/sup_loss: 0.1894, train/unsup_loss: 0.2899, train/total_loss: 0.4793, train/util_ratio: 1.0000, train/run_time: 0.5849, lr: 0.0003, train/prefetch_time: 0.0048 
    2600 iteration USE_EMA: True, train/sup_loss: 0.1026, train/unsup_loss: 0.1838, train/total_loss: 0.2865, train/util_ratio: 0.9698, train/run_time: 0.5858, lr: 0.0003, train/prefetch_time: 0.0049 
    2650 iteration USE_EMA: True, train/sup_loss: 0.2092, train/unsup_loss: 0.2388, train/total_loss: 0.4480, train/util_ratio: 0.8596, train/run_time: 0.5882, lr: 0.0003, train/prefetch_time: 0.0049 
    2700 iteration USE_EMA: True, train/sup_loss: 0.0460, train/unsup_loss: 0.5067, train/total_loss: 0.5528, train/util_ratio: 0.9665, train/run_time: 0.5853, lr: 0.0003, train/prefetch_time: 0.0043 
    2750 iteration USE_EMA: True, train/sup_loss: 0.0361, train/unsup_loss: 0.2601, train/total_loss: 0.2962, train/util_ratio: 0.9096, train/run_time: 0.5851, lr: 0.0003, train/prefetch_time: 0.0043 
    2800 iteration USE_EMA: True, train/sup_loss: 0.3283, train/unsup_loss: 0.1707, train/total_loss: 0.4990, train/util_ratio: 0.9716, train/run_time: 0.5862, lr: 0.0003, train/prefetch_time: 0.0043 
    2850 iteration USE_EMA: True, train/sup_loss: 0.1040, train/unsup_loss: 0.1399, train/total_loss: 0.2439, train/util_ratio: 0.9151, train/run_time: 0.5865, lr: 0.0003, train/prefetch_time: 0.0042 
    2900 iteration USE_EMA: True, train/sup_loss: 0.0069, train/unsup_loss: 0.3924, train/total_loss: 0.3993, train/util_ratio: 0.8954, train/run_time: 0.5861, lr: 0.0003, train/prefetch_time: 0.0043 
    2950 iteration USE_EMA: True, train/sup_loss: 0.2643, train/unsup_loss: 0.5357, train/total_loss: 0.8000, train/util_ratio: 0.9019, train/run_time: 0.5849, lr: 0.0003, train/prefetch_time: 0.0042 
    validating...
    confusion matrix:
    [[9.92037471e-01 1.09289617e-03 1.09289617e-03 2.02966432e-03
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      2.81030445e-03 9.36768150e-04]
     [0.00000000e+00 9.94677520e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 5.32247965e-03]
     [6.39426076e-03 0.00000000e+00 9.81129133e-01 3.11915159e-03
      3.11915159e-03 1.87149095e-03 4.36681223e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [2.19160927e-03 9.39261115e-04 3.13087038e-03 9.48653726e-01
      6.10519724e-03 3.16217909e-02 3.13087038e-03 1.09580463e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 8.13008130e-03 3.90869293e-03
      9.70919325e-01 3.12695435e-03 2.03252033e-03 1.18824265e-02
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.41767383e-04 2.15036886e-02
      4.08099199e-03 9.64526762e-01 9.41767383e-04 8.00502276e-03
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 3.90502968e-03 1.87441425e-03
      0.00000000e+00 1.87441425e-03 9.88284911e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [4.68676769e-03 0.00000000e+00 1.03108889e-02 7.96750508e-03
      1.85908452e-02 9.84221215e-03 0.00000000e+00 9.48601781e-01
      0.00000000e+00 0.00000000e+00]
     [3.33803479e-02 1.12834979e-02 2.03729823e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.52201849e-01 1.09700674e-03]
     [1.20817844e-02 6.92379182e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.17750929e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    3000 iteration, USE_EMA: True, train/sup_loss: 0.0207, train/unsup_loss: 0.2548, train/total_loss: 0.2755, train/util_ratio: 0.9572, train/run_time: 0.5866, eval/loss: 0.1093, eval/top-1-acc: 0.9658, eval/balanced_acc: 0.9659, eval/precision: 0.9666, eval/recall: 0.9659, eval/F1: 0.9658, lr: 0.0003, train/prefetch_time: 0.0043 BEST_EVAL_ACC: 0.9658, at 3000 iters
    3050 iteration USE_EMA: True, train/sup_loss: 0.1406, train/unsup_loss: 0.1715, train/total_loss: 0.3121, train/util_ratio: 0.9213, train/run_time: 0.5855, lr: 0.0002, train/prefetch_time: 0.0043 
    3100 iteration USE_EMA: True, train/sup_loss: 0.0058, train/unsup_loss: 0.4695, train/total_loss: 0.4753, train/util_ratio: 0.9951, train/run_time: 0.5844, lr: 0.0002, train/prefetch_time: 0.0044 
    3150 iteration USE_EMA: True, train/sup_loss: 0.0709, train/unsup_loss: 0.0929, train/total_loss: 0.1638, train/util_ratio: 0.9759, train/run_time: 0.5853, lr: 0.0002, train/prefetch_time: 0.0042 
    3200 iteration USE_EMA: True, train/sup_loss: 0.0169, train/unsup_loss: 0.1561, train/total_loss: 0.1731, train/util_ratio: 0.9622, train/run_time: 0.5865, lr: 0.0002, train/prefetch_time: 0.0043 
    3250 iteration USE_EMA: True, train/sup_loss: 0.3808, train/unsup_loss: 0.2674, train/total_loss: 0.6482, train/util_ratio: 0.9623, train/run_time: 0.5855, lr: 0.0002, train/prefetch_time: 0.0050 
    3300 iteration USE_EMA: True, train/sup_loss: 0.7078, train/unsup_loss: 0.0740, train/total_loss: 0.7818, train/util_ratio: 0.9645, train/run_time: 0.5838, lr: 0.0002, train/prefetch_time: 0.0042 
    3350 iteration USE_EMA: True, train/sup_loss: 0.0751, train/unsup_loss: 0.2194, train/total_loss: 0.2945, train/util_ratio: 0.8684, train/run_time: 0.5862, lr: 0.0002, train/prefetch_time: 0.0042 
    3400 iteration USE_EMA: True, train/sup_loss: 0.0676, train/unsup_loss: 0.3038, train/total_loss: 0.3714, train/util_ratio: 0.8701, train/run_time: 0.5864, lr: 0.0002, train/prefetch_time: 0.0042 
    3450 iteration USE_EMA: True, train/sup_loss: 0.1079, train/unsup_loss: 0.2209, train/total_loss: 0.3288, train/util_ratio: 0.9350, train/run_time: 0.5870, lr: 0.0002, train/prefetch_time: 0.0042 
    validating...
    confusion matrix:
    [[9.91100703e-01 1.09289617e-03 1.09289617e-03 2.02966432e-03
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      3.74707260e-03 9.36768150e-04]
     [0.00000000e+00 9.93738259e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 6.26174076e-03]
     [6.39426076e-03 0.00000000e+00 9.81129133e-01 3.11915159e-03
      3.11915159e-03 1.87149095e-03 4.36681223e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [2.19160927e-03 9.39261115e-04 3.13087038e-03 9.51628053e-01
      6.10519724e-03 2.86474640e-02 3.13087038e-03 1.09580463e-03
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 8.13008130e-03 2.03252033e-03
      9.70762977e-01 3.12695435e-03 3.12695435e-03 1.28205128e-02
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.41767383e-04 2.24454560e-02
      4.08099199e-03 9.63584995e-01 9.41767383e-04 8.00502276e-03
      0.00000000e+00 0.00000000e+00]
     [4.06123087e-03 0.00000000e+00 2.96782256e-03 1.87441425e-03
      0.00000000e+00 1.87441425e-03 9.89222118e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.74941415e-03 0.00000000e+00 8.12373067e-03 6.09279800e-03
      1.39040775e-02 9.84221215e-03 0.00000000e+00 9.58287768e-01
      0.00000000e+00 0.00000000e+00]
     [2.94624667e-02 9.24619966e-03 2.03729823e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.58157029e-01 1.09700674e-03]
     [1.09975217e-02 5.71561338e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.30916976e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    3500 iteration, USE_EMA: True, train/sup_loss: 0.0417, train/unsup_loss: 0.1336, train/total_loss: 0.1753, train/util_ratio: 0.9552, train/run_time: 0.5867, eval/loss: 0.0987, eval/top-1-acc: 0.9688, eval/balanced_acc: 0.9689, eval/precision: 0.9694, eval/recall: 0.9689, eval/F1: 0.9688, lr: 0.0002, train/prefetch_time: 0.0041 BEST_EVAL_ACC: 0.9688, at 3500 iters
    3550 iteration USE_EMA: True, train/sup_loss: 0.0538, train/unsup_loss: 0.2564, train/total_loss: 0.3101, train/util_ratio: 0.9345, train/run_time: 0.5860, lr: 0.0002, train/prefetch_time: 0.0042 
    3600 iteration USE_EMA: True, train/sup_loss: 0.0052, train/unsup_loss: 0.3318, train/total_loss: 0.3369, train/util_ratio: 0.8867, train/run_time: 0.5846, lr: 0.0002, train/prefetch_time: 0.0042 
    3650 iteration USE_EMA: True, train/sup_loss: 0.1615, train/unsup_loss: 0.5445, train/total_loss: 0.7059, train/util_ratio: 0.8766, train/run_time: 0.5863, lr: 0.0002, train/prefetch_time: 0.0043 
    3700 iteration USE_EMA: True, train/sup_loss: 0.0057, train/unsup_loss: 0.2936, train/total_loss: 0.2994, train/util_ratio: 0.9654, train/run_time: 0.5869, lr: 0.0001, train/prefetch_time: 0.0043 
    3750 iteration USE_EMA: True, train/sup_loss: 0.1422, train/unsup_loss: 0.2040, train/total_loss: 0.3462, train/util_ratio: 0.9435, train/run_time: 0.5862, lr: 0.0001, train/prefetch_time: 0.0043 
    3800 iteration USE_EMA: True, train/sup_loss: 0.0084, train/unsup_loss: 0.4933, train/total_loss: 0.5017, train/util_ratio: 0.8802, train/run_time: 0.5852, lr: 0.0001, train/prefetch_time: 0.0043 
    3850 iteration USE_EMA: True, train/sup_loss: 0.0400, train/unsup_loss: 0.2183, train/total_loss: 0.2583, train/util_ratio: 0.8620, train/run_time: 0.5860, lr: 0.0001, train/prefetch_time: 0.0042 
    3900 iteration USE_EMA: True, train/sup_loss: 0.0044, train/unsup_loss: 0.2642, train/total_loss: 0.2686, train/util_ratio: 0.7825, train/run_time: 0.5840, lr: 0.0001, train/prefetch_time: 0.0045 
    3950 iteration USE_EMA: True, train/sup_loss: 0.0237, train/unsup_loss: 0.2683, train/total_loss: 0.2920, train/util_ratio: 0.9008, train/run_time: 0.5858, lr: 0.0001, train/prefetch_time: 0.0043 
    validating...
    confusion matrix:
    [[9.89071038e-01 1.09289617e-03 1.09289617e-03 2.02966432e-03
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      5.77673692e-03 9.36768150e-04]
     [0.00000000e+00 9.92798998e-01 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      0.00000000e+00 7.20100188e-03]
     [6.39426076e-03 0.00000000e+00 9.81129133e-01 3.11915159e-03
      3.11915159e-03 1.87149095e-03 4.36681223e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [1.09580463e-03 9.39261115e-04 3.13087038e-03 9.56793989e-01
      6.10519724e-03 2.56731371e-02 3.13087038e-03 0.00000000e+00
      2.19160927e-03 9.39261115e-04]
     [0.00000000e+00 0.00000000e+00 8.13008130e-03 2.03252033e-03
      9.70762977e-01 3.12695435e-03 3.12695435e-03 1.28205128e-02
      0.00000000e+00 0.00000000e+00]
     [0.00000000e+00 0.00000000e+00 9.41767383e-04 2.55846806e-02
      4.08099199e-03 9.59347041e-01 9.41767383e-04 9.10375137e-03
      0.00000000e+00 0.00000000e+00]
     [2.96782256e-03 0.00000000e+00 1.87441425e-03 1.87441425e-03
      0.00000000e+00 1.87441425e-03 9.91408935e-01 0.00000000e+00
      0.00000000e+00 0.00000000e+00]
     [3.74941415e-03 0.00000000e+00 8.12373067e-03 6.09279800e-03
      1.09357913e-02 9.84221215e-03 0.00000000e+00 9.61256054e-01
      0.00000000e+00 0.00000000e+00]
     [2.66415922e-02 9.24619966e-03 2.03729823e-03 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.60977903e-01 1.09700674e-03]
     [1.09975217e-02 5.18897150e-02 0.00000000e+00 0.00000000e+00
      0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
      9.29368030e-04 9.36183395e-01]]
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth
    4000 iteration, USE_EMA: True, train/sup_loss: 0.3194, train/unsup_loss: 0.2394, train/total_loss: 0.5588, train/util_ratio: 0.9352, train/run_time: 0.5849, eval/loss: 0.0938, eval/top-1-acc: 0.9700, eval/balanced_acc: 0.9700, eval/precision: 0.9704, eval/recall: 0.9700, eval/F1: 0.9699, lr: 0.0001, train/prefetch_time: 0.0039 BEST_EVAL_ACC: 0.9700, at 4000 iters
    model saved: ./saved_models/fixmatch/latest_model.pth
    model saved: ./saved_models/fixmatch/model_best.pth




.. GENERATED FROM PYTHON SOURCE LINES 213-215

Finally, let's evaluate the trained model on validation set.


.. GENERATED FROM PYTHON SOURCE LINES 215-219

.. code-block:: default

    trainer.evaluate(eval_loader)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'acc': 0.973046875, 'precision': 0.9733461908379816, 'recall': 0.9730562445200807, 'f1': 0.9730497197647558}



.. GENERATED FROM PYTHON SOURCE LINES 220-225

References
[1] USB: https://github.com/microsoft/Semi-supervised-learning
[2] Kihyuk Sohn et al. FixMatch: Simplifying Semi-Supervised Learning with Consistency and Confidence
[3] Yidong Wang et al. FreeMatch: Self-adaptive Thresholding for Semi-supervised Learning
[4] Hao Chen et al. SoftMatch: Addressing the Quantity-Quality Trade-off in Semi-supervised Learning


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 143 minutes  59.012 seconds)


.. _sphx_glr_download_advanced_usb_semisup_learn.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: usb_semisup_learn.py <usb_semisup_learn.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: usb_semisup_learn.ipynb <usb_semisup_learn.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
