
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_logs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_logs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_logs.py:


(beta) Using TORCH_LOGS python API with torch.compile
==========================================================================================
**Author:** `Michael Lazos <https://github.com/mlazos>`_

.. GENERATED FROM PYTHON SOURCE LINES 6-9

.. code-block:: default


    import logging








.. GENERATED FROM PYTHON SOURCE LINES 10-18

This tutorial introduces the ``TORCH_LOGS`` environment variable, as well as the Python API, and
demonstrates how to apply it to observe the phases  of ``torch.compile``.

.. note::

  This tutorial requires PyTorch 2.2.0 or later.



.. GENERATED FROM PYTHON SOURCE LINES 22-32

Setup
~~~~~~~~~~~~~~~~~~~~~
In this example, we'll set up a simple Python function which performs an elementwise
add and observe the compilation process with ``TORCH_LOGS`` Python API.

.. note::

  There is also an environment variable ``TORCH_LOGS``, which can be used to
  change logging settings at the command line. The equivalent environment
  variable setting is shown for each example.

.. GENERATED FROM PYTHON SOURCE LINES 32-81

.. code-block:: default


    import torch

    # exit cleanly if we are on a device that doesn't support torch.compile
    if torch.cuda.get_device_capability() < (7, 0):
        print("Skipping because torch.compile is not supported on this device.")
    else:
        @torch.compile()
        def fn(x, y):
            z = x + y
            return z + 2


        inputs = (torch.ones(2, 2, device="cuda"), torch.zeros(2, 2, device="cuda"))


    # print separator and reset dynamo
    # between each example
        def separator(name):
            print(f"==================={name}=========================")
            torch._dynamo.reset()


        separator("Dynamo Tracing")
    # View dynamo tracing
    # TORCH_LOGS="+dynamo"
        torch._logging.set_logs(dynamo=logging.DEBUG)
        fn(*inputs)

        separator("Traced Graph")
    # View traced graph
    # TORCH_LOGS="graph"
        torch._logging.set_logs(graph=True)
        fn(*inputs)

        separator("Fusion Decisions")
    # View fusion decisions
    # TORCH_LOGS="fusion"
        torch._logging.set_logs(fusion=True)
        fn(*inputs)

        separator("Output Code")
    # View output code generated by inductor
    # TORCH_LOGS="output_code"
        torch._logging.set_logs(output_code=True)
        fn(*inputs)

        separator("")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ===================Dynamo Tracing=========================
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0] torchdynamo start compiling fn /var/lib/workspace/recipes_source/torch_logs.py:39, stack (elided 5 frames):
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/bin/sphinx-build", line 8, in <module>
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     sys.exit(main())
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/cmd/build.py", line 288, in main
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return make_main(argv)
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/cmd/build.py", line 193, in make_main
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return make_mode.run_make_mode(argv[1:])
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/cmd/make_mode.py", line 160, in run_make_mode
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return make.run_generic_build(args[0])
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/cmd/make_mode.py", line 148, in run_generic_build
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return build_main(args + opts)
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/cmd/build.py", line 272, in build_main
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     app = Sphinx(args.sourcedir, args.confdir, args.outputdir,
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/application.py", line 256, in __init__
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     self._init_builder()
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/application.py", line 314, in _init_builder
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     self.events.emit('builder-inited')
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx/events.py", line 94, in emit
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     results.append(listener.handler(self.app, *args))
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_gallery.py", line 491, in generate_gallery_rst
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     ) = generate_dir_rst(
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 431, in generate_dir_rst
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     intro, title, cost = generate_file_rst(
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 1027, in generate_file_rst
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     output_blocks, time_elapsed = execute_script(script_blocks,
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 945, in execute_script
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     output_blocks.append(execute_code_block(
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 810, in execute_code_block
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     is_last_expr, mem_max = _exec_and_get_memory(
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 676, in _exec_and_get_memory
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     mem_max, _ = gallery_conf['call_memory'](
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_gallery.py", line 223, in call_memory
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return 0., func()
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/sphinx_gallery/gen_rst.py", line 600, in __call__
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     exec(self.code, self.fake_main.__dict__)
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/var/lib/workspace/recipes_source/torch_logs.py", line 59, in <module>
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     fn(*inputs)
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]   File "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 451, in _fn
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0]     return fn(*args, **kwargs)
    V0419 16:17:24.563000 139833938784896 torch/_dynamo/convert_frame.py:652] [0/0] 
    I0419 16:17:24.566000 139833938784896 torch/_dynamo/logging.py:55] [0/0] Step 1: torchdynamo start tracing fn /var/lib/workspace/recipes_source/torch_logs.py:39
    V0419 16:17:24.566000 139833938784896 torch/fx/experimental/symbolic_shapes.py:1980] [0/0] create_env
    V0419 16:17:24.567000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source] TRACE starts_line /var/lib/workspace/recipes_source/torch_logs.py:39 in fn ()
    V0419 16:17:24.567000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source]         @torch.compile()
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source] TRACE starts_line /var/lib/workspace/recipes_source/torch_logs.py:41 in fn (fn)
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source]             z = x + y
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE LOAD_FAST x []
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE LOAD_FAST y [LazyVariableTracker()]
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE BINARY_ADD None [LazyVariableTracker(), LazyVariableTracker()]
    V0419 16:17:24.569000 139833938784896 torch/_dynamo/output_graph.py:1949] [0/0] create_graph_input L_x_ L['x']
    V0419 16:17:24.570000 139833938784896 torch/_dynamo/variables/builder.py:1873] [0/0] wrap_to_fake L['x'] (2, 2) StatefulSymbolicContext(dynamic_sizes=[<DimDynamic.STATIC: 2>, <DimDynamic.STATIC: 2>], constraint_sizes=[None, None], view_base_context=None, tensor_source=LocalSource(local_name='x', cell_or_freevar=False), shape_env_to_source_to_symbol_cache={}) <class 'torch.Tensor'>
    V0419 16:17:24.571000 139833938784896 torch/_dynamo/output_graph.py:1949] [0/0] create_graph_input L_y_ L['y']
    V0419 16:17:24.571000 139833938784896 torch/_dynamo/variables/builder.py:1873] [0/0] wrap_to_fake L['y'] (2, 2) StatefulSymbolicContext(dynamic_sizes=[<DimDynamic.STATIC: 2>, <DimDynamic.STATIC: 2>], constraint_sizes=[None, None], view_base_context=None, tensor_source=LocalSource(local_name='y', cell_or_freevar=False), shape_env_to_source_to_symbol_cache={}) <class 'torch.Tensor'>
    V0419 16:17:24.573000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE STORE_FAST z [TensorVariable()]
    V0419 16:17:24.573000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source] TRACE starts_line /var/lib/workspace/recipes_source/torch_logs.py:42 in fn (fn)
    V0419 16:17:24.573000 139833938784896 torch/_dynamo/symbolic_convert.py:699] [0/0] [__trace_source]             return z + 2
    V0419 16:17:24.574000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE LOAD_FAST z []
    V0419 16:17:24.574000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE LOAD_CONST 2 [TensorVariable()]
    V0419 16:17:24.574000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE BINARY_ADD None [TensorVariable(), ConstantVariable()]
    V0419 16:17:24.575000 139833938784896 torch/_dynamo/symbolic_convert.py:725] [0/0] TRACE RETURN_VALUE None [TensorVariable()]
    I0419 16:17:24.575000 139833938784896 torch/_dynamo/logging.py:55] [0/0] Step 1: torchdynamo done tracing fn (RETURN_VALUE)
    V0419 16:17:24.575000 139833938784896 torch/_dynamo/symbolic_convert.py:2267] [0/0] RETURN_VALUE triggered compile
    V0419 16:17:24.575000 139833938784896 torch/_dynamo/output_graph.py:870] [0/0] COMPILING GRAPH due to GraphCompileReason(reason='return_value', user_stack=[<FrameSummary file /var/lib/workspace/recipes_source/torch_logs.py, line 42 in fn>], graph_break=False)
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code] TRACED GRAPH
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]  ===== __compiled_fn_1 =====
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]  /opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py class GraphModule(torch.nn.Module):
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]     def forward(self, L_x_ : torch.Tensor, L_y_ : torch.Tensor):
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         l_x_ = L_x_
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         l_y_ = L_y_
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         # File: /var/lib/workspace/recipes_source/torch_logs.py:41 in fn, code: z = x + y
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         z = l_x_ + l_y_;  l_x_ = l_y_ = None
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         # File: /var/lib/workspace/recipes_source/torch_logs.py:42 in fn, code: return z + 2
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         add_1 = z + 2;  z = None
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         return (add_1,)
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code]         
    V0419 16:17:24.576000 139833938784896 torch/_dynamo/output_graph.py:1147] [0/0] [__graph_code] 
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] TRACED GRAPH
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph]  __compiled_fn_1 /opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py opcode         name    target                   args          kwargs
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] -------------  ------  -----------------------  ------------  --------
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] placeholder    l_x_    L_x_                     ()            {}
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] placeholder    l_y_    L_y_                     ()            {}
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] call_function  z       <built-in function add>  (l_x_, l_y_)  {}
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] call_function  add_1   <built-in function add>  (z, 2)        {}
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] output         output  output                   ((add_1,),)   {}
    V0419 16:17:24.578000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] 
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] TRACED GRAPH TENSOR SIZES
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] ===== __compiled_fn_1 =====
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] l_x_: (2, 2)
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] l_y_: (2, 2)
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] z: (2, 2)
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] add_1: (2, 2)
    V0419 16:17:24.579000 139833938784896 torch/_dynamo/output_graph.py:1154] [0/0] [__graph_sizes] 
    I0419 16:17:24.580000 139833938784896 torch/_dynamo/logging.py:55] [0/0] Step 2: calling compiler function inductor
    V0419 16:17:24.857000 139833938784896 torch/fx/experimental/symbolic_shapes.py:4119] [0/0] eval True == True [statically known]
    I0419 16:17:26.392000 139833938784896 torch/_dynamo/logging.py:55] [0/0] Step 2: done compiler function inductor
    I0419 16:17:26.393000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2806] [0/0] produce_guards
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['x'].size()[0] 2 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['x'].size()[1] 2 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['x'].stride()[0] 2 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['x'].stride()[1] 1 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['x'].storage_offset() 0 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['y'].size()[0] 2 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['y'].size()[1] 2 None
    V0419 16:17:26.394000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['y'].stride()[0] 2 None
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['y'].stride()[1] 1 None
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:2988] [0/0] track_symint L['y'].storage_offset() 0 None
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['x'].size()[0] == 2
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['x'].size()[1] == 2
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['x'].stride()[0] == 2
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['x'].stride()[1] == 1
    V0419 16:17:26.395000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['x'].storage_offset() == 0
    V0419 16:17:26.396000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['y'].size()[0] == 2
    V0419 16:17:26.396000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['y'].size()[1] == 2
    V0419 16:17:26.396000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['y'].stride()[0] == 2
    V0419 16:17:26.396000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['y'].stride()[1] == 1
    V0419 16:17:26.396000 139833938784896 torch/fx/experimental/symbolic_shapes.py:3138] [0/0] Skipping guard L['y'].storage_offset() == 0
    V0419 16:17:26.396000 139833938784896 torch/_dynamo/guards.py:1076] [0/0] [__guards] GUARDS:
    V0419 16:17:26.397000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] hasattr(L['x'], '_dynamo_dynamic_indices') == False           # z = x + y  # ar/lib/workspace/recipes_source/torch_logs.py:41 in fn
    V0419 16:17:26.397000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] hasattr(L['y'], '_dynamo_dynamic_indices') == False           # z = x + y  # ar/lib/workspace/recipes_source/torch_logs.py:41 in fn
    V0419 16:17:26.398000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] utils_device.CURRENT_DEVICE == None                           # _dynamo/output_graph.py:429 in init_ambient_guards
    V0419 16:17:26.398000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] ___check_current_backend(139828323920736)                     # _dynamo/output_graph.py:435 in init_ambient_guards
    V0419 16:17:26.399000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] check_tensor(L['x'], Tensor, DispatchKeySet(CUDA, BackendSelect, ADInplaceOrView, AutogradCUDA), torch.float32, device=0, requires_grad=False, size=[2, 2], stride=[2, 1])  # z = x + y  # ar/lib/workspace/recipes_source/torch_logs.py:41 in fn
    V0419 16:17:26.399000 139833938784896 torch/_dynamo/guards.py:1085] [0/0] [__guards] check_tensor(L['y'], Tensor, DispatchKeySet(CUDA, BackendSelect, ADInplaceOrView, AutogradCUDA), torch.float32, device=0, requires_grad=False, size=[2, 2], stride=[2, 1])  # z = x + y  # ar/lib/workspace/recipes_source/torch_logs.py:41 in fn
    ===================Traced Graph=========================
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] TRACED GRAPH
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph]  __compiled_fn_2 /opt/conda/envs/py_3.10/lib/python3.10/site-packages/torch/fx/_lazy_graph_module.py opcode         name    target                   args          kwargs
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] -------------  ------  -----------------------  ------------  --------
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] placeholder    l_x_    L_x_                     ()            {}
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] placeholder    l_y_    L_y_                     ()            {}
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] call_function  z       <built-in function add>  (l_x_, l_y_)  {}
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] call_function  add_1   <built-in function add>  (z, 2)        {}
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] output         output  output                   ((add_1,),)   {}
    V0419 16:17:26.412000 139833938784896 torch/_dynamo/output_graph.py:1153] [0/0] [__graph] 
    ===================Fusion Decisions=========================
    V0419 16:17:26.521000 139833938784896 torch/_inductor/scheduler.py:1683] [0/0] [__fusion] ===== attempting fusion (1/10): 1 nodes =====
    V0419 16:17:26.521000 139833938784896 torch/_inductor/scheduler.py:1885] [0/0] [__fusion] found 0 possible fusions
    V0419 16:17:26.521000 139833938784896 torch/_inductor/scheduler.py:1688] [0/0] [__fusion] completed fusion round (1/10): fused 1 nodes into 1 nodes
    V0419 16:17:26.521000 139833938784896 torch/_inductor/scheduler.py:1688] [0/0] [__fusion] 
    V0419 16:17:26.522000 139833938784896 torch/_inductor/scheduler.py:1695] [0/0] [__fusion] ===== fusion complete (1 iterations) =====
    ===================Output Code=========================
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] Output code: 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from ctypes import c_void_p, c_long
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import torch
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import math
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import random
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import os
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import tempfile
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from math import inf, nan
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch import device, empty_strided
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codecache import AsyncCompile
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] aten = torch.ops.aten
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] inductor_ops = torch.ops.inductor
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] async_compile = AsyncCompile()
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] # kernel path: /tmp/torchinductor_ci-user/uo/cuo4jq5rv33tz7sxi56izgwfdmzpddwoehlzqydza3nrvqhks73k.py
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] # Source Nodes: [add_1, z], Original ATen: [aten.add]
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] # add_1 => add_1
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] # z => add
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] triton_poi_fused_add_0 = async_compile.triton('triton_', '''
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton.language as tl
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor import triton_helpers, triton_heuristics
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.ir import ReductionHint, TileHint
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_helpers import libdevice, math as tl_math
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_heuristics import AutotuneHint
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.utils import instance_descriptor
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] @triton_heuristics.pointwise(
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     size_hints=[4], 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     filename=__file__,
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=())]},
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_0', 'mutated_arg_names': [], 'no_x_dim': False, 'backend_hash': '71289734499090ef6d56db411758fec09be6b197bd9c453d82346a1fa6f1185c'},
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     min_elem_per_thread=0
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] )
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] @triton.jit
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xnumel = 4
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xmask = xindex < xnumel
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     x0 = xindex
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x0), xmask)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp3 = 2.0
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp4 = tmp2 + tmp3
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp4, xmask)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] ''', device_str='cuda')
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton.language as tl
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_heuristics import grid, split_scan_grid, start_graph, end_graph
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] async_compile.wait(globals())
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] del async_compile
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] def call(args):
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     arg0_1, arg1_1 = args
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     args.clear()
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     assert_size_stride(arg0_1, (2, 2), (2, 1))
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     assert_size_stride(arg1_1, (2, 2), (2, 1))
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         torch.cuda.set_device(0)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         buf0 = empty_strided_cuda((2, 2), (2, 1), torch.float32)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         # Source Nodes: [add_1, z], Original ATen: [aten.add]
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         stream0 = get_raw_stream(0)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         triton_poi_fused_add_0.run(arg0_1, arg1_1, buf0, 4, grid=grid(4), stream=stream0)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         del arg0_1
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]         del arg1_1
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     return (buf0, )
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._inductor.utils import print_performance
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     arg0_1 = rand_strided((2, 2), (2, 1), device='cuda:0', dtype=torch.float32)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     arg1_1 = rand_strided((2, 2), (2, 1), device='cuda:0', dtype=torch.float32)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] if __name__ == "__main__":
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
    V0419 16:17:26.602000 139833938784896 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
    I0419 16:17:26.609000 139833938784896 torch/_inductor/graph.py:1273] [0/0] [__output_code] Output code written to: /tmp/torchinductor_ci-user/z7/cz7k62qkocovrtnbtnw5x2c7qehnffds37u6ccu3jhpfirmiy4lv.py
    ============================================




.. GENERATED FROM PYTHON SOURCE LINES 82-97

Conclusion
~~~~~~~~~~

In this tutorial we introduced the TORCH_LOGS environment variable and python API
by experimenting with a small number of the available logging options.
To view descriptions of all available options, run any python script
which imports torch and set TORCH_LOGS to "help".

Alternatively, you can view the `torch._logging documentation`_ to see
descriptions of all available logging options.

For more information on torch.compile, see the `torch.compile tutorial`_.

.. _torch._logging documentation: https://pytorch.org/docs/main/logging.html
.. _torch.compile tutorial: https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.197 seconds)


.. _sphx_glr_download_recipes_torch_logs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_logs.py <torch_logs.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_logs.ipynb <torch_logs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
