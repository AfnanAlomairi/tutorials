
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/t5_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_t5_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_t5_tutorial.py:


T5-Base Model for Summarization, Sentiment Classification, and Translation
==========================================================================

**Author**: `Pendo Abbo <pabbo@fb.com>`__, `Joe Cummings <jrcummings@fb.com>`__

.. GENERATED FROM PYTHON SOURCE LINES 10-40

Overview
 --------

 This tutorial demonstrates how to use a pre-trained T5 Model for summarization, sentiment classification, and
 translation tasks. We will demonstrate how to use the torchtext library to:

 1. Build a text pre-processing pipeline for a T5 model
 2. Instantiate a pre-trained T5 model with base configuration
 3. Read in the CNNDM, IMDB, and Multi30k datasets and pre-process their texts in preparation for the model
 4. Perform text summarization, sentiment classification, and translation

 .. note::
    This tutorial requires PyTorch 2.0.0 or later.

######################################################################
 Data Transformation
 -------------------

 The T5 model does not work with raw text. Instead, it requires the text to be transformed into numerical form
 in order to perform training and inference. The following transformations are required for the T5 model:

 1. Tokenize text
 2. Convert tokens into (integer) IDs
 3. Truncate the sequences to a specified maximum length
 4. Add end-of-sequence (EOS) and padding token IDs

 T5 uses a SentencePiece model for text tokenization. Below, we use a pre-trained SentencePiece model to build
 the text pre-processing pipeline using torchtext's T5Transform. Note that the transform supports both
 batched and non-batched text input (for example, one can either pass a single sentence or a list of sentences), however the T5 model expects the input to be batched.


.. GENERATED FROM PYTHON SOURCE LINES 40-55

.. code-block:: default


    from torchtext.models import T5Transform

    padding_idx = 0
    eos_idx = 1
    max_seq_len = 512
    t5_sp_model_path = "https://download.pytorch.org/models/text/t5_tokenizer_base.model"

    transform = T5Transform(
        sp_model_path=t5_sp_model_path,
        max_seq_len=max_seq_len,
        eos_idx=eos_idx,
        padding_idx=padding_idx,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/792k [00:00<?, ?B/s]
    100%|##########| 792k/792k [00:00<00:00, 17.6MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 56-63

Alternatively, we can also use the transform shipped with the pre-trained models that does all of the above out-of-the-box

.. code-block::

  from torchtext.models import T5_BASE_GENERATION
  transform = T5_BASE_GENERATION.transform()


.. GENERATED FROM PYTHON SOURCE LINES 66-74

Model Preparation
-----------------

torchtext provides SOTA pre-trained models that can be used directly for NLP tasks or fine-tuned on downstream tasks. Below
we use the pre-trained T5 model with standard base configuration to perform text summarization, sentiment classification, and
translation. For additional details on available pre-trained models, see `the torchtext documentation <https://pytorch.org/text/main/models.html>`__



.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: default

    from torchtext.models import T5_BASE_GENERATION


    t5_base = T5_BASE_GENERATION
    transform = t5_base.transform()
    model = t5_base.get_model()
    model.eval()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/text/t5.base.generation.v2.pt" to /var/lib/jenkins/.cache/torch/hub/checkpoints/t5.base.generation.v2.pt

      0%|          | 0.00/945M [00:00<?, ?B/s]
      1%|          | 6.12M/945M [00:00<00:15, 64.1MB/s]
      2%|1         | 15.8M/945M [00:00<00:11, 86.0MB/s]
      3%|2         | 25.1M/945M [00:00<00:10, 91.0MB/s]
      4%|3         | 33.8M/945M [00:00<00:10, 90.4MB/s]
      5%|4         | 42.7M/945M [00:00<00:10, 91.7MB/s]
      5%|5         | 51.9M/945M [00:00<00:10, 93.1MB/s]
      6%|6         | 61.2M/945M [00:00<00:09, 94.5MB/s]
      8%|7         | 70.9M/945M [00:00<00:09, 96.9MB/s]
      9%|8         | 80.5M/945M [00:00<00:09, 98.1MB/s]
     10%|9         | 89.9M/945M [00:01<00:09, 96.9MB/s]
     10%|#         | 99.1M/945M [00:01<00:09, 93.8MB/s]
     12%|#1        | 109M/945M [00:01<00:09, 96.2MB/s] 
     13%|#2        | 119M/945M [00:01<00:08, 98.1MB/s]
     14%|#3        | 128M/945M [00:01<00:08, 99.3MB/s]
     15%|#4        | 138M/945M [00:01<00:08, 99.4MB/s]
     16%|#5        | 147M/945M [00:01<00:08, 98.1MB/s]
     17%|#6        | 157M/945M [00:01<00:08, 99.1MB/s]
     18%|#7        | 167M/945M [00:01<00:08, 99.0MB/s]
     19%|#8        | 176M/945M [00:01<00:08, 99.7MB/s]
     20%|#9        | 186M/945M [00:02<00:08, 98.6MB/s]
     21%|##        | 195M/945M [00:02<00:07, 99.1MB/s]
     22%|##1       | 205M/945M [00:02<00:07, 99.9MB/s]
     23%|##2       | 215M/945M [00:02<00:07, 98.7MB/s]
     24%|##3       | 224M/945M [00:02<00:07, 98.7MB/s]
     25%|##4       | 233M/945M [00:02<00:07, 96.1MB/s]
     26%|##5       | 243M/945M [00:02<00:07, 96.7MB/s]
     27%|##6       | 252M/945M [00:02<00:07, 96.4MB/s]
     28%|##7       | 262M/945M [00:02<00:07, 97.9MB/s]
     29%|##8       | 271M/945M [00:02<00:07, 98.7MB/s]
     30%|##9       | 281M/945M [00:03<00:07, 95.3MB/s]
     31%|###       | 290M/945M [00:03<00:07, 94.5MB/s]
     32%|###1      | 300M/945M [00:03<00:07, 96.4MB/s]
     33%|###2      | 310M/945M [00:03<00:06, 98.5MB/s]
     34%|###3      | 319M/945M [00:03<00:06, 98.1MB/s]
     35%|###4      | 329M/945M [00:03<00:06, 99.6MB/s]
     36%|###5      | 338M/945M [00:03<00:06, 99.0MB/s]
     37%|###6      | 348M/945M [00:03<00:06, 98.4MB/s]
     38%|###7      | 357M/945M [00:03<00:06, 98.6MB/s]
     39%|###8      | 367M/945M [00:03<00:06, 98.6MB/s]
     40%|###9      | 376M/945M [00:04<00:06, 98.5MB/s]
     41%|####      | 385M/945M [00:04<00:05, 98.2MB/s]
     42%|####1     | 395M/945M [00:04<00:05, 99.1MB/s]
     43%|####2     | 405M/945M [00:04<00:05, 99.6MB/s]
     44%|####3     | 414M/945M [00:04<00:05, 99.9MB/s]
     45%|####4     | 424M/945M [00:04<00:05, 99.9MB/s]
     46%|####5     | 433M/945M [00:04<00:05, 98.9MB/s]
     47%|####6     | 443M/945M [00:04<00:05, 98.9MB/s]
     48%|####7     | 453M/945M [00:04<00:05, 99.7MB/s]
     49%|####8     | 462M/945M [00:04<00:05, 99.3MB/s]
     50%|####9     | 472M/945M [00:05<00:05, 98.8MB/s]
     51%|#####     | 481M/945M [00:05<00:04, 98.9MB/s]
     52%|#####1    | 490M/945M [00:05<00:04, 98.4MB/s]
     53%|#####2    | 500M/945M [00:05<00:04, 99.0MB/s]
     54%|#####3    | 510M/945M [00:05<00:04, 99.5MB/s]
     55%|#####4    | 519M/945M [00:05<00:04, 98.6MB/s]
     56%|#####5    | 529M/945M [00:05<00:04, 97.2MB/s]
     57%|#####6    | 538M/945M [00:05<00:04, 94.9MB/s]
     58%|#####7    | 548M/945M [00:05<00:04, 96.6MB/s]
     59%|#####8    | 557M/945M [00:05<00:04, 97.0MB/s]
     60%|#####9    | 566M/945M [00:06<00:04, 96.6MB/s]
     61%|######    | 576M/945M [00:06<00:03, 97.3MB/s]
     62%|######1   | 585M/945M [00:06<00:03, 98.5MB/s]
     63%|######2   | 595M/945M [00:06<00:03, 99.4MB/s]
     64%|######3   | 604M/945M [00:06<00:03, 97.4MB/s]
     65%|######5   | 614M/945M [00:06<00:03, 98.5MB/s]
     66%|######6   | 624M/945M [00:06<00:03, 99.3MB/s]
     67%|######7   | 633M/945M [00:06<00:03, 94.2MB/s]
     68%|######8   | 642M/945M [00:06<00:03, 93.9MB/s]
     69%|######8   | 652M/945M [00:07<00:03, 95.3MB/s]
     70%|#######   | 662M/945M [00:07<00:03, 97.6MB/s]
     71%|#######1  | 671M/945M [00:07<00:02, 99.0MB/s]
     72%|#######2  | 681M/945M [00:07<00:02, 96.6MB/s]
     73%|#######3  | 690M/945M [00:07<00:02, 97.9MB/s]
     74%|#######4  | 700M/945M [00:07<00:02, 99.3MB/s]
     75%|#######5  | 710M/945M [00:07<00:02, 100MB/s] 
     76%|#######6  | 720M/945M [00:07<00:02, 101MB/s]
     77%|#######7  | 729M/945M [00:07<00:02, 100MB/s]
     78%|#######8  | 739M/945M [00:07<00:02, 99.9MB/s]
     79%|#######9  | 749M/945M [00:08<00:02, 100MB/s] 
     80%|########  | 758M/945M [00:08<00:01, 100MB/s]
     81%|########1 | 768M/945M [00:08<00:01, 101MB/s]
     82%|########2 | 778M/945M [00:08<00:01, 101MB/s]
     83%|########3 | 787M/945M [00:08<00:01, 100MB/s]
     84%|########4 | 797M/945M [00:08<00:01, 95.9MB/s]
     85%|########5 | 806M/945M [00:08<00:01, 96.2MB/s]
     86%|########6 | 815M/945M [00:08<00:01, 96.6MB/s]
     87%|########7 | 825M/945M [00:08<00:01, 96.4MB/s]
     88%|########8 | 834M/945M [00:08<00:01, 98.3MB/s]
     89%|########9 | 844M/945M [00:09<00:01, 98.6MB/s]
     90%|######### | 853M/945M [00:09<00:00, 99.1MB/s]
     91%|#########1| 863M/945M [00:09<00:00, 97.2MB/s]
     92%|#########2| 872M/945M [00:09<00:00, 94.4MB/s]
     93%|#########3| 882M/945M [00:09<00:00, 96.4MB/s]
     94%|#########4| 891M/945M [00:09<00:00, 95.9MB/s]
     95%|#########5| 901M/945M [00:09<00:00, 98.0MB/s]
     96%|#########6| 910M/945M [00:09<00:00, 98.1MB/s]
     97%|#########7| 920M/945M [00:09<00:00, 98.5MB/s]
     98%|#########8| 929M/945M [00:09<00:00, 98.7MB/s]
     99%|#########9| 939M/945M [00:10<00:00, 79.9MB/s]
    100%|##########| 945M/945M [00:10<00:00, 97.1MB/s]

    T5Model(
      (token_embeddings): Embedding(32128, 768, padding_idx=0)
      (encoder): T5Encoder(
        (token_embeddings): Embedding(32128, 768, padding_idx=0)
        (layers): ModuleList(
          (0): T5Layer(
            (self_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
              (relative_attention_bias): Embedding(32, 12)
            )
            (linear1): Linear(in_features=768, out_features=3072, bias=False)
            (linear2): Linear(in_features=3072, out_features=768, bias=False)
            (norm1): T5LayerNorm()
            (norm2): T5LayerNorm()
            (dropout1): Dropout(p=0.0, inplace=False)
            (dropout2): Dropout(p=0.0, inplace=False)
            (dropout3): Dropout(p=0.0, inplace=False)
          )
          (1-11): 11 x T5Layer(
            (self_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
            )
            (linear1): Linear(in_features=768, out_features=3072, bias=False)
            (linear2): Linear(in_features=3072, out_features=768, bias=False)
            (norm1): T5LayerNorm()
            (norm2): T5LayerNorm()
            (dropout1): Dropout(p=0.0, inplace=False)
            (dropout2): Dropout(p=0.0, inplace=False)
            (dropout3): Dropout(p=0.0, inplace=False)
          )
        )
        (norm): T5LayerNorm()
        (dropout1): Dropout(p=0.0, inplace=False)
        (dropout2): Dropout(p=0.0, inplace=False)
      )
      (decoder): T5Decoder(
        (layers): ModuleList(
          (0): T5Layer(
            (self_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
              (relative_attention_bias): Embedding(32, 12)
            )
            (cross_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
            )
            (norm3): T5LayerNorm()
            (dropout4): Dropout(p=0.0, inplace=False)
            (linear1): Linear(in_features=768, out_features=3072, bias=False)
            (linear2): Linear(in_features=3072, out_features=768, bias=False)
            (norm1): T5LayerNorm()
            (norm2): T5LayerNorm()
            (dropout1): Dropout(p=0.0, inplace=False)
            (dropout2): Dropout(p=0.0, inplace=False)
            (dropout3): Dropout(p=0.0, inplace=False)
          )
          (1-11): 11 x T5Layer(
            (self_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
            )
            (cross_attn): T5MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=False)
            )
            (norm3): T5LayerNorm()
            (dropout4): Dropout(p=0.0, inplace=False)
            (linear1): Linear(in_features=768, out_features=3072, bias=False)
            (linear2): Linear(in_features=3072, out_features=768, bias=False)
            (norm1): T5LayerNorm()
            (norm2): T5LayerNorm()
            (dropout1): Dropout(p=0.0, inplace=False)
            (dropout2): Dropout(p=0.0, inplace=False)
            (dropout3): Dropout(p=0.0, inplace=False)
          )
        )
        (norm): T5LayerNorm()
        (dropout1): Dropout(p=0.0, inplace=False)
        (dropout2): Dropout(p=0.0, inplace=False)
      )
      (lm_head): Linear(in_features=768, out_features=32128, bias=False)
    )



.. GENERATED FROM PYTHON SOURCE LINES 84-93

GenerationUtils
------------------

We can use torchtext's ``GenerationUtils`` to produce an output sequence based on the input sequence provided. This calls on the
model's encoder and decoder, and iteratively expands the decoded sequences until the end-of-sequence token is generated
for all sequences in the batch. The ``generate`` method shown below uses greedy search to generate the sequences. Beam search and
other decoding strategies are also supported.



.. GENERATED FROM PYTHON SOURCE LINES 93-98

.. code-block:: default

    from torchtext.prototype.generate import GenerationUtils

    sequence_generator = GenerationUtils(model)









.. GENERATED FROM PYTHON SOURCE LINES 99-118

Datasets
--------
torchtext provides several standard NLP datasets. For a complete list, refer to the documentation
at https://pytorch.org/text/stable/datasets.html. These datasets are built using composable torchdata
datapipes and hence support standard flow-control and mapping/transformation using user defined
functions and transforms.

Below we demonstrate how to pre-process the CNNDM dataset to include the prefix necessary for the
model to indentify the task it is performing. The CNNDM dataset has a train, validation, and test
split. Below we demo on the test split.

The T5 model uses the prefix "summarize" for text summarization. For more information on task
prefixes, please visit Appendix D of the `T5 Paper <https://arxiv.org/pdf/1910.10683.pdf>`__

.. note::
      Using datapipes is still currently subject to a few caveats. If you wish
      to extend this example to include shuffling, multi-processing, or
      distributed learning, please see :ref:`this note <datapipes_warnings>`
      for further instructions.

.. GENERATED FROM PYTHON SOURCE LINES 118-138

.. code-block:: default


    from functools import partial

    from torch.utils.data import DataLoader
    from torchtext.datasets import CNNDM

    cnndm_batch_size = 5
    cnndm_datapipe = CNNDM(split="test")
    task = "summarize"


    def apply_prefix(task, x):
        return f"{task}: " + x[0], x[1]


    cnndm_datapipe = cnndm_datapipe.map(partial(apply_prefix, task))
    cnndm_datapipe = cnndm_datapipe.batch(cnndm_batch_size)
    cnndm_datapipe = cnndm_datapipe.rows2columnar(["article", "abstract"])
    cnndm_dataloader = DataLoader(cnndm_datapipe, shuffle=True, batch_size=None)








.. GENERATED FROM PYTHON SOURCE LINES 139-157

Alternately, we can also use batched API, for example, apply the prefix on the whole batch:

.. code-block::

  def batch_prefix(task, x):
   return {
       "article": [f'{task}: ' + y for y in x["article"]],
       "abstract": x["abstract"]
   }

  cnndm_batch_size = 5
  cnndm_datapipe = CNNDM(split="test")
  task = 'summarize'

  cnndm_datapipe = cnndm_datapipe.batch(cnndm_batch_size).rows2columnar(["article", "abstract"])
  cnndm_datapipe = cnndm_datapipe.map(partial(batch_prefix, task))
  cnndm_dataloader = DataLoader(cnndm_datapipe, batch_size=None)


.. GENERATED FROM PYTHON SOURCE LINES 159-165

We can also load the IMDB dataset, which will be used to demonstrate sentiment classification using the T5 model.
This dataset has a train and test split. Below we demo on the test split.

The T5 model was trained on the SST2 dataset (also available in torchtext) for sentiment classification using the
prefix "sst2 sentence". Therefore, we will use this prefix to perform sentiment classification on the IMDB dataset.


.. GENERATED FROM PYTHON SOURCE LINES 165-184

.. code-block:: default


    from torchtext.datasets import IMDB

    imdb_batch_size = 3
    imdb_datapipe = IMDB(split="test")
    task = "sst2 sentence"
    labels = {"1": "negative", "2": "positive"}


    def process_labels(labels, x):
        return x[1], labels[str(x[0])]


    imdb_datapipe = imdb_datapipe.map(partial(process_labels, labels))
    imdb_datapipe = imdb_datapipe.map(partial(apply_prefix, task))
    imdb_datapipe = imdb_datapipe.batch(imdb_batch_size)
    imdb_datapipe = imdb_datapipe.rows2columnar(["text", "label"])
    imdb_dataloader = DataLoader(imdb_datapipe, batch_size=None)








.. GENERATED FROM PYTHON SOURCE LINES 185-189

Finally, we can also load the Multi30k dataset to demonstrate English to German translation using the T5 model.
This dataset has a train, validation, and test split. Below we demo on the test split.

The T5 model uses the prefix "translate English to German" for this task.

.. GENERATED FROM PYTHON SOURCE LINES 189-202

.. code-block:: default


    from torchtext.datasets import Multi30k

    multi_batch_size = 5
    language_pair = ("en", "de")
    multi_datapipe = Multi30k(split="test", language_pair=language_pair)
    task = "translate English to German"

    multi_datapipe = multi_datapipe.map(partial(apply_prefix, task))
    multi_datapipe = multi_datapipe.batch(multi_batch_size)
    multi_datapipe = multi_datapipe.rows2columnar(["english", "german"])
    multi_dataloader = DataLoader(multi_datapipe, batch_size=None)








.. GENERATED FROM PYTHON SOURCE LINES 203-209

Generate Summaries
------------------

We can put all of the components together to generate summaries on the first batch of articles in the CNNDM test set
using a beam size of 1.


.. GENERATED FROM PYTHON SOURCE LINES 209-225

.. code-block:: default


    batch = next(iter(cnndm_dataloader))
    input_text = batch["article"]
    target = batch["abstract"]
    beam_size = 1

    model_input = transform(input_text)
    model_output = sequence_generator.generate(model_input, eos_idx=eos_idx, num_beams=beam_size)
    output_text = transform.decode(model_output.tolist())

    for i in range(cnndm_batch_size):
        print(f"Example {i+1}:\n")
        print(f"prediction: {output_text[i]}\n")
        print(f"target: {target[i]}\n\n")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    `max_length` was not specified. Defaulting to 256 tokens.
    Example 1:

    prediction: alleged horse thief, 30-year-old Francis Pusok, was chased by eight deputies . they jolted him with a stun gun and he fell to the ground . he tried to get up but was stunned with a Taser . he was beaten in the groin and kicked between the legs .

    target: Film crew was following deputies chase horse thief in California desert . Man falls off his horse, two deputies stun him with their Tasers . They then kick him in groin and head repeatedly before others join them . In total, eight deputies surround the man kicking him for two minutes . San Bernardino County sheriff has called for investigation into the incident .


    Example 2:

    prediction: Libby Jane Wilson was enjoying a day out at a play park when she was attacked . the two-year-old was savaged by a Jack Russell, which bit her face . her father, who works as a floor layer, heard her screaming and kicked the dog away from her . the dog's owner called the dog back and fled the scene .

    target: Libby Jane Wilson was playing in Yarrow Valley Country Park in Chorley . Was attacked by a Jack Russell dog while she climbed through a tunnel . The pet bit her face leaving puncture marks and narrowly missing her eye . The dog owner called the pet away from the toddler but then fled the scene .


    Example 3:

    prediction: former England star Kevin Pietersen injured his hand during match against Oxford . the former england batsman was taken off as a precaution . he did not return after tea and is hoping to win back his test place .

    target: England star taken off as a precaution after being hit on the hand . Kevin Pietersen was fielding for Surrey at leg slip against Oxford MCCU . A sweep off Gareth Batty's bowling caught the top edge and struck KP . Pietersen has returned to Surrey to fight for his England place .


    Example 4:

    prediction: the nest was discovered at Karoola, north east of Launceston in Tasmania . it took two days to unearth and four men to carry it out of the bush . experts believe it's the largest subterranean European wasp nest ever discovered with up to 100,000 wasps could have been living inside .

    target: A 12-year-old boy found the world's largest European wasp nest ever found . Jordan Waddingham made $20 from his mum for his startling discovery . It measures at one metre tall and a circumference of three metres . The nest was destroyed overnight when the wasps were dormant . It took two days to remove the 90-kilogram nest from the ground . The nest is being displayed at the Queen Victoria Museum and Art Gallery .


    Example 5:

    prediction: private poll put the conservatives on course to retain the seat . but a poll in february, heavily publicised by the party, put him on course to win . but a spokesman for the party says the show would go on without him .

    target: Nigel Farage has vowed to stand down if he loses in Thanet South . A private poll by Ukip has put the Tories on course to retain the seat . But Ukip figures insist the party would carry on if Mr Farage left . MEP Diane James said 'there are people there waiting' to take over .






.. GENERATED FROM PYTHON SOURCE LINES 226-288

Summarization Output (Might vary since we shuffle the dataloader)
--------------------

.. code-block::

   Example 1:

   prediction: the 24-year-old has been tattooed for over a decade . he has landed in australia
   to start work on a new campaign . he says he is 'taking it in your stride' to be honest .

   target: London-based model Stephen James Hendry famed for his full body tattoo . The supermodel
   is in Sydney for a new modelling campaign . Australian fans understood to have already located
   him at his hotel . The 24-year-old heartthrob is recently single .


   Example 2:

   prediction: a stray pooch has used up at least three of her own after being hit by a
   car and buried in a field . the dog managed to stagger to a nearby farm, dirt-covered
   and emaciated, where she was found . she suffered a dislocated jaw, leg injuries and a
   caved-in sinus cavity -- and still requires surgery to help her breathe .

   target: Theia, a bully breed mix, was apparently hit by a car, whacked with a hammer
   and buried in a field . "She's a true miracle dog and she deserves a good life," says
   Sara Mellado, who is looking for a home for Theia .


   Example 3:

   prediction: mohammad Javad Zarif arrived in Iran on a sunny friday morning . he has gone
   a long way to bring Iran in from the cold and allow it to rejoin the international
   community . but there are some facts about him that are less well-known .

   target: Mohammad Javad Zarif has spent more time with John Kerry than any other
   foreign minister . He once participated in a takeover of the Iranian Consulate in San
   Francisco . The Iranian foreign minister tweets in English .


   Example 4:

   prediction: five americans were monitored for three weeks after being exposed to Ebola in
   west africa . one of the five had a heart-related issue and has been discharged but hasn't
   left the area . they are clinicians for Partners in Health, a Boston-based aid group .

   target: 17 Americans were exposed to the Ebola virus while in Sierra Leone in March .
   Another person was diagnosed with the disease and taken to hospital in Maryland .
   National Institutes of Health says the patient is in fair condition after weeks of
   treatment .


   Example 5:

   prediction: the student was identified during an investigation by campus police and
   the office of student affairs . he admitted to placing the noose on the tree early
   Wednesday morning . the incident is one of several recent racist events to affect
   college students .

   target: Student is no longer on Duke University campus and will face disciplinary
   review . School officials identified student during investigation and the person
   admitted to hanging the noose, Duke says . The noose, made of rope, was discovered on
   campus about 2 a.m.


.. GENERATED FROM PYTHON SOURCE LINES 291-297

Generate Sentiment Classifications
----------------------------------

Similarly, we can use the model to generate sentiment classifications on the first batch of reviews from the IMDB test set
using a beam size of 1.


.. GENERATED FROM PYTHON SOURCE LINES 297-314

.. code-block:: default


    batch = next(iter(imdb_dataloader))
    input_text = batch["text"]
    target = batch["label"]
    beam_size = 1

    model_input = transform(input_text)
    model_output = sequence_generator.generate(model_input, eos_idx=eos_idx, num_beams=beam_size)
    output_text = transform.decode(model_output.tolist())

    for i in range(imdb_batch_size):
        print(f"Example {i+1}:\n")
        print(f"input_text: {input_text[i]}\n")
        print(f"prediction: {output_text[i]}\n")
        print(f"target: {target[i]}\n\n")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    `max_length` was not specified. Defaulting to 256 tokens.
    Example 1:

    input_text: sst2 sentence: I love sci-fi and am willing to put up with a lot. Sci-fi movies/TV are usually underfunded, under-appreciated and misunderstood. I tried to like this, I really did, but it is to good TV sci-fi as Babylon 5 is to Star Trek (the original). Silly prosthetics, cheap cardboard sets, stilted dialogues, CG that doesn't match the background, and painfully one-dimensional characters cannot be overcome with a 'sci-fi' setting. (I'm sure there are those of you out there who think Babylon 5 is good sci-fi TV. It's not. It's clichéd and uninspiring.) While US viewers might like emotion and character development, sci-fi is a genre that does not take itself seriously (cf. Star Trek). It may treat important issues, yet not as a serious philosophy. It's really difficult to care about the characters here as they are not simply foolish, just missing a spark of life. Their actions and reactions are wooden and predictable, often painful to watch. The makers of Earth KNOW it's rubbish as they have to always say "Gene Roddenberry's Earth..." otherwise people would not continue watching. Roddenberry's ashes must be turning in their orbit as this dull, cheap, poorly edited (watching it without advert breaks really brings this home) trudging Trabant of a show lumbers into space. Spoiler. So, kill off a main character. And then bring him back as another actor. Jeeez! Dallas all over again.

    prediction: negative

    target: negative


    Example 2:

    input_text: sst2 sentence: Worth the entertainment value of a rental, especially if you like action movies. This one features the usual car chases, fights with the great Van Damme kick style, shooting battles with the 40 shell load shotgun, and even terrorist style bombs. All of this is entertaining and competently handled but there is nothing that really blows you away if you've seen your share before.<br /><br />The plot is made interesting by the inclusion of a rabbit, which is clever but hardly profound. Many of the characters are heavily stereotyped -- the angry veterans, the terrified illegal aliens, the crooked cops, the indifferent feds, the bitchy tough lady station head, the crooked politician, the fat federale who looks like he was typecast as the Mexican in a Hollywood movie from the 1940s. All passably acted but again nothing special.<br /><br />I thought the main villains were pretty well done and fairly well acted. By the end of the movie you certainly knew who the good guys were and weren't. There was an emotional lift as the really bad ones got their just deserts. Very simplistic, but then you weren't expecting Hamlet, right? The only thing I found really annoying was the constant cuts to VDs daughter during the last fight scene.<br /><br />Not bad. Not good. Passable 4.

    prediction: positive

    target: negative


    Example 3:

    input_text: sst2 sentence: its a totally average film with a few semi-alright action sequences that make the plot seem a little better and remind the viewer of the classic van dam films. parts of the plot don't make sense and seem to be added in to use up time. the end plot is that of a very basic type that doesn't leave the viewer guessing and any twists are obvious from the beginning. the end scene with the flask backs don't make sense as they are added in and seem to have little relevance to the history of van dam's character. not really worth watching again, bit disappointed in the end production, even though it is apparent it was shot on a low budget certain shots and sections in the film are of poor directed quality

    prediction: a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes a pound of carbon nanotubes

    target: negative






.. GENERATED FROM PYTHON SOURCE LINES 315-382

Sentiment Output
----------------

::

   Example 1:

   input_text: sst2 sentence: I love sci-fi and am willing to put up with a lot. Sci-fi
   movies/TV are usually underfunded, under-appreciated and misunderstood. I tried to like
   this, I really did, but it is to good TV sci-fi as Babylon 5 is to Star Trek (the original).
   Silly prosthetics, cheap cardboard sets, stilted dialogues, CG that doesn't match the
   background, and painfully one-dimensional characters cannot be overcome with a 'sci-fi'
   setting. (I'm sure there are those of you out there who think Babylon 5 is good sci-fi TV.
   It's not. It's clichéd and uninspiring.) While US viewers might like emotion and character
   development, sci-fi is a genre that does not take itself seriously (cf. Star Trek). It may
   treat important issues, yet not as a serious philosophy. It's really difficult to care about
   the characters here as they are not simply foolish, just missing a spark of life. Their
   actions and reactions are wooden and predictable, often painful to watch. The makers of Earth
   KNOW it's rubbish as they have to always say "Gene Roddenberry's Earth..." otherwise people
   would not continue watching. Roddenberry's ashes must be turning in their orbit as this dull,
   cheap, poorly edited (watching it without advert breaks really brings this home) trudging
   Trabant of a show lumbers into space. Spoiler. So, kill off a main character. And then bring
   him back as another actor. Jeeez. Dallas all over again.

   prediction: negative

   target: negative


   Example 2:

   input_text: sst2 sentence: Worth the entertainment value of a rental, especially if you like
   action movies. This one features the usual car chases, fights with the great Van Damme kick
   style, shooting battles with the 40 shell load shotgun, and even terrorist style bombs. All
   of this is entertaining and competently handled but there is nothing that really blows you
   away if you've seen your share before.<br /><br />The plot is made interesting by the
   inclusion of a rabbit, which is clever but hardly profound. Many of the characters are
   heavily stereotyped -- the angry veterans, the terrified illegal aliens, the crooked cops,
   the indifferent feds, the bitchy tough lady station head, the crooked politician, the fat
   federale who looks like he was typecast as the Mexican in a Hollywood movie from the 1940s.
   All passably acted but again nothing special.<br /><br />I thought the main villains were
   pretty well done and fairly well acted. By the end of the movie you certainly knew who the
   good guys were and weren't. There was an emotional lift as the really bad ones got their just
   deserts. Very simplistic, but then you weren't expecting Hamlet, right? The only thing I found
   really annoying was the constant cuts to VDs daughter during the last fight scene.<br /><br />
   Not bad. Not good. Passable 4.

   prediction: positive

   target: negative


   Example 3:

   input_text: sst2 sentence: its a totally average film with a few semi-alright action sequences
   that make the plot seem a little better and remind the viewer of the classic van dam films.
   parts of the plot don't make sense and seem to be added in to use up time. the end plot is that
   of a very basic type that doesn't leave the viewer guessing and any twists are obvious from the
   beginning. the end scene with the flask backs don't make sense as they are added in and seem to
   have little relevance to the history of van dam's character. not really worth watching again,
   bit disappointed in the end production, even though it is apparent it was shot on a low budget
   certain shots and sections in the film are of poor directed quality.

   prediction: negative

   target: negative


.. GENERATED FROM PYTHON SOURCE LINES 385-391

Generate Translations
---------------------

Finally, we can also use the model to generate English to German translations on the first batch of examples from the Multi30k
test set.


.. GENERATED FROM PYTHON SOURCE LINES 391-407

.. code-block:: default


    batch = next(iter(multi_dataloader))
    input_text = batch["english"]
    target = batch["german"]

    model_input = transform(input_text)
    model_output = sequence_generator.generate(model_input, eos_idx=eos_idx, num_beams=beam_size)
    output_text = transform.decode(model_output.tolist())

    for i in range(multi_batch_size):
        print(f"Example {i+1}:\n")
        print(f"input_text: {input_text[i]}\n")
        print(f"prediction: {output_text[i]}\n")
        print(f"target: {target[i]}\n\n")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    `max_length` was not specified. Defaulting to 256 tokens.
    Example 1:

    input_text: translate English to German: A man in an orange hat starring at something.

    prediction: Ein Mann in einem orangen Hut, der an etwas schaut.

    target: Ein Mann mit einem orangefarbenen Hut, der etwas anstarrt.


    Example 2:

    input_text: translate English to German: A Boston Terrier is running on lush green grass in front of a white fence.

    prediction: Ein Boston Terrier läuft auf üppigem grünem Gras vor einem weißen Zaun.

    target: Ein Boston Terrier läuft über saftig-grünes Gras vor einem weißen Zaun.


    Example 3:

    input_text: translate English to German: A girl in karate uniform breaking a stick with a front kick.

    prediction: Ein Mädchen in Karate-Uniform bricht einen Stöck mit einem Frontkick.

    target: Ein Mädchen in einem Karateanzug bricht einen Stock mit einem Tritt.


    Example 4:

    input_text: translate English to German: Five people wearing winter jackets and helmets stand in the snow, with snowmobiles in the background.

    prediction: Fünf Menschen mit Winterjacke und Helm stehen im Schnee, Schneemobilen im Hintergrund.

    target: Fünf Leute in Winterjacken und mit Helmen stehen im Schnee mit Schneemobilen im Hintergrund.


    Example 5:

    input_text: translate English to German: People are fixing the roof of a house.

    prediction: Die Menschen befestigen das Dach eines Hauses.

    target: Leute Reparieren das Dach eines Hauses.






.. GENERATED FROM PYTHON SOURCE LINES 408-457

Translation Output
------------------

::

   Example 1:

   input_text: translate English to German: A man in an orange hat starring at something.

   prediction: Ein Mann in einem orangen Hut, der an etwas schaut.

   target: Ein Mann mit einem orangefarbenen Hut, der etwas anstarrt.


   Example 2:

   input_text: translate English to German: A Boston Terrier is running on lush green grass in front of a white fence.

   prediction: Ein Boston Terrier läuft auf üppigem grünem Gras vor einem weißen Zaun.

   target: Ein Boston Terrier läuft über saftig-grünes Gras vor einem weißen Zaun.


   Example 3:

   input_text: translate English to German: A girl in karate uniform breaking a stick with a front kick.

   prediction: Ein Mädchen in Karate-Uniform bricht einen Stöck mit einem Frontkick.

   target: Ein Mädchen in einem Karateanzug bricht ein Brett mit einem Tritt.


   Example 4:

   input_text: translate English to German: Five people wearing winter jackets and helmets stand in the snow, with snowmobiles in the background.

   prediction: Fünf Menschen mit Winterjacken und Helmen stehen im Schnee, mit Schneemobilen im Hintergrund.

   target: Fünf Leute in Winterjacken und mit Helmen stehen im Schnee mit Schneemobilen im Hintergrund.


   Example 5:

   input_text: translate English to German: People are fixing the roof of a house.

   prediction: Die Leute fixieren das Dach eines Hauses.

   target: Leute Reparieren das Dach eines Hauses.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  53.397 seconds)


.. _sphx_glr_download_beginner_t5_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: t5_tutorial.py <t5_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: t5_tutorial.ipynb <t5_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
