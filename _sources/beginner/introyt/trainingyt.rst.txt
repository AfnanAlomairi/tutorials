
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:27, 301933.57it/s]
      0%|          | 65536/26421880 [00:00<01:28, 296946.56it/s]
      0%|          | 131072/26421880 [00:00<01:01, 430457.14it/s]
      1%|          | 196608/26421880 [00:00<00:53, 492758.89it/s]
      2%|1         | 425984/26421880 [00:00<00:24, 1057320.93it/s]
      2%|2         | 557056/26421880 [00:00<00:23, 1097344.06it/s]
      3%|2         | 720896/26421880 [00:00<00:21, 1219031.93it/s]
      3%|3         | 884736/26421880 [00:00<00:19, 1298817.30it/s]
      4%|4         | 1081344/26421880 [00:01<00:17, 1442851.24it/s]
      5%|4         | 1245184/26421880 [00:01<00:17, 1451807.97it/s]
      5%|5         | 1441792/26421880 [00:01<00:16, 1545860.52it/s]
      6%|6         | 1638400/26421880 [00:01<00:15, 1608820.84it/s]
      7%|6         | 1802240/26421880 [00:01<00:15, 1569456.34it/s]
      8%|7         | 1998848/26421880 [00:01<00:15, 1627447.36it/s]
      8%|8         | 2228224/26421880 [00:01<00:13, 1752716.35it/s]
      9%|9         | 2424832/26421880 [00:01<00:13, 1756341.89it/s]
     10%|9         | 2621440/26421880 [00:01<00:13, 1758880.37it/s]
     11%|#         | 2818048/26421880 [00:02<00:13, 1761309.26it/s]
     12%|#1        | 3047424/26421880 [00:02<00:12, 1845359.29it/s]
     12%|#2        | 3244032/26421880 [00:02<00:12, 1822390.91it/s]
     13%|#3        | 3440640/26421880 [00:02<00:12, 1805972.99it/s]
     14%|#3        | 3670016/26421880 [00:02<00:12, 1878083.03it/s]
     15%|#4        | 3899392/26421880 [00:02<00:11, 1928425.99it/s]
     16%|#5        | 4096000/26421880 [00:02<00:11, 1884738.55it/s]
     16%|#6        | 4325376/26421880 [00:02<00:11, 1933179.65it/s]
     17%|#7        | 4554752/26421880 [00:02<00:11, 1966775.79it/s]
     18%|#8        | 4784128/26421880 [00:03<00:10, 1991046.78it/s]
     19%|#8        | 5013504/26421880 [00:03<00:10, 2007453.60it/s]
     20%|#9        | 5242880/26421880 [00:03<00:10, 2018850.14it/s]
     21%|##        | 5472256/26421880 [00:03<00:10, 2030631.33it/s]
     22%|##1       | 5701632/26421880 [00:03<00:10, 2038896.38it/s]
     22%|##2       | 5931008/26421880 [00:03<00:10, 2044819.24it/s]
     23%|##3       | 6160384/26421880 [00:03<00:09, 2052890.30it/s]
     24%|##4       | 6389760/26421880 [00:03<00:09, 2056396.38it/s]
     25%|##5       | 6619136/26421880 [00:03<00:09, 2059884.05it/s]
     26%|##5       | 6848512/26421880 [00:04<00:09, 2059698.43it/s]
     27%|##6       | 7077888/26421880 [00:04<00:09, 2058020.93it/s]
     28%|##7       | 7307264/26421880 [00:04<00:09, 2056907.10it/s]
     29%|##8       | 7536640/26421880 [00:04<00:09, 2055974.16it/s]
     30%|##9       | 7798784/26421880 [00:04<00:08, 2131990.52it/s]
     30%|###       | 8028160/26421880 [00:04<00:08, 2118639.52it/s]
     31%|###1      | 8257536/26421880 [00:04<00:08, 2101023.97it/s]
     32%|###2      | 8486912/26421880 [00:04<00:08, 2088775.15it/s]
     33%|###2      | 8716288/26421880 [00:04<00:08, 2079081.87it/s]
     34%|###3      | 8945664/26421880 [00:05<00:08, 2071898.84it/s]
     35%|###4      | 9207808/26421880 [00:05<00:08, 2143474.79it/s]
     36%|###5      | 9437184/26421880 [00:05<00:07, 2125408.88it/s]
     37%|###6      | 9666560/26421880 [00:05<00:07, 2105525.27it/s]
     37%|###7      | 9895936/26421880 [00:05<00:07, 2091336.20it/s]
     38%|###8      | 10125312/26421880 [00:05<00:07, 2080839.42it/s]
     39%|###9      | 10354688/26421880 [00:05<00:07, 2073330.28it/s]
     40%|####      | 10616832/26421880 [00:05<00:07, 2146153.42it/s]
     41%|####1     | 10846208/26421880 [00:05<00:07, 2124092.34it/s]
     42%|####1     | 11075584/26421880 [00:06<00:07, 2106639.18it/s]
     43%|####2     | 11304960/26421880 [00:06<00:07, 2091600.98it/s]
     44%|####3     | 11534336/26421880 [00:06<00:07, 2080564.92it/s]
     45%|####4     | 11763712/26421880 [00:06<00:07, 2072560.18it/s]
     46%|####5     | 12025856/26421880 [00:06<00:06, 2146704.99it/s]
     46%|####6     | 12255232/26421880 [00:06<00:06, 2124950.70it/s]
     47%|####7     | 12484608/26421880 [00:06<00:06, 2105598.70it/s]
     48%|####8     | 12713984/26421880 [00:06<00:06, 2090266.96it/s]
     49%|####8     | 12943360/26421880 [00:06<00:06, 2082169.63it/s]
     50%|####9     | 13172736/26421880 [00:07<00:06, 2075261.18it/s]
     51%|#####     | 13434880/26421880 [00:07<00:06, 2152401.58it/s]
     52%|#####1    | 13664256/26421880 [00:07<00:06, 2124222.59it/s]
     53%|#####2    | 13893632/26421880 [00:07<00:05, 2104402.48it/s]
     53%|#####3    | 14123008/26421880 [00:07<00:05, 2093183.87it/s]
     54%|#####4    | 14385152/26421880 [00:07<00:05, 2163083.69it/s]
     55%|#####5    | 14614528/26421880 [00:07<00:05, 2132077.99it/s]
     56%|#####6    | 14843904/26421880 [00:07<00:05, 2111588.54it/s]
     57%|#####7    | 15073280/26421880 [00:07<00:05, 2096712.91it/s]
     58%|#####8    | 15335424/26421880 [00:08<00:05, 2166673.97it/s]
     59%|#####8    | 15564800/26421880 [00:08<00:05, 2138790.41it/s]
     60%|#####9    | 15826944/26421880 [00:08<00:04, 2196946.10it/s]
     61%|######    | 16056320/26421880 [00:08<00:04, 2156817.78it/s]
     62%|######1   | 16318464/26421880 [00:08<00:04, 2210428.64it/s]
     63%|######2   | 16547840/26421880 [00:08<00:04, 2171108.78it/s]
     64%|######3   | 16809984/26421880 [00:08<00:04, 2218366.73it/s]
     65%|######4   | 17072128/26421880 [00:08<00:04, 2254152.22it/s]
     65%|######5   | 17301504/26421880 [00:08<00:04, 2203880.94it/s]
     66%|######6   | 17563648/26421880 [00:09<00:03, 2247016.53it/s]
     67%|######7   | 17825792/26421880 [00:09<00:03, 2273208.60it/s]
     68%|######8   | 18087936/26421880 [00:09<00:03, 2296356.55it/s]
     69%|######9   | 18350080/26421880 [00:09<00:03, 2312024.15it/s]
     70%|#######   | 18612224/26421880 [00:09<00:03, 2324515.01it/s]
     71%|#######1  | 18874368/26421880 [00:09<00:03, 2333188.31it/s]
     72%|#######2  | 19136512/26421880 [00:09<00:03, 2338031.20it/s]
     74%|#######3  | 19431424/26421880 [00:09<00:02, 2425193.34it/s]
     75%|#######4  | 19693568/26421880 [00:09<00:02, 2403630.06it/s]
     76%|#######5  | 19988480/26421880 [00:10<00:02, 2470927.04it/s]
     77%|#######6  | 20283392/26421880 [00:10<00:02, 2516157.07it/s]
     78%|#######7  | 20545536/26421880 [00:10<00:02, 2481567.99it/s]
     79%|#######8  | 20840448/26421880 [00:10<00:02, 2528576.42it/s]
     80%|#######9  | 21135360/26421880 [00:10<00:02, 2564827.02it/s]
     81%|########1 | 21463040/26421880 [00:10<00:01, 2662384.99it/s]
     82%|########2 | 21757952/26421880 [00:10<00:01, 2664314.53it/s]
     83%|########3 | 22052864/26421880 [00:10<00:01, 2665004.66it/s]
     85%|########4 | 22380544/26421880 [00:10<00:01, 2741416.29it/s]
     86%|########5 | 22708224/26421880 [00:11<00:01, 2794284.00it/s]
     87%|########7 | 23035904/26421880 [00:11<00:01, 2838059.32it/s]
     88%|########8 | 23363584/26421880 [00:11<00:01, 2868434.44it/s]
     90%|########9 | 23691264/26421880 [00:11<00:00, 2896759.45it/s]
     91%|#########1| 24051712/26421880 [00:11<00:00, 2986028.22it/s]
     92%|#########2| 24379392/26421880 [00:11<00:00, 2984919.21it/s]
     94%|#########3| 24739840/26421880 [00:11<00:00, 3058640.24it/s]
     95%|#########5| 25133056/26421880 [00:11<00:00, 3181101.96it/s]
     96%|#########6| 25493504/26421880 [00:11<00:00, 3208268.25it/s]
     98%|#########7| 25886720/26421880 [00:12<00:00, 3293025.87it/s]
     99%|#########9| 26247168/26421880 [00:12<00:00, 3291449.80it/s]
    100%|##########| 26421880/26421880 [00:12<00:00, 2171970.48it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 267259.53it/s]
    100%|##########| 29515/29515 [00:00<00:00, 265929.89it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 295612.78it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 294368.46it/s]
      3%|2         | 131072/4422102 [00:00<00:10, 428170.77it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 607272.34it/s]
     10%|#         | 458752/4422102 [00:00<00:03, 1129550.38it/s]
     20%|##        | 884736/4422102 [00:00<00:01, 2042639.97it/s]
     41%|####      | 1802240/4422102 [00:00<00:00, 4060203.43it/s]
     82%|########1 | 3604480/4422102 [00:00<00:00, 7907994.04it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4939698.74it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 28005547.33it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trouser  Pullover  T-shirt/top  Trouser




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.6830, 0.1413, 0.3693, 0.8819, 0.6866, 0.6601, 0.8943, 0.9041, 0.3509,
             0.7469],
            [0.4568, 0.9564, 0.1658, 0.1804, 0.3931, 0.0631, 0.1684, 0.8035, 0.5953,
             0.6080],
            [0.7948, 0.0613, 0.0599, 0.3918, 0.8165, 0.7435, 0.6810, 0.4553, 0.6693,
             0.9951],
            [0.5146, 0.1168, 0.3664, 0.5621, 0.7286, 0.0653, 0.0260, 0.9758, 0.4015,
             0.4456]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.4627487659454346




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.737381867468357
      batch 2000 loss: 0.8232627233620733
      batch 3000 loss: 0.6910002905298025
      batch 4000 loss: 0.5723105559465476
      batch 5000 loss: 0.5713410502979532
      batch 6000 loss: 0.5163680645269342
      batch 7000 loss: 0.5224646573411301
      batch 8000 loss: 0.5249265831285156
      batch 9000 loss: 0.45252326915925367
      batch 10000 loss: 0.45978888988203837
      batch 11000 loss: 0.42979158960678615
      batch 12000 loss: 0.43635175210094895
      batch 13000 loss: 0.422512743181258
      batch 14000 loss: 0.4186138069520239
      batch 15000 loss: 0.4198871634041425
    LOSS train 0.4198871634041425 valid 0.4326936900615692
    EPOCH 2:
      batch 1000 loss: 0.38329789584031093
      batch 2000 loss: 0.39820902984181883
      batch 3000 loss: 0.3928584715910838
      batch 4000 loss: 0.3566592732917634
      batch 5000 loss: 0.38751069453301895
      batch 6000 loss: 0.3649308154891187
      batch 7000 loss: 0.3511036331443465
      batch 8000 loss: 0.3655387346434436
      batch 9000 loss: 0.3486221049628075
      batch 10000 loss: 0.3663662195833749
      batch 11000 loss: 0.3587352235559374
      batch 12000 loss: 0.3557587359143072
      batch 13000 loss: 0.3476431745446171
      batch 14000 loss: 0.3323555005678936
      batch 15000 loss: 0.34781548203254353
    LOSS train 0.34781548203254353 valid 0.38320183753967285
    EPOCH 3:
      batch 1000 loss: 0.3153102499861707
      batch 2000 loss: 0.31697511059032696
      batch 3000 loss: 0.32752743544292023
      batch 4000 loss: 0.316271929841656
      batch 5000 loss: 0.3061019140301796
      batch 6000 loss: 0.32982815917282643
      batch 7000 loss: 0.3455834208527613
      batch 8000 loss: 0.34001788232728725
      batch 9000 loss: 0.3105371160181821
      batch 10000 loss: 0.3066079032904527
      batch 11000 loss: 0.3011237438812968
      batch 12000 loss: 0.30030862176763184
      batch 13000 loss: 0.32627881663916924
      batch 14000 loss: 0.3370485301844237
      batch 15000 loss: 0.3162832689750794
    LOSS train 0.3162832689750794 valid 0.3413181006908417
    EPOCH 4:
      batch 1000 loss: 0.29768692478678715
      batch 2000 loss: 0.2842446520950653
      batch 3000 loss: 0.2921793372690372
      batch 4000 loss: 0.29877313684577167
      batch 5000 loss: 0.29387932801180433
      batch 6000 loss: 0.28801504956703866
      batch 7000 loss: 0.31887831487575025
      batch 8000 loss: 0.2834700432063419
      batch 9000 loss: 0.30417268207412235
      batch 10000 loss: 0.30580416827573936
      batch 11000 loss: 0.2749586111871904
      batch 12000 loss: 0.2741863845677235
      batch 13000 loss: 0.3159000164248123
      batch 14000 loss: 0.2784901017693628
      batch 15000 loss: 0.29203774322973186
    LOSS train 0.29203774322973186 valid 0.32748353481292725
    EPOCH 5:
      batch 1000 loss: 0.26476471283335923
      batch 2000 loss: 0.27459591251422033
      batch 3000 loss: 0.2786479725980644
      batch 4000 loss: 0.275005713774468
      batch 5000 loss: 0.28116374611049466
      batch 6000 loss: 0.2717628301747941
      batch 7000 loss: 0.27652120835828825
      batch 8000 loss: 0.26328100492685463
      batch 9000 loss: 0.2710092870366652
      batch 10000 loss: 0.2612681537825276
      batch 11000 loss: 0.28429203925701585
      batch 12000 loss: 0.28233890085795427
      batch 13000 loss: 0.2633714452474851
      batch 14000 loss: 0.28333300014291035
      batch 15000 loss: 0.27508121827073045
    LOSS train 0.27508121827073045 valid 0.29925990104675293




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  42.378 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
