
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:25, 310184.33it/s]
      0%|          | 65536/26421880 [00:00<01:26, 305554.26it/s]
      0%|          | 131072/26421880 [00:00<00:59, 442704.34it/s]
      1%|          | 196608/26421880 [00:00<00:51, 507400.36it/s]
      2%|1         | 425984/26421880 [00:00<00:23, 1088570.74it/s]
      2%|2         | 557056/26421880 [00:00<00:22, 1127641.69it/s]
      3%|2         | 688128/26421880 [00:00<00:22, 1154869.90it/s]
      3%|3         | 819200/26421880 [00:00<00:21, 1173332.66it/s]
      4%|3         | 983040/26421880 [00:00<00:19, 1279114.52it/s]
      4%|4         | 1179648/26421880 [00:01<00:17, 1441643.71it/s]
      5%|5         | 1343488/26421880 [00:01<00:17, 1465500.52it/s]
      6%|5         | 1507328/26421880 [00:01<00:16, 1480409.24it/s]
      6%|6         | 1703936/26421880 [00:01<00:15, 1579598.12it/s]
      7%|7         | 1900544/26421880 [00:01<00:14, 1648532.52it/s]
      8%|7         | 2097152/26421880 [00:01<00:14, 1696750.79it/s]
      9%|8         | 2293760/26421880 [00:01<00:13, 1730245.31it/s]
      9%|9         | 2490368/26421880 [00:01<00:13, 1753222.32it/s]
     10%|#         | 2686976/26421880 [00:01<00:13, 1771793.25it/s]
     11%|#         | 2883584/26421880 [00:02<00:13, 1786933.19it/s]
     12%|#1        | 3080192/26421880 [00:02<00:12, 1798683.97it/s]
     12%|#2        | 3276800/26421880 [00:02<00:12, 1803573.24it/s]
     13%|#3        | 3473408/26421880 [00:02<00:12, 1807765.98it/s]
     14%|#3        | 3670016/26421880 [00:02<00:12, 1810597.59it/s]
     15%|#4        | 3899392/26421880 [00:02<00:11, 1898242.39it/s]
     16%|#5        | 4096000/26421880 [00:02<00:11, 1873704.59it/s]
     16%|#6        | 4292608/26421880 [00:02<00:11, 1857952.09it/s]
     17%|#7        | 4521984/26421880 [00:02<00:11, 1933709.36it/s]
     18%|#7        | 4751360/26421880 [00:03<00:10, 1984029.65it/s]
     19%|#8        | 4980736/26421880 [00:03<00:10, 2020970.19it/s]
     20%|#9        | 5210112/26421880 [00:03<00:10, 2046769.49it/s]
     21%|##        | 5439488/26421880 [00:03<00:10, 2064674.25it/s]
     21%|##1       | 5668864/26421880 [00:03<00:09, 2077564.11it/s]
     22%|##2       | 5898240/26421880 [00:03<00:09, 2087175.57it/s]
     23%|##3       | 6127616/26421880 [00:03<00:09, 2093882.71it/s]
     24%|##4       | 6356992/26421880 [00:03<00:09, 2098215.94it/s]
     25%|##4       | 6586368/26421880 [00:03<00:09, 2100902.10it/s]
     26%|##5       | 6815744/26421880 [00:04<00:09, 2105760.35it/s]
     27%|##6       | 7045120/26421880 [00:04<00:09, 2106639.71it/s]
     28%|##7       | 7274496/26421880 [00:04<00:09, 2106402.69it/s]
     28%|##8       | 7503872/26421880 [00:04<00:08, 2109589.98it/s]
     29%|##9       | 7733248/26421880 [00:04<00:08, 2108982.29it/s]
     30%|###       | 7962624/26421880 [00:04<00:08, 2111055.38it/s]
     31%|###1      | 8192000/26421880 [00:04<00:08, 2110403.18it/s]
     32%|###1      | 8421376/26421880 [00:04<00:08, 2110003.90it/s]
     33%|###2      | 8650752/26421880 [00:04<00:08, 2109684.28it/s]
     34%|###3      | 8880128/26421880 [00:04<00:08, 2111462.21it/s]
     34%|###4      | 9109504/26421880 [00:05<00:08, 2090894.58it/s]
     35%|###5      | 9338880/26421880 [00:05<00:08, 2096138.64it/s]
     36%|###6      | 9568256/26421880 [00:05<00:08, 2101912.94it/s]
     37%|###7      | 9797632/26421880 [00:05<00:07, 2103761.92it/s]
     38%|###7      | 10027008/26421880 [00:05<00:07, 2105009.76it/s]
     39%|###8      | 10256384/26421880 [00:05<00:07, 2105913.16it/s]
     40%|###9      | 10485760/26421880 [00:05<00:07, 2108511.37it/s]
     41%|####      | 10715136/26421880 [00:05<00:09, 1667470.45it/s]
     41%|####1     | 10944512/26421880 [00:06<00:08, 1775310.73it/s]
     42%|####2     | 11173888/26421880 [00:06<00:08, 1865656.78it/s]
     43%|####3     | 11403264/26421880 [00:06<00:07, 1931940.70it/s]
     44%|####4     | 11632640/26421880 [00:06<00:07, 1981549.90it/s]
     45%|####4     | 11862016/26421880 [00:06<00:07, 2020065.92it/s]
     46%|####5     | 12091392/26421880 [00:06<00:06, 2047787.76it/s]
     47%|####6     | 12320768/26421880 [00:06<00:06, 2063378.35it/s]
     47%|####7     | 12550144/26421880 [00:06<00:06, 2078805.40it/s]
     48%|####8     | 12779520/26421880 [00:06<00:06, 2087958.57it/s]
     49%|####9     | 13008896/26421880 [00:07<00:06, 2092077.49it/s]
     50%|#####     | 13238272/26421880 [00:07<00:06, 2099935.03it/s]
     51%|#####     | 13467648/26421880 [00:07<00:06, 2104350.05it/s]
     52%|#####1    | 13697024/26421880 [00:07<00:06, 2105423.26it/s]
     53%|#####2    | 13926400/26421880 [00:07<00:05, 2108606.97it/s]
     54%|#####3    | 14155776/26421880 [00:07<00:05, 2109425.07it/s]
     54%|#####4    | 14385152/26421880 [00:07<00:05, 2110128.62it/s]
     55%|#####5    | 14614528/26421880 [00:07<00:05, 2112604.11it/s]
     56%|#####6    | 14843904/26421880 [00:07<00:05, 2115643.21it/s]
     57%|#####7    | 15073280/26421880 [00:08<00:05, 2115984.38it/s]
     58%|#####7    | 15302656/26421880 [00:08<00:05, 2118627.95it/s]
     59%|#####8    | 15532032/26421880 [00:08<00:05, 2119522.37it/s]
     60%|#####9    | 15761408/26421880 [00:08<00:05, 2123474.68it/s]
     61%|######    | 15990784/26421880 [00:08<00:04, 2122932.49it/s]
     61%|######1   | 16220160/26421880 [00:08<00:04, 2123224.84it/s]
     62%|######2   | 16449536/26421880 [00:08<00:04, 2122798.43it/s]
     63%|######3   | 16678912/26421880 [00:08<00:04, 2124023.92it/s]
     64%|######3   | 16908288/26421880 [00:08<00:04, 2122538.16it/s]
     65%|######4   | 17170432/26421880 [00:08<00:04, 2209050.84it/s]
     66%|######5   | 17399808/26421880 [00:09<00:04, 2182215.15it/s]
     67%|######6   | 17661952/26421880 [00:09<00:03, 2250152.83it/s]
     68%|######7   | 17924096/26421880 [00:09<00:03, 2297594.47it/s]
     69%|######8   | 18186240/26421880 [00:09<00:03, 2333610.18it/s]
     70%|######9   | 18448384/26421880 [00:09<00:03, 2356581.66it/s]
     71%|#######   | 18710528/26421880 [00:09<00:03, 2375740.08it/s]
     72%|#######1  | 18972672/26421880 [00:09<00:03, 2389524.69it/s]
     73%|#######2  | 19234816/26421880 [00:09<00:02, 2399243.00it/s]
     74%|#######3  | 19496960/26421880 [00:09<00:02, 2405208.80it/s]
     75%|#######4  | 19759104/26421880 [00:10<00:02, 2409629.97it/s]
     76%|#######5  | 20054016/26421880 [00:10<00:02, 2499655.43it/s]
     77%|#######6  | 20316160/26421880 [00:10<00:02, 2478148.85it/s]
     78%|#######8  | 20611072/26421880 [00:10<00:02, 2550633.56it/s]
     79%|#######9  | 20905984/26421880 [00:10<00:02, 2598730.47it/s]
     80%|########  | 21200896/26421880 [00:10<00:01, 2635681.61it/s]
     81%|########1 | 21495808/26421880 [00:10<00:01, 2665340.56it/s]
     82%|########2 | 21790720/26421880 [00:10<00:01, 2683326.89it/s]
     84%|########3 | 22118400/26421880 [00:10<00:01, 2781112.07it/s]
     85%|########4 | 22446080/26421880 [00:11<00:01, 2849786.47it/s]
     86%|########6 | 22740992/26421880 [00:11<00:01, 2819082.85it/s]
     87%|########7 | 23068672/26421880 [00:11<00:01, 2880205.13it/s]
     89%|########8 | 23429120/26421880 [00:11<00:00, 3006681.02it/s]
     90%|########9 | 23756800/26421880 [00:11<00:00, 3015007.52it/s]
     91%|#########1| 24117248/26421880 [00:11<00:00, 3105090.25it/s]
     93%|#########2| 24444928/26421880 [00:11<00:00, 3088118.60it/s]
     94%|#########3| 24805376/26421880 [00:11<00:00, 3159615.86it/s]
     95%|#########5| 25198592/26421880 [00:11<00:00, 3293582.62it/s]
     97%|#########6| 25559040/26421880 [00:12<00:00, 3306416.09it/s]
     98%|#########8| 25952256/26421880 [00:12<00:00, 3397843.03it/s]
    100%|#########9| 26345472/26421880 [00:12<00:00, 3467267.36it/s]
    100%|##########| 26421880/26421880 [00:12<00:00, 2156704.23it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 273943.70it/s]
    100%|##########| 29515/29515 [00:00<00:00, 272811.16it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 299173.81it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 298271.71it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 434182.03it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 615879.02it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1251753.73it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2243914.61it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4428609.90it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8519700.82it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 5012207.86it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 28262142.66it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Bag  Pullover  Coat  Pullover




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.3765, 0.7827, 0.4140, 0.9076, 0.3795, 0.8681, 0.2315, 0.3343, 0.9919,
             0.3048],
            [0.2092, 0.0186, 0.0510, 0.2351, 0.6609, 0.2401, 0.8160, 0.1807, 0.3142,
             0.0709],
            [0.7481, 0.9338, 0.5396, 0.4282, 0.4369, 0.7011, 0.1300, 0.9954, 0.6426,
             0.5274],
            [0.9305, 0.9920, 0.1347, 0.6736, 0.2757, 0.7367, 0.3870, 0.1358, 0.4684,
             0.3235]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.4307005405426025




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.6547221904546023
      batch 2000 loss: 0.8378229586072267
      batch 3000 loss: 0.676656247779727
      batch 4000 loss: 0.6061817657537758
      batch 5000 loss: 0.5676011544307694
      batch 6000 loss: 0.5379855446346337
      batch 7000 loss: 0.5317448041844182
      batch 8000 loss: 0.49227005187131
      batch 9000 loss: 0.49487719698809085
      batch 10000 loss: 0.45919327256141695
      batch 11000 loss: 0.43300054502382407
      batch 12000 loss: 0.45579928212909726
      batch 13000 loss: 0.436108774006716
      batch 14000 loss: 0.4336923898620298
      batch 15000 loss: 0.4114959141953732
    LOSS train 0.4114959141953732 valid 0.42175164818763733
    EPOCH 2:
      batch 1000 loss: 0.38659487236116546
      batch 2000 loss: 0.4085474927020841
      batch 3000 loss: 0.385706271767267
      batch 4000 loss: 0.38120492755914165
      batch 5000 loss: 0.3822810520447092
      batch 6000 loss: 0.3924248195693508
      batch 7000 loss: 0.35844785392680206
      batch 8000 loss: 0.36645359559857754
      batch 9000 loss: 0.3706986237199162
      batch 10000 loss: 0.33700761905466786
      batch 11000 loss: 0.3556994901609141
      batch 12000 loss: 0.34900121470715384
      batch 13000 loss: 0.35097220910602484
      batch 14000 loss: 0.36103681531973414
      batch 15000 loss: 0.37033561489717975
    LOSS train 0.37033561489717975 valid 0.3960771858692169
    EPOCH 3:
      batch 1000 loss: 0.3350982332773128
      batch 2000 loss: 0.3301324014663114
      batch 3000 loss: 0.3035597662054352
      batch 4000 loss: 0.32772806587360537
      batch 5000 loss: 0.3261546979726991
      batch 6000 loss: 0.3042135414822114
      batch 7000 loss: 0.3247517416680057
      batch 8000 loss: 0.33390455952024783
      batch 9000 loss: 0.3283022745637572
      batch 10000 loss: 0.3205543433402199
      batch 11000 loss: 0.33356901095688224
      batch 12000 loss: 0.32177104385627897
      batch 13000 loss: 0.3284709043829935
      batch 14000 loss: 0.31896294008172116
      batch 15000 loss: 0.3139660415388353
    LOSS train 0.3139660415388353 valid 0.3334880471229553
    EPOCH 4:
      batch 1000 loss: 0.29624448990164093
      batch 2000 loss: 0.32415984280464183
      batch 3000 loss: 0.32037575617674885
      batch 4000 loss: 0.2954814703179727
      batch 5000 loss: 0.296002202000167
      batch 6000 loss: 0.28915160912104604
      batch 7000 loss: 0.30584615734821274
      batch 8000 loss: 0.26526766122841944
      batch 9000 loss: 0.2872134830750347
      batch 10000 loss: 0.2722855288783685
      batch 11000 loss: 0.2967964486415217
      batch 12000 loss: 0.2719559164341999
      batch 13000 loss: 0.30712240510757327
      batch 14000 loss: 0.2925456673255612
      batch 15000 loss: 0.2950914015536182
    LOSS train 0.2950914015536182 valid 0.329012930393219
    EPOCH 5:
      batch 1000 loss: 0.26480530233261745
      batch 2000 loss: 0.2773140992362714
      batch 3000 loss: 0.2783872078728018
      batch 4000 loss: 0.26762062948566745
      batch 5000 loss: 0.27237080587844686
      batch 6000 loss: 0.2607967187953345
      batch 7000 loss: 0.2699883796920003
      batch 8000 loss: 0.26777211678857565
      batch 9000 loss: 0.284913054964205
      batch 10000 loss: 0.2672926024250664
      batch 11000 loss: 0.29012656544899984
      batch 12000 loss: 0.27969236405344056
      batch 13000 loss: 0.27746092046755505
      batch 14000 loss: 0.2842353497825925
      batch 15000 loss: 0.2684210066343258
    LOSS train 0.2684210066343258 valid 0.33611881732940674




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  26.042 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
