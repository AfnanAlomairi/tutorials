
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:26, 306206.51it/s]
      0%|          | 65536/26421880 [00:00<01:27, 301263.33it/s]
      0%|          | 131072/26421880 [00:00<01:00, 437083.01it/s]
      1%|          | 196608/26421880 [00:00<00:52, 500537.52it/s]
      1%|1         | 393216/26421880 [00:00<00:26, 967133.11it/s]
      2%|1         | 491520/26421880 [00:00<00:27, 942568.15it/s]
      2%|2         | 622592/26421880 [00:00<00:25, 1025365.65it/s]
      3%|2         | 786432/26421880 [00:00<00:21, 1173457.72it/s]
      3%|3         | 917504/26421880 [00:00<00:21, 1180805.65it/s]
      4%|4         | 1081344/26421880 [00:01<00:19, 1277588.33it/s]
      5%|4         | 1245184/26421880 [00:01<00:18, 1343320.78it/s]
      5%|5         | 1409024/26421880 [00:01<00:18, 1389116.41it/s]
      6%|6         | 1605632/26421880 [00:01<00:16, 1508097.10it/s]
      7%|6         | 1769472/26421880 [00:01<00:16, 1504037.09it/s]
      7%|7         | 1933312/26421880 [00:01<00:16, 1501420.45it/s]
      8%|8         | 2129920/26421880 [00:01<00:15, 1586551.60it/s]
      9%|8         | 2293760/26421880 [00:01<00:15, 1559414.22it/s]
      9%|9         | 2490368/26421880 [00:01<00:14, 1626592.12it/s]
     10%|#         | 2654208/26421880 [00:02<00:14, 1593872.73it/s]
     11%|#         | 2850816/26421880 [00:02<00:14, 1650501.16it/s]
     12%|#1        | 3047424/26421880 [00:02<00:13, 1689320.37it/s]
     12%|#2        | 3244032/26421880 [00:02<00:13, 1717019.70it/s]
     13%|#3        | 3440640/26421880 [00:02<00:13, 1736609.65it/s]
     14%|#3        | 3637248/26421880 [00:02<00:12, 1753465.89it/s]
     15%|#4        | 3833856/26421880 [00:02<00:12, 1765265.81it/s]
     15%|#5        | 4030464/26421880 [00:02<00:12, 1771669.39it/s]
     16%|#5        | 4227072/26421880 [00:02<00:12, 1780742.12it/s]
     17%|#6        | 4423680/26421880 [00:03<00:12, 1784346.02it/s]
     17%|#7        | 4620288/26421880 [00:03<00:12, 1789970.55it/s]
     18%|#8        | 4816896/26421880 [00:03<00:12, 1793789.28it/s]
     19%|#8        | 5013504/26421880 [00:03<00:11, 1796984.06it/s]
     20%|#9        | 5210112/26421880 [00:03<00:11, 1798036.94it/s]
     20%|##        | 5406720/26421880 [00:03<00:11, 1796153.31it/s]
     21%|##1       | 5603328/26421880 [00:03<00:11, 1796168.56it/s]
     22%|##2       | 5832704/26421880 [00:03<00:10, 1880249.21it/s]
     23%|##2       | 6029312/26421880 [00:03<00:10, 1854563.18it/s]
     24%|##3       | 6225920/26421880 [00:04<00:10, 1836300.88it/s]
     24%|##4       | 6422528/26421880 [00:04<00:10, 1826148.45it/s]
     25%|##5       | 6651904/26421880 [00:04<00:10, 1898129.31it/s]
     26%|##5       | 6848512/26421880 [00:04<00:10, 1867346.00it/s]
     27%|##6       | 7045120/26421880 [00:04<00:10, 1849373.15it/s]
     28%|##7       | 7274496/26421880 [00:04<00:10, 1914332.25it/s]
     28%|##8       | 7471104/26421880 [00:04<00:10, 1879051.29it/s]
     29%|##9       | 7667712/26421880 [00:04<00:10, 1856876.00it/s]
     30%|##9       | 7864320/26421880 [00:04<00:10, 1842107.94it/s]
     31%|###       | 8093696/26421880 [00:05<00:09, 1906778.23it/s]
     31%|###1      | 8290304/26421880 [00:05<00:09, 1876594.40it/s]
     32%|###2      | 8486912/26421880 [00:05<00:09, 1856674.43it/s]
     33%|###2      | 8716288/26421880 [00:05<00:09, 1915786.05it/s]
     34%|###3      | 8912896/26421880 [00:05<00:09, 1886219.00it/s]
     34%|###4      | 9109504/26421880 [00:05<00:09, 1860739.21it/s]
     35%|###5      | 9306112/26421880 [00:05<00:09, 1841601.77it/s]
     36%|###6      | 9535488/26421880 [00:05<00:08, 1894458.30it/s]
     37%|###6      | 9732096/26421880 [00:05<00:08, 1883232.80it/s]
     38%|###7      | 9928704/26421880 [00:06<00:08, 1858197.31it/s]
     38%|###8      | 10158080/26421880 [00:06<00:08, 1908096.48it/s]
     39%|###9      | 10354688/26421880 [00:06<00:08, 1875131.25it/s]
     40%|###9      | 10551296/26421880 [00:06<00:08, 1866697.87it/s]
     41%|####      | 10780672/26421880 [00:06<00:08, 1914351.79it/s]
     42%|####1     | 10977280/26421880 [00:06<00:08, 1880373.68it/s]
     42%|####2     | 11173888/26421880 [00:06<00:08, 1870505.12it/s]
     43%|####3     | 11370496/26421880 [00:06<00:08, 1853287.06it/s]
     44%|####3     | 11599872/26421880 [00:06<00:07, 1901310.23it/s]
     45%|####4     | 11796480/26421880 [00:07<00:07, 1887693.42it/s]
     45%|####5     | 11993088/26421880 [00:07<00:07, 1863857.61it/s]
     46%|####6     | 12222464/26421880 [00:07<00:07, 1910777.91it/s]
     47%|####7     | 12419072/26421880 [00:07<00:07, 1893391.05it/s]
     48%|####7     | 12648448/26421880 [00:07<00:07, 1931009.11it/s]
     49%|####8     | 12845056/26421880 [00:07<00:07, 1909850.68it/s]
     49%|####9     | 13041664/26421880 [00:07<00:07, 1880581.44it/s]
     50%|#####     | 13271040/26421880 [00:07<00:06, 1930517.92it/s]
     51%|#####     | 13467648/26421880 [00:07<00:06, 1902592.64it/s]
     52%|#####1    | 13697024/26421880 [00:08<00:06, 1955896.85it/s]
     53%|#####2    | 13926400/26421880 [00:08<00:06, 1979474.97it/s]
     54%|#####3    | 14155776/26421880 [00:08<00:06, 2007416.70it/s]
     54%|#####4    | 14385152/26421880 [00:08<00:05, 2028295.82it/s]
     55%|#####5    | 14614528/26421880 [00:08<00:05, 2047554.88it/s]
     56%|#####6    | 14843904/26421880 [00:08<00:05, 2056877.40it/s]
     57%|#####7    | 15073280/26421880 [00:08<00:05, 2063944.35it/s]
     58%|#####7    | 15302656/26421880 [00:08<00:05, 2072602.32it/s]
     59%|#####8    | 15532032/26421880 [00:08<00:05, 2079046.94it/s]
     60%|#####9    | 15761408/26421880 [00:08<00:05, 2083174.41it/s]
     61%|######    | 15990784/26421880 [00:09<00:04, 2087196.72it/s]
     61%|######1   | 16220160/26421880 [00:09<00:04, 2093376.95it/s]
     62%|######2   | 16449536/26421880 [00:09<00:04, 2097318.41it/s]
     63%|######3   | 16678912/26421880 [00:09<00:04, 2097305.51it/s]
     64%|######3   | 16908288/26421880 [00:09<00:04, 2104630.58it/s]
     65%|######4   | 17137664/26421880 [00:09<00:04, 2116905.82it/s]
     66%|######5   | 17399808/26421880 [00:09<00:04, 2190644.15it/s]
     67%|######6   | 17629184/26421880 [00:09<00:04, 2170277.90it/s]
     68%|######7   | 17891328/26421880 [00:09<00:03, 2236955.49it/s]
     69%|######8   | 18153472/26421880 [00:10<00:03, 2283633.15it/s]
     70%|######9   | 18415616/26421880 [00:10<00:03, 2316100.37it/s]
     71%|#######   | 18677760/26421880 [00:10<00:03, 2338949.21it/s]
     72%|#######1  | 18972672/26421880 [00:10<00:03, 2439456.50it/s]
     73%|#######2  | 19234816/26421880 [00:10<00:02, 2427328.95it/s]
     74%|#######3  | 19529728/26421880 [00:10<00:02, 2502019.49it/s]
     75%|#######5  | 19824640/26421880 [00:10<00:02, 2558627.90it/s]
     76%|#######6  | 20119552/26421880 [00:10<00:02, 2598656.22it/s]
     77%|#######7  | 20414464/26421880 [00:10<00:02, 2626450.69it/s]
     78%|#######8  | 20709376/26421880 [00:11<00:02, 2650007.64it/s]
     80%|#######9  | 21037056/26421880 [00:11<00:01, 2744287.83it/s]
     81%|########  | 21331968/26421880 [00:11<00:01, 2735401.22it/s]
     82%|########1 | 21659648/26421880 [00:11<00:01, 2811290.18it/s]
     83%|########3 | 21987328/26421880 [00:11<00:01, 2865161.89it/s]
     85%|########4 | 22347776/26421880 [00:11<00:01, 2986395.43it/s]
     86%|########5 | 22675456/26421880 [00:11<00:01, 2989859.48it/s]
     87%|########7 | 23035904/26421880 [00:11<00:01, 3074020.74it/s]
     89%|########8 | 23396352/26421880 [00:11<00:00, 3138250.76it/s]
     90%|########9 | 23756800/26421880 [00:12<00:00, 3187454.06it/s]
     91%|#########1| 24150016/26421880 [00:12<00:00, 3297206.98it/s]
     93%|#########2| 24543232/26421880 [00:12<00:00, 3375417.90it/s]
     94%|#########4| 24936448/26421880 [00:12<00:00, 3439662.42it/s]
     96%|#########5| 25329664/26421880 [00:12<00:00, 3494058.60it/s]
     97%|#########7| 25722880/26421880 [00:12<00:00, 3528911.73it/s]
     99%|#########8| 26148864/26421880 [00:12<00:00, 3635527.91it/s]
    100%|##########| 26421880/26421880 [00:12<00:00, 2076243.62it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 274176.07it/s]
    100%|##########| 29515/29515 [00:00<00:00, 272862.87it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 305551.62it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 304864.29it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 443930.59it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 629898.47it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1281289.00it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2294436.37it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4527985.04it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8710212.27it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 5124775.88it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 22055441.26it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Coat  Trouser  Ankle Boot  Coat




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.2864, 0.0412, 0.0470, 0.9852, 0.3247, 0.2349, 0.6233, 0.4520, 0.5748,
             0.4072],
            [0.9562, 0.5682, 0.7752, 0.9286, 0.1261, 0.3240, 0.8752, 0.6115, 0.6524,
             0.1634],
            [0.0300, 0.9630, 0.7392, 0.7364, 0.2306, 0.1584, 0.2212, 0.7876, 0.2114,
             0.2817],
            [0.7205, 0.0398, 0.7324, 0.5917, 0.8127, 0.3294, 0.1167, 0.7046, 0.0173,
             0.6007]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.36812686920166




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.7648982342481614
      batch 2000 loss: 0.8477473772130907
      batch 3000 loss: 0.6798614367279224
      batch 4000 loss: 0.6560183294685558
      batch 5000 loss: 0.5933823782170657
      batch 6000 loss: 0.5567876414258499
      batch 7000 loss: 0.5251491601353045
      batch 8000 loss: 0.4971218088901369
      batch 9000 loss: 0.5050321254676674
      batch 10000 loss: 0.48568143222318033
      batch 11000 loss: 0.45155430373962735
      batch 12000 loss: 0.4293989796663227
      batch 13000 loss: 0.4384306298120937
      batch 14000 loss: 0.4257849752162001
      batch 15000 loss: 0.40909231288603043
    LOSS train 0.40909231288603043 valid 0.4945155680179596
    EPOCH 2:
      batch 1000 loss: 0.4002776780907297
      batch 2000 loss: 0.38083773206925253
      batch 3000 loss: 0.38324294442759127
      batch 4000 loss: 0.3751730656269356
      batch 5000 loss: 0.3757700781409221
      batch 6000 loss: 0.36808183768640446
      batch 7000 loss: 0.3625359173323377
      batch 8000 loss: 0.3892176845438662
      batch 9000 loss: 0.3609820800336311
      batch 10000 loss: 0.37848510160727894
      batch 11000 loss: 0.3642412148998701
      batch 12000 loss: 0.36600894639419856
      batch 13000 loss: 0.35041369778150694
      batch 14000 loss: 0.3298618822315184
      batch 15000 loss: 0.3547347470791428
    LOSS train 0.3547347470791428 valid 0.3940386474132538
    EPOCH 3:
      batch 1000 loss: 0.32489687742300155
      batch 2000 loss: 0.331596938552786
      batch 3000 loss: 0.3436710354111419
      batch 4000 loss: 0.3087489930347947
      batch 5000 loss: 0.3239138017465593
      batch 6000 loss: 0.31752494370151546
      batch 7000 loss: 0.31310897529870274
      batch 8000 loss: 0.3301338905291923
      batch 9000 loss: 0.343116139630627
      batch 10000 loss: 0.30541783501846564
      batch 11000 loss: 0.3258520924115146
      batch 12000 loss: 0.3261450096757508
      batch 13000 loss: 0.32380872712668496
      batch 14000 loss: 0.32514023978382467
      batch 15000 loss: 0.3135749326131772
    LOSS train 0.3135749326131772 valid 0.337971568107605
    EPOCH 4:
      batch 1000 loss: 0.28768698034749834
      batch 2000 loss: 0.2986657596621226
      batch 3000 loss: 0.3000782403127942
      batch 4000 loss: 0.27379995425428205
      batch 5000 loss: 0.29174084863800087
      batch 6000 loss: 0.3052652300607151
      batch 7000 loss: 0.30121896851737257
      batch 8000 loss: 0.3088540531452381
      batch 9000 loss: 0.2926894917139216
      batch 10000 loss: 0.29233034432999555
      batch 11000 loss: 0.30808855673507785
      batch 12000 loss: 0.31046192172602605
      batch 13000 loss: 0.2912533643614443
      batch 14000 loss: 0.3077046563817421
      batch 15000 loss: 0.30934775144133525
    LOSS train 0.30934775144133525 valid 0.33313223719596863
    EPOCH 5:
      batch 1000 loss: 0.2714827792191427
      batch 2000 loss: 0.2963313310370722
      batch 3000 loss: 0.2734378378191104
      batch 4000 loss: 0.2870816356787327
      batch 5000 loss: 0.2857254359446015
      batch 6000 loss: 0.28288642122823876
      batch 7000 loss: 0.2790307886464725
      batch 8000 loss: 0.2624792753759575
      batch 9000 loss: 0.2877544590806483
      batch 10000 loss: 0.2730797824435904
      batch 11000 loss: 0.27218468102752197
      batch 12000 loss: 0.28243402805981166
      batch 13000 loss: 0.2816679237150347
      batch 14000 loss: 0.2787848723798197
      batch 15000 loss: 0.28528145787487663
    LOSS train 0.28528145787487663 valid 0.31456422805786133




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  40.728 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
