
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:31, 287813.99it/s]
      0%|          | 65536/26421880 [00:00<01:33, 283018.21it/s]
      0%|          | 131072/26421880 [00:00<01:04, 410236.23it/s]
      1%|          | 229376/26421880 [00:00<00:45, 580868.32it/s]
      2%|1         | 458752/26421880 [00:00<00:24, 1079767.39it/s]
      2%|2         | 655360/26421880 [00:00<00:20, 1284537.77it/s]
      3%|3         | 819200/26421880 [00:00<00:19, 1322858.65it/s]
      4%|3         | 1015808/26421880 [00:00<00:17, 1437390.48it/s]
      5%|4         | 1212416/26421880 [00:01<00:16, 1513987.77it/s]
      5%|5         | 1441792/26421880 [00:01<00:15, 1650039.99it/s]
      6%|6         | 1638400/26421880 [00:01<00:14, 1660770.51it/s]
      7%|6         | 1835008/26421880 [00:01<00:14, 1668618.81it/s]
      8%|7         | 2064384/26421880 [00:01<00:13, 1754643.30it/s]
      9%|8         | 2293760/26421880 [00:01<00:13, 1815275.60it/s]
      9%|9         | 2490368/26421880 [00:01<00:13, 1780083.46it/s]
     10%|#         | 2719744/26421880 [00:01<00:12, 1835109.64it/s]
     11%|#1        | 2949120/26421880 [00:01<00:12, 1872334.59it/s]
     12%|#2        | 3178496/26421880 [00:02<00:12, 1899081.72it/s]
     13%|#2        | 3407872/26421880 [00:02<00:11, 1917995.66it/s]
     14%|#3        | 3670016/26421880 [00:02<00:11, 2004034.11it/s]
     15%|#4        | 3899392/26421880 [00:02<00:11, 2001060.23it/s]
     16%|#5        | 4128768/26421880 [00:02<00:11, 1991296.11it/s]
     17%|#6        | 4390912/26421880 [00:02<00:10, 2057592.34it/s]
     17%|#7        | 4620288/26421880 [00:02<00:10, 2038311.97it/s]
     18%|#8        | 4882432/26421880 [00:02<00:10, 2091979.48it/s]
     19%|#9        | 5111808/26421880 [00:03<00:10, 2060987.22it/s]
     20%|##        | 5373952/26421880 [00:03<00:09, 2112920.85it/s]
     21%|##1       | 5636096/26421880 [00:03<00:09, 2149310.76it/s]
     22%|##2       | 5898240/26421880 [00:03<00:09, 2174748.67it/s]
     23%|##3       | 6127616/26421880 [00:03<00:09, 2117419.19it/s]
     24%|##4       | 6389760/26421880 [00:03<00:09, 2151782.24it/s]
     25%|##5       | 6651904/26421880 [00:03<00:09, 2176160.38it/s]
     26%|##6       | 6914048/26421880 [00:03<00:08, 2196897.50it/s]
     27%|##7       | 7176192/26421880 [00:03<00:08, 2211623.40it/s]
     28%|##8       | 7438336/26421880 [00:04<00:08, 2221619.52it/s]
     29%|##9       | 7700480/26421880 [00:04<00:08, 2225877.48it/s]
     30%|###       | 7962624/26421880 [00:04<00:08, 2232261.55it/s]
     31%|###1      | 8224768/26421880 [00:04<00:08, 2236640.79it/s]
     32%|###2      | 8486912/26421880 [00:04<00:08, 2239766.67it/s]
     33%|###3      | 8749056/26421880 [00:04<00:07, 2243885.18it/s]
     34%|###4      | 9011200/26421880 [00:04<00:07, 2244549.01it/s]
     35%|###5      | 9273344/26421880 [00:04<00:07, 2244830.51it/s]
     36%|###6      | 9535488/26421880 [00:05<00:07, 2244651.91it/s]
     37%|###7      | 9797632/26421880 [00:05<00:07, 2244256.10it/s]
     38%|###8      | 10059776/26421880 [00:05<00:07, 2244379.17it/s]
     39%|###9      | 10321920/26421880 [00:05<00:07, 2243140.82it/s]
     40%|####      | 10584064/26421880 [00:05<00:07, 2243647.76it/s]
     41%|####1     | 10846208/26421880 [00:05<00:06, 2243914.78it/s]
     42%|####2     | 11141120/26421880 [00:05<00:06, 2315615.83it/s]
     43%|####3     | 11403264/26421880 [00:05<00:06, 2295543.50it/s]
     44%|####4     | 11665408/26421880 [00:05<00:06, 2280489.99it/s]
     45%|####5     | 11927552/26421880 [00:06<00:06, 2271220.06it/s]
     46%|####6     | 12189696/26421880 [00:06<00:06, 2263984.17it/s]
     47%|####7     | 12451840/26421880 [00:06<00:06, 2258170.99it/s]
     48%|####8     | 12713984/26421880 [00:06<00:06, 2254723.70it/s]
     49%|####9     | 12976128/26421880 [00:06<00:05, 2254705.80it/s]
     50%|#####     | 13238272/26421880 [00:06<00:05, 2251194.20it/s]
     51%|#####1    | 13500416/26421880 [00:06<00:05, 2248340.66it/s]
     52%|#####2    | 13762560/26421880 [00:06<00:05, 2247395.18it/s]
     53%|#####3    | 14024704/26421880 [00:07<00:05, 2246689.27it/s]
     54%|#####4    | 14286848/26421880 [00:07<00:05, 2245459.26it/s]
     55%|#####5    | 14548992/26421880 [00:07<00:05, 2245097.66it/s]
     56%|#####6    | 14811136/26421880 [00:07<00:05, 2244784.06it/s]
     57%|#####7    | 15073280/26421880 [00:07<00:05, 2245381.24it/s]
     58%|#####8    | 15335424/26421880 [00:07<00:04, 2244954.98it/s]
     59%|#####9    | 15597568/26421880 [00:07<00:04, 2244117.94it/s]
     60%|######    | 15892480/26421880 [00:07<00:04, 2320193.65it/s]
     61%|######1   | 16154624/26421880 [00:07<00:04, 2302178.31it/s]
     62%|######2   | 16416768/26421880 [00:08<00:04, 2283713.52it/s]
     63%|######3   | 16678912/26421880 [00:08<00:04, 2271165.14it/s]
     64%|######4   | 16941056/26421880 [00:08<00:04, 2262177.54it/s]
     65%|######5   | 17235968/26421880 [00:08<00:03, 2339908.47it/s]
     66%|######6   | 17498112/26421880 [00:08<00:03, 2310105.70it/s]
     67%|######7   | 17760256/26421880 [00:08<00:03, 2290674.89it/s]
     68%|######8   | 18055168/26421880 [00:08<00:03, 2356513.46it/s]
     69%|######9   | 18317312/26421880 [00:08<00:03, 2326423.09it/s]
     70%|#######   | 18612224/26421880 [00:08<00:03, 2382188.76it/s]
     71%|#######1  | 18874368/26421880 [00:09<00:03, 2344115.60it/s]
     73%|#######2  | 19169280/26421880 [00:09<00:03, 2394378.88it/s]
     74%|#######3  | 19464192/26421880 [00:09<00:02, 2434095.83it/s]
     75%|#######4  | 19759104/26421880 [00:09<00:02, 2455695.58it/s]
     76%|#######5  | 20054016/26421880 [00:09<00:02, 2477009.89it/s]
     77%|#######7  | 20348928/26421880 [00:09<00:02, 2491989.85it/s]
     78%|#######8  | 20643840/26421880 [00:09<00:02, 2501716.50it/s]
     79%|#######9  | 20938752/26421880 [00:09<00:02, 2511180.58it/s]
     80%|########  | 21233664/26421880 [00:10<00:02, 2516556.98it/s]
     81%|########1 | 21528576/26421880 [00:10<00:01, 2518996.25it/s]
     83%|########2 | 21856256/26421880 [00:10<00:01, 2599465.31it/s]
     84%|########3 | 22151168/26421880 [00:10<00:01, 2582681.17it/s]
     85%|########5 | 22478848/26421880 [00:10<00:01, 2644703.77it/s]
     86%|########6 | 22806528/26421880 [00:10<00:01, 2693468.01it/s]
     88%|########7 | 23134208/26421880 [00:10<00:01, 2727665.92it/s]
     89%|########8 | 23461888/26421880 [00:10<00:01, 2751885.65it/s]
     90%|######### | 23789568/26421880 [00:10<00:00, 2768716.45it/s]
     91%|#########1| 24150016/26421880 [00:11<00:00, 2857464.49it/s]
     93%|#########2| 24477696/26421880 [00:11<00:00, 2847952.64it/s]
     94%|#########4| 24838144/26421880 [00:11<00:00, 2918794.55it/s]
     95%|#########5| 25198592/26421880 [00:11<00:00, 2968209.23it/s]
     97%|#########6| 25559040/26421880 [00:11<00:00, 3000157.97it/s]
     98%|#########8| 25952256/26421880 [00:11<00:00, 3102222.09it/s]
    100%|#########9| 26312704/26421880 [00:11<00:00, 3107350.77it/s]
    100%|##########| 26421880/26421880 [00:11<00:00, 2238210.29it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 254514.08it/s]
    100%|##########| 29515/29515 [00:00<00:00, 253069.74it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:15, 279318.51it/s]
      1%|1         | 65536/4422102 [00:00<00:15, 277898.93it/s]
      3%|2         | 131072/4422102 [00:00<00:10, 403945.89it/s]
      5%|5         | 229376/4422102 [00:00<00:07, 573158.76it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1166275.23it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2089755.30it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4124251.39it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 7933622.48it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4667937.81it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 23019485.07it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Trouser  Sneaker  T-shirt/top  Pullover




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.8799, 0.8813, 0.2365, 0.2000, 0.4560, 0.0297, 0.8151, 0.7989, 0.0768,
             0.9876],
            [0.4146, 0.1854, 0.1589, 0.5991, 0.5911, 0.0079, 0.8262, 0.7215, 0.9968,
             0.6377],
            [0.3757, 0.6559, 0.3049, 0.7072, 0.5032, 0.9151, 0.0104, 0.7139, 0.3087,
             0.5288],
            [0.1513, 0.1195, 0.5743, 0.8617, 0.2245, 0.2789, 0.8313, 0.1032, 0.4238,
             0.1955]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.403445243835449




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.8407151344269514
      batch 2000 loss: 0.8436156475059688
      batch 3000 loss: 0.713881288249977
      batch 4000 loss: 0.6315088656591251
      batch 5000 loss: 0.5896865480826237
      batch 6000 loss: 0.5716012234627269
      batch 7000 loss: 0.511673698441824
      batch 8000 loss: 0.5108176504594739
      batch 9000 loss: 0.4885643247186672
      batch 10000 loss: 0.46301979234744794
      batch 11000 loss: 0.4655628661185037
      batch 12000 loss: 0.45483888379653215
      batch 13000 loss: 0.46439063664199787
      batch 14000 loss: 0.42262222540471706
      batch 15000 loss: 0.4204742279632483
    LOSS train 0.4204742279632483 valid 0.4149758815765381
    EPOCH 2:
      batch 1000 loss: 0.3875429433461977
      batch 2000 loss: 0.3804326951242838
      batch 3000 loss: 0.3735529556734109
      batch 4000 loss: 0.4044908620317583
      batch 5000 loss: 0.3609440086496179
      batch 6000 loss: 0.3719406096795574
      batch 7000 loss: 0.38025751904763455
      batch 8000 loss: 0.3652036249225057
      batch 9000 loss: 0.35913100459250563
      batch 10000 loss: 0.35293080331772214
      batch 11000 loss: 0.3579987829834572
      batch 12000 loss: 0.37232141222116477
      batch 13000 loss: 0.34761142075741375
      batch 14000 loss: 0.34992812586092625
      batch 15000 loss: 0.3357624698714353
    LOSS train 0.3357624698714353 valid 0.35966160893440247
    EPOCH 3:
      batch 1000 loss: 0.33709367788772215
      batch 2000 loss: 0.3174975200468907
      batch 3000 loss: 0.309583719083952
      batch 4000 loss: 0.3221118165301523
      batch 5000 loss: 0.3153280282375781
      batch 6000 loss: 0.3256497504272847
      batch 7000 loss: 0.31230159072598324
      batch 8000 loss: 0.33707417842466386
      batch 9000 loss: 0.32311235765935997
      batch 10000 loss: 0.31737408223090463
      batch 11000 loss: 0.3324074364624539
      batch 12000 loss: 0.3190540779402072
      batch 13000 loss: 0.30065133827592583
      batch 14000 loss: 0.3046527447258159
      batch 15000 loss: 0.32078711465449306
    LOSS train 0.32078711465449306 valid 0.34947794675827026
    EPOCH 4:
      batch 1000 loss: 0.29877293046656994
      batch 2000 loss: 0.28926066360382535
      batch 3000 loss: 0.3008707168676774
      batch 4000 loss: 0.2935323289236549
      batch 5000 loss: 0.297944149892719
      batch 6000 loss: 0.30025667294443703
      batch 7000 loss: 0.3158500514550069
      batch 8000 loss: 0.2958252900786902
      batch 9000 loss: 0.2861154236620641
      batch 10000 loss: 0.28715770893960874
      batch 11000 loss: 0.2945625845266004
      batch 12000 loss: 0.2955500519340076
      batch 13000 loss: 0.2823282132244085
      batch 14000 loss: 0.28121466149280605
      batch 15000 loss: 0.28381761262181315
    LOSS train 0.28381761262181315 valid 0.37400856614112854
    EPOCH 5:
      batch 1000 loss: 0.2736018051927458
      batch 2000 loss: 0.2547816556849284
      batch 3000 loss: 0.29485795373937435
      batch 4000 loss: 0.257676717064729
      batch 5000 loss: 0.27104461915957656
      batch 6000 loss: 0.27937610938964647
      batch 7000 loss: 0.297359799157588
      batch 8000 loss: 0.28173349267951564
      batch 9000 loss: 0.25911059310189377
      batch 10000 loss: 0.25881850533383477
      batch 11000 loss: 0.2622815616500593
      batch 12000 loss: 0.2874253422550719
      batch 13000 loss: 0.2825142611646443
      batch 14000 loss: 0.2678446258559088
      batch 15000 loss: 0.2698319270310203
    LOSS train 0.2698319270310203 valid 0.29135334491729736




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  31.524 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
