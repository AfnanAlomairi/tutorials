
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:25, 308861.30it/s]
      0%|          | 65536/26421880 [00:00<01:26, 303508.31it/s]
      0%|          | 131072/26421880 [00:00<00:59, 439548.59it/s]
      1%|          | 196608/26421880 [00:00<00:52, 502232.05it/s]
      2%|1         | 425984/26421880 [00:00<00:24, 1078330.62it/s]
      2%|2         | 557056/26421880 [00:00<00:30, 834727.14it/s] 
      3%|2         | 688128/26421880 [00:00<00:27, 931616.88it/s]
      3%|3         | 851968/26421880 [00:00<00:23, 1087604.18it/s]
      4%|3         | 983040/26421880 [00:01<00:22, 1119812.59it/s]
      4%|4         | 1146880/26421880 [00:01<00:20, 1228748.34it/s]
      5%|4         | 1310720/26421880 [00:01<00:19, 1307824.19it/s]
      6%|5         | 1474560/26421880 [00:01<00:18, 1363863.41it/s]
      6%|6         | 1638400/26421880 [00:01<00:17, 1403569.87it/s]
      7%|6         | 1802240/26421880 [00:01<00:17, 1428925.41it/s]
      7%|7         | 1966080/26421880 [00:01<00:16, 1447097.30it/s]
      8%|8         | 2129920/26421880 [00:01<00:16, 1459598.69it/s]
      9%|8         | 2293760/26421880 [00:01<00:16, 1472012.03it/s]
      9%|9         | 2457600/26421880 [00:02<00:16, 1478752.87it/s]
     10%|9         | 2621440/26421880 [00:02<00:16, 1482887.98it/s]
     11%|#         | 2785280/26421880 [00:02<00:15, 1488451.74it/s]
     11%|#1        | 2949120/26421880 [00:02<00:15, 1489707.22it/s]
     12%|#1        | 3112960/26421880 [00:02<00:15, 1492588.36it/s]
     12%|#2        | 3276800/26421880 [00:02<00:15, 1490852.64it/s]
     13%|#3        | 3440640/26421880 [00:02<00:15, 1494061.56it/s]
     14%|#3        | 3604480/26421880 [00:02<00:15, 1496090.48it/s]
     14%|#4        | 3768320/26421880 [00:02<00:15, 1497582.83it/s]
     15%|#4        | 3932160/26421880 [00:03<00:15, 1498680.87it/s]
     16%|#5        | 4096000/26421880 [00:03<00:14, 1503750.92it/s]
     16%|#6        | 4259840/26421880 [00:03<00:14, 1503324.61it/s]
     17%|#6        | 4423680/26421880 [00:03<00:14, 1502842.93it/s]
     17%|#7        | 4587520/26421880 [00:03<00:14, 1505219.34it/s]
     18%|#7        | 4751360/26421880 [00:03<00:14, 1505137.52it/s]
     19%|#8        | 4915200/26421880 [00:03<00:14, 1506315.49it/s]
     19%|#9        | 5079040/26421880 [00:03<00:14, 1505255.39it/s]
     20%|#9        | 5242880/26421880 [00:03<00:14, 1503053.12it/s]
     20%|##        | 5406720/26421880 [00:04<00:13, 1502341.62it/s]
     21%|##1       | 5570560/26421880 [00:04<00:13, 1500754.73it/s]
     22%|##1       | 5734400/26421880 [00:04<00:13, 1499774.53it/s]
     22%|##2       | 5898240/26421880 [00:04<00:13, 1499691.77it/s]
     23%|##2       | 6062080/26421880 [00:04<00:13, 1499400.22it/s]
     24%|##3       | 6258688/26421880 [00:04<00:12, 1588920.44it/s]
     24%|##4       | 6422528/26421880 [00:04<00:12, 1562002.22it/s]
     25%|##5       | 6619136/26421880 [00:04<00:12, 1633011.48it/s]
     26%|##5       | 6815744/26421880 [00:04<00:11, 1682412.81it/s]
     27%|##6       | 7012352/26421880 [00:05<00:11, 1717244.87it/s]
     27%|##7       | 7208960/26421880 [00:05<00:11, 1741590.27it/s]
     28%|##8       | 7405568/26421880 [00:05<00:10, 1758393.54it/s]
     29%|##8       | 7602176/26421880 [00:05<00:10, 1771571.33it/s]
     30%|##9       | 7798784/26421880 [00:05<00:10, 1779114.84it/s]
     30%|###       | 8028160/26421880 [00:05<00:09, 1872216.10it/s]
     31%|###1      | 8257536/26421880 [00:05<00:09, 1937208.50it/s]
     32%|###1      | 8454144/26421880 [00:05<00:09, 1902248.10it/s]
     33%|###2      | 8683520/26421880 [00:05<00:09, 1961214.05it/s]
     34%|###3      | 8912896/26421880 [00:06<00:08, 2002424.04it/s]
     35%|###4      | 9175040/26421880 [00:06<00:08, 2102311.34it/s]
     36%|###5      | 9404416/26421880 [00:06<00:08, 2102596.23it/s]
     36%|###6      | 9633792/26421880 [00:06<00:07, 2118573.38it/s]
     37%|###7      | 9895936/26421880 [00:06<00:07, 2202840.72it/s]
     38%|###8      | 10158080/26421880 [00:06<00:07, 2261746.73it/s]
     39%|###9      | 10420224/26421880 [00:06<00:06, 2303111.40it/s]
     41%|####      | 10715136/26421880 [00:06<00:06, 2400967.02it/s]
     42%|####1     | 10977280/26421880 [00:06<00:06, 2421121.83it/s]
     43%|####2     | 11272192/26421880 [00:06<00:06, 2501482.71it/s]
     44%|####3     | 11567104/26421880 [00:07<00:05, 2561642.21it/s]
     45%|####4     | 11862016/26421880 [00:07<00:05, 2604816.00it/s]
     46%|####6     | 12189696/26421880 [00:07<00:05, 2706606.14it/s]
     47%|####7     | 12484608/26421880 [00:07<00:05, 2722501.59it/s]
     48%|####8     | 12812288/26421880 [00:07<00:04, 2806007.63it/s]
     50%|####9     | 13172736/26421880 [00:07<00:04, 2936415.19it/s]
     51%|#####1    | 13500416/26421880 [00:07<00:04, 2969678.90it/s]
     52%|#####2    | 13860864/26421880 [00:07<00:04, 3055183.94it/s]
     54%|#####3    | 14221312/26421880 [00:07<00:03, 3139097.43it/s]
     55%|#####5    | 14581760/26421880 [00:08<00:03, 3190728.14it/s]
     57%|#####6    | 14974976/26421880 [00:08<00:03, 3307344.64it/s]
     58%|#####8    | 15368192/26421880 [00:08<00:03, 3395949.86it/s]
     60%|#####9    | 15761408/26421880 [00:08<00:03, 3458730.73it/s]
     61%|######1   | 16187392/26421880 [00:08<00:02, 3586276.10it/s]
     63%|######2   | 16613376/26421880 [00:08<00:02, 3677586.05it/s]
     65%|######4   | 17072128/26421880 [00:08<00:02, 3824219.10it/s]
     66%|######6   | 17498112/26421880 [00:08<00:02, 3860611.89it/s]
     68%|######7   | 17956864/26421880 [00:08<00:02, 3962464.45it/s]
     70%|######9   | 18448384/26421880 [00:09<00:01, 4118502.30it/s]
     72%|#######1  | 18939904/26421880 [00:09<00:01, 4227618.33it/s]
     74%|#######3  | 19431424/26421880 [00:09<00:01, 4319336.18it/s]
     76%|#######5  | 19955712/26421880 [00:09<00:01, 4454235.41it/s]
     78%|#######7  | 20480000/26421880 [00:09<00:01, 4565520.96it/s]
     80%|#######9  | 21037056/26421880 [00:09<00:01, 4711357.89it/s]
     82%|########1 | 21594112/26421880 [00:09<00:00, 4828676.77it/s]
     84%|########3 | 22183936/26421880 [00:09<00:00, 4989888.88it/s]
     86%|########6 | 22773760/26421880 [00:09<00:00, 5114075.73it/s]
     88%|########8 | 23363584/26421880 [00:10<00:00, 5211321.35it/s]
     91%|######### | 23986176/26421880 [00:10<00:00, 5359750.11it/s]
     93%|#########3| 24641536/26421880 [00:10<00:00, 5541750.90it/s]
     96%|#########5| 25296896/26421880 [00:10<00:00, 5680085.32it/s]
     98%|#########8| 25952256/26421880 [00:10<00:00, 5789232.14it/s]
    100%|##########| 26421880/26421880 [00:10<00:00, 2517690.68it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 270918.56it/s]
    100%|##########| 29515/29515 [00:00<00:00, 269599.90it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 303177.06it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 301894.52it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 439193.00it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 622761.44it/s]
     10%|#         | 458752/4422102 [00:00<00:03, 1158425.79it/s]
     13%|#3        | 589824/4422102 [00:00<00:03, 1174417.32it/s]
     22%|##2       | 983040/4422102 [00:00<00:01, 1970815.05it/s]
     39%|###9      | 1736704/4422102 [00:00<00:00, 3545503.89it/s]
     73%|#######2  | 3211264/4422102 [00:00<00:00, 6674242.83it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4500964.03it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 13858971.11it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Bag  Dress  Shirt  T-shirt/top




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.5789, 0.1054, 0.5604, 0.4341, 0.5561, 0.5729, 0.1493, 0.7908, 0.3933,
             0.3573],
            [0.7324, 0.6445, 0.8423, 0.6003, 0.5580, 0.7447, 0.9870, 0.3009, 0.2488,
             0.0995],
            [0.0304, 0.5813, 0.4911, 0.5414, 0.4171, 0.6687, 0.6456, 0.0387, 0.9186,
             0.3626],
            [0.0023, 0.9996, 0.7543, 0.4390, 0.2467, 0.6051, 0.3034, 0.4455, 0.2707,
             0.1742]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.3550734519958496




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.737434708237648
      batch 2000 loss: 0.8793474085461348
      batch 3000 loss: 0.7378828243846074
      batch 4000 loss: 0.6695475107096136
      batch 5000 loss: 0.6063957756096497
      batch 6000 loss: 0.5839397585419938
      batch 7000 loss: 0.5572569360977504
      batch 8000 loss: 0.5143697291068966
      batch 9000 loss: 0.493620181548642
      batch 10000 loss: 0.4829155271349882
      batch 11000 loss: 0.48062878799042663
      batch 12000 loss: 0.4626557087870315
      batch 13000 loss: 0.44998264431627466
      batch 14000 loss: 0.43136014756385704
      batch 15000 loss: 0.4210171294755419
    LOSS train 0.4210171294755419 valid 0.4213465750217438
    EPOCH 2:
      batch 1000 loss: 0.4125900481888966
      batch 2000 loss: 0.40298074354848357
      batch 3000 loss: 0.401498045276443
      batch 4000 loss: 0.39016142606909854
      batch 5000 loss: 0.3781212575964164
      batch 6000 loss: 0.3544172430544277
      batch 7000 loss: 0.3766135618542321
      batch 8000 loss: 0.35765496640582567
      batch 9000 loss: 0.3505338900013885
      batch 10000 loss: 0.3856038708667038
      batch 11000 loss: 0.3682595943872584
      batch 12000 loss: 0.3504551714963745
      batch 13000 loss: 0.35343912608278333
      batch 14000 loss: 0.3559866983509855
      batch 15000 loss: 0.3364457722766383
    LOSS train 0.3364457722766383 valid 0.3650209605693817
    EPOCH 3:
      batch 1000 loss: 0.34341267626367333
      batch 2000 loss: 0.33685981190430175
      batch 3000 loss: 0.33477788504521594
      batch 4000 loss: 0.3141431417730528
      batch 5000 loss: 0.3174918859580939
      batch 6000 loss: 0.3253969247688219
      batch 7000 loss: 0.31903832909849006
      batch 8000 loss: 0.33313280467898587
      batch 9000 loss: 0.3369797362325771
      batch 10000 loss: 0.2919309265299853
      batch 11000 loss: 0.33417318056997464
      batch 12000 loss: 0.30968906006394537
      batch 13000 loss: 0.32639530073867357
      batch 14000 loss: 0.32247289395157713
      batch 15000 loss: 0.32117234550554713
    LOSS train 0.32117234550554713 valid 0.3373759090900421
    EPOCH 4:
      batch 1000 loss: 0.27157315686328365
      batch 2000 loss: 0.2743304936908535
      batch 3000 loss: 0.2931202016952666
      batch 4000 loss: 0.3120983880454078
      batch 5000 loss: 0.31565852708395686
      batch 6000 loss: 0.28612551190401425
      batch 7000 loss: 0.2727692337973203
      batch 8000 loss: 0.28974862481578023
      batch 9000 loss: 0.3244481874016055
      batch 10000 loss: 0.2969013741684239
      batch 11000 loss: 0.31217384753013905
      batch 12000 loss: 0.3043184281690774
      batch 13000 loss: 0.30284238978490613
      batch 14000 loss: 0.3038783451650779
      batch 15000 loss: 0.30371719542189385
    LOSS train 0.30371719542189385 valid 0.31989288330078125
    EPOCH 5:
      batch 1000 loss: 0.25610274274305084
      batch 2000 loss: 0.26896086010639375
      batch 3000 loss: 0.27507096081992494
      batch 4000 loss: 0.2820371523421054
      batch 5000 loss: 0.2820509227647735
      batch 6000 loss: 0.28371708116561056
      batch 7000 loss: 0.29699021126737535
      batch 8000 loss: 0.2878142494743988
      batch 9000 loss: 0.27784992570866235
      batch 10000 loss: 0.27824696885312344
      batch 11000 loss: 0.2985364936886645
      batch 12000 loss: 0.2745067177004421
      batch 13000 loss: 0.2790810586198547
      batch 14000 loss: 0.27978696544096604
      batch 15000 loss: 0.27251098282725433
    LOSS train 0.27251098282725433 valid 0.31714704632759094




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  20.734 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
