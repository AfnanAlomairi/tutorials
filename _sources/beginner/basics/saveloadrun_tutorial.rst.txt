
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(pretrained=True)
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning:

    The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning:

    Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      0%|          | 1.99M/528M [00:00<00:26, 20.7MB/s]
      1%|1         | 5.68M/528M [00:00<00:18, 28.8MB/s]
      2%|1         | 10.4M/528M [00:00<00:14, 36.9MB/s]
      3%|2         | 14.7M/528M [00:00<00:13, 40.0MB/s]
      4%|3         | 19.0M/528M [00:00<00:12, 41.7MB/s]
      4%|4         | 23.0M/528M [00:00<00:12, 41.5MB/s]
      5%|5         | 28.1M/528M [00:00<00:11, 45.2MB/s]
      7%|6         | 34.3M/528M [00:00<00:10, 51.6MB/s]
      8%|7         | 39.8M/528M [00:00<00:09, 53.2MB/s]
      8%|8         | 44.8M/528M [00:01<00:10, 49.2MB/s]
     10%|9         | 51.4M/528M [00:01<00:09, 54.9MB/s]
     11%|#         | 56.7M/528M [00:01<00:10, 47.5MB/s]
     12%|#1        | 61.5M/528M [00:01<00:12, 38.8MB/s]
     12%|#2        | 65.6M/528M [00:01<00:12, 39.3MB/s]
     14%|#3        | 71.4M/528M [00:01<00:10, 44.6MB/s]
     14%|#4        | 76.0M/528M [00:01<00:11, 41.8MB/s]
     15%|#5        | 81.0M/528M [00:01<00:10, 44.6MB/s]
     16%|#6        | 86.5M/528M [00:02<00:09, 47.9MB/s]
     17%|#7        | 91.2M/528M [00:02<00:10, 42.2MB/s]
     18%|#8        | 95.7M/528M [00:02<00:10, 43.3MB/s]
     19%|#9        | 101M/528M [00:02<00:09, 45.4MB/s] 
     20%|#9        | 105M/528M [00:02<00:10, 44.2MB/s]
     21%|##1       | 111M/528M [00:02<00:08, 48.6MB/s]
     22%|##1       | 116M/528M [00:02<00:08, 48.6MB/s]
     23%|##3       | 122M/528M [00:02<00:08, 50.3MB/s]
     24%|##4       | 127M/528M [00:03<00:09, 42.4MB/s]
     25%|##5       | 133M/528M [00:03<00:08, 47.9MB/s]
     26%|##6       | 138M/528M [00:03<00:10, 38.2MB/s]
     27%|##6       | 142M/528M [00:03<00:13, 30.1MB/s]
     28%|##8       | 148M/528M [00:03<00:10, 36.5MB/s]
     29%|##9       | 154M/528M [00:03<00:09, 42.3MB/s]
     30%|###       | 159M/528M [00:03<00:08, 43.4MB/s]
     31%|###       | 163M/528M [00:03<00:09, 40.4MB/s]
     32%|###2      | 169M/528M [00:04<00:08, 44.9MB/s]
     33%|###2      | 174M/528M [00:04<00:08, 43.5MB/s]
     34%|###3      | 179M/528M [00:04<00:07, 46.5MB/s]
     35%|###4      | 183M/528M [00:04<00:07, 45.3MB/s]
     36%|###5      | 188M/528M [00:04<00:10, 35.2MB/s]
     37%|###6      | 194M/528M [00:04<00:08, 41.3MB/s]
     38%|###7      | 198M/528M [00:04<00:08, 38.5MB/s]
     38%|###8      | 202M/528M [00:04<00:08, 39.5MB/s]
     39%|###9      | 206M/528M [00:05<00:08, 39.7MB/s]
     40%|###9      | 210M/528M [00:05<00:08, 40.0MB/s]
     41%|####1     | 217M/528M [00:05<00:06, 47.6MB/s]
     42%|####2     | 222M/528M [00:05<00:06, 49.2MB/s]
     43%|####2     | 227M/528M [00:05<00:06, 48.3MB/s]
     44%|####3     | 232M/528M [00:05<00:06, 49.3MB/s]
     45%|####4     | 237M/528M [00:05<00:06, 45.0MB/s]
     46%|####5     | 241M/528M [00:05<00:06, 45.7MB/s]
     47%|####6     | 246M/528M [00:05<00:06, 47.6MB/s]
     48%|####7     | 251M/528M [00:06<00:06, 42.3MB/s]
     49%|####8     | 257M/528M [00:06<00:06, 47.1MB/s]
     50%|####9     | 262M/528M [00:06<00:05, 49.6MB/s]
     51%|#####     | 267M/528M [00:06<00:05, 51.4MB/s]
     52%|#####1    | 273M/528M [00:06<00:04, 53.8MB/s]
     53%|#####2    | 279M/528M [00:06<00:04, 57.0MB/s]
     54%|#####3    | 285M/528M [00:06<00:05, 50.3MB/s]
     55%|#####4    | 290M/528M [00:06<00:05, 47.5MB/s]
     56%|#####5    | 295M/528M [00:06<00:05, 47.8MB/s]
     57%|#####6    | 300M/528M [00:07<00:04, 48.7MB/s]
     58%|#####7    | 304M/528M [00:07<00:04, 47.6MB/s]
     59%|#####8    | 309M/528M [00:07<00:06, 37.6MB/s]
     59%|#####9    | 313M/528M [00:07<00:05, 37.9MB/s]
     60%|######    | 318M/528M [00:07<00:05, 37.3MB/s]
     61%|######1   | 322M/528M [00:07<00:06, 34.6MB/s]
     62%|######2   | 328M/528M [00:07<00:05, 41.1MB/s]
     63%|######3   | 335M/528M [00:07<00:04, 48.9MB/s]
     65%|######4   | 341M/528M [00:08<00:03, 52.9MB/s]
     66%|######5   | 347M/528M [00:08<00:03, 55.3MB/s]
     67%|######6   | 352M/528M [00:08<00:03, 48.1MB/s]
     68%|######7   | 358M/528M [00:08<00:03, 50.4MB/s]
     69%|######8   | 364M/528M [00:08<00:03, 50.3MB/s]
     70%|######9   | 369M/528M [00:08<00:03, 47.6MB/s]
     71%|#######1  | 375M/528M [00:08<00:03, 52.6MB/s]
     72%|#######2  | 380M/528M [00:08<00:03, 47.4MB/s]
     73%|#######2  | 385M/528M [00:09<00:03, 47.8MB/s]
     74%|#######3  | 390M/528M [00:09<00:03, 43.6MB/s]
     75%|#######4  | 395M/528M [00:09<00:03, 43.8MB/s]
     76%|#######5  | 400M/528M [00:09<00:03, 42.7MB/s]
     77%|#######6  | 404M/528M [00:09<00:03, 42.7MB/s]
     78%|#######7  | 409M/528M [00:09<00:02, 45.8MB/s]
     78%|#######8  | 414M/528M [00:09<00:02, 45.8MB/s]
     79%|#######9  | 418M/528M [00:09<00:03, 36.5MB/s]
     80%|########  | 423M/528M [00:10<00:02, 40.5MB/s]
     81%|########1 | 428M/528M [00:10<00:03, 34.5MB/s]
     82%|########1 | 431M/528M [00:10<00:03, 30.7MB/s]
     82%|########2 | 434M/528M [00:10<00:03, 29.4MB/s]
     83%|########2 | 437M/528M [00:10<00:03, 26.6MB/s]
     83%|########3 | 440M/528M [00:10<00:03, 26.3MB/s]
     84%|########4 | 446M/528M [00:10<00:02, 34.2MB/s]
     85%|########5 | 451M/528M [00:10<00:02, 39.3MB/s]
     86%|########6 | 455M/528M [00:11<00:02, 30.5MB/s]
     87%|########7 | 460M/528M [00:11<00:02, 34.7MB/s]
     88%|########7 | 463M/528M [00:11<00:02, 32.6MB/s]
     88%|########8 | 467M/528M [00:11<00:01, 32.8MB/s]
     89%|########9 | 471M/528M [00:11<00:01, 35.4MB/s]
     90%|########9 | 474M/528M [00:11<00:01, 34.2MB/s]
     91%|######### | 478M/528M [00:11<00:01, 34.6MB/s]
     91%|#########1| 483M/528M [00:11<00:01, 39.1MB/s]
     92%|#########2| 487M/528M [00:12<00:01, 33.9MB/s]
     93%|#########2| 490M/528M [00:12<00:01, 30.3MB/s]
     94%|#########3| 496M/528M [00:12<00:00, 34.2MB/s]
     95%|#########4| 500M/528M [00:12<00:00, 35.4MB/s]
     96%|#########5| 505M/528M [00:12<00:00, 41.3MB/s]
     97%|#########6| 512M/528M [00:12<00:00, 48.2MB/s]
     98%|#########7| 516M/528M [00:12<00:00, 46.8MB/s]
     99%|#########8| 521M/528M [00:12<00:00, 46.6MB/s]
    100%|#########9| 526M/528M [00:13<00:00, 13.3MB/s]
    100%|##########| 528M/528M [00:14<00:00, 39.1MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.151 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
