
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(weights='IMAGENET1K_V1')
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /root/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      2%|1         | 7.99M/528M [00:00<00:09, 59.6MB/s]
      3%|3         | 16.0M/528M [00:00<00:07, 68.7MB/s]
      4%|4         | 22.6M/528M [00:00<00:25, 20.5MB/s]
      7%|7         | 37.1M/528M [00:01<00:12, 39.8MB/s]
      9%|9         | 48.4M/528M [00:01<00:09, 53.4MB/s]
     11%|#         | 57.7M/528M [00:01<00:08, 55.7MB/s]
     12%|#2        | 65.8M/528M [00:01<00:08, 57.7MB/s]
     14%|#3        | 73.2M/528M [00:01<00:08, 56.9MB/s]
     15%|#5        | 80.0M/528M [00:01<00:07, 59.4MB/s]
     16%|#6        | 86.6M/528M [00:01<00:08, 56.6MB/s]
     18%|#7        | 92.7M/528M [00:01<00:07, 58.3MB/s]
     19%|#8        | 98.8M/528M [00:02<00:09, 47.9MB/s]
     20%|#9        | 104M/528M [00:02<00:10, 41.7MB/s] 
     21%|##1       | 112M/528M [00:02<00:09, 46.2MB/s]
     23%|##2       | 120M/528M [00:02<00:08, 49.5MB/s]
     24%|##4       | 128M/528M [00:02<00:09, 46.4MB/s]
     26%|##5       | 136M/528M [00:02<00:07, 53.3MB/s]
     27%|##7       | 144M/528M [00:03<00:07, 55.1MB/s]
     29%|##8       | 152M/528M [00:03<00:07, 53.8MB/s]
     30%|###       | 160M/528M [00:03<00:06, 55.6MB/s]
     32%|###1      | 168M/528M [00:03<00:06, 55.4MB/s]
     33%|###3      | 176M/528M [00:03<00:06, 60.0MB/s]
     35%|###4      | 184M/528M [00:03<00:06, 57.0MB/s]
     36%|###6      | 192M/528M [00:03<00:06, 53.2MB/s]
     38%|###7      | 200M/528M [00:04<00:07, 48.7MB/s]
     39%|###9      | 208M/528M [00:04<00:06, 54.0MB/s]
     41%|####      | 216M/528M [00:04<00:07, 46.5MB/s]
     42%|####1     | 221M/528M [00:04<00:06, 46.3MB/s]
     43%|####2     | 225M/528M [00:04<00:08, 36.7MB/s]
     44%|####3     | 232M/528M [00:05<00:08, 38.6MB/s]
     45%|####5     | 240M/528M [00:05<00:06, 43.5MB/s]
     47%|####6     | 246M/528M [00:05<00:06, 46.6MB/s]
     48%|####7     | 251M/528M [00:05<00:08, 34.9MB/s]
     49%|####8     | 257M/528M [00:05<00:07, 39.8MB/s]
     50%|#####     | 264M/528M [00:05<00:06, 42.2MB/s]
     52%|#####1    | 272M/528M [00:05<00:05, 50.4MB/s]
     53%|#####3    | 280M/528M [00:06<00:05, 45.1MB/s]
     55%|#####4    | 288M/528M [00:06<00:05, 49.9MB/s]
     56%|#####6    | 296M/528M [00:06<00:04, 52.8MB/s]
     57%|#####7    | 303M/528M [00:06<00:04, 56.5MB/s]
     59%|#####8    | 309M/528M [00:06<00:04, 50.5MB/s]
     60%|#####9    | 314M/528M [00:06<00:04, 45.2MB/s]
     60%|######    | 319M/528M [00:07<00:07, 30.6MB/s]
     61%|######1   | 322M/528M [00:07<00:06, 30.8MB/s]
     62%|######2   | 328M/528M [00:07<00:06, 34.1MB/s]
     64%|######3   | 336M/528M [00:07<00:05, 40.2MB/s]
     65%|######5   | 344M/528M [00:07<00:03, 49.3MB/s]
     67%|######6   | 352M/528M [00:07<00:03, 51.4MB/s]
     68%|######8   | 360M/528M [00:07<00:03, 52.6MB/s]
     69%|######9   | 366M/528M [00:08<00:03, 49.6MB/s]
     70%|#######   | 371M/528M [00:08<00:03, 46.4MB/s]
     71%|#######1  | 376M/528M [00:08<00:03, 43.0MB/s]
     73%|#######2  | 384M/528M [00:08<00:02, 52.0MB/s]
     74%|#######4  | 392M/528M [00:08<00:02, 50.7MB/s]
     76%|#######5  | 400M/528M [00:08<00:02, 55.1MB/s]
     77%|#######7  | 408M/528M [00:08<00:02, 57.6MB/s]
     79%|#######8  | 416M/528M [00:09<00:01, 62.7MB/s]
     80%|########  | 422M/528M [00:09<00:02, 55.0MB/s]
     81%|########1 | 428M/528M [00:09<00:02, 49.6MB/s]
     82%|########1 | 433M/528M [00:09<00:02, 48.3MB/s]
     84%|########3 | 442M/528M [00:09<00:01, 59.4MB/s]
     85%|########5 | 449M/528M [00:09<00:01, 64.5MB/s]
     86%|########6 | 456M/528M [00:09<00:01, 61.7MB/s]
     88%|########7 | 462M/528M [00:09<00:01, 52.5MB/s]
     89%|########8 | 467M/528M [00:10<00:01, 40.4MB/s]
     89%|########9 | 472M/528M [00:10<00:01, 41.4MB/s]
     91%|######### | 480M/528M [00:10<00:00, 50.7MB/s]
     92%|#########1| 485M/528M [00:10<00:00, 48.9MB/s]
     93%|#########3| 492M/528M [00:10<00:00, 54.6MB/s]
     94%|#########4| 498M/528M [00:10<00:00, 50.6MB/s]
     95%|#########5| 504M/528M [00:10<00:00, 48.1MB/s]
     97%|#########7| 512M/528M [00:11<00:00, 51.7MB/s]
     98%|#########8| 519M/528M [00:11<00:00, 56.7MB/s]
     99%|#########9| 525M/528M [00:11<00:00, 51.4MB/s]
    100%|##########| 528M/528M [00:11<00:00, 48.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify ``weights``, i.e. create untrained model
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

Related Tutorials
-----------------
- `Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_
- `Tips for loading an nn.Module from a checkpoint <https://pytorch.org/tutorials/recipes/recipes/module_load_state_dict_tips.html?highlight=loading%20nn%20module%20from%20checkpoint>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.230 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
