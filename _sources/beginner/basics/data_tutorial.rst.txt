
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/data_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_data_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_data_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
**Datasets & DataLoaders** ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
`Save & Load Model <saveloadrun_tutorial.html>`_

Datasets & DataLoaders
======================

.. GENERATED FROM PYTHON SOURCE LINES 18-32

Code for processing data samples can get messy and hard to maintain; we ideally want our dataset code
to be decoupled from our model training code for better readability and modularity.
PyTorch provides two data primitives: ``torch.utils.data.DataLoader`` and ``torch.utils.data.Dataset``
that allow you to use pre-loaded datasets as well as your own data.
``Dataset`` stores the samples and their corresponding labels, and ``DataLoader`` wraps an iterable around
the ``Dataset`` to enable easy access to the samples.

PyTorch domain libraries provide a number of pre-loaded datasets (such as FashionMNIST) that
subclass ``torch.utils.data.Dataset`` and implement functions specific to the particular data.
They can be used to prototype and benchmark your model. You can find them
here: `Image Datasets <https://pytorch.org/vision/stable/datasets.html>`_,
`Text Datasets  <https://pytorch.org/text/stable/datasets.html>`_, and
`Audio Datasets <https://pytorch.org/audio/stable/datasets.html>`_


.. GENERATED FROM PYTHON SOURCE LINES 34-46

Loading a Dataset
-------------------

Here is an example of how to load the `Fashion-MNIST <https://research.zalando.com/project/fashion_mnist/fashion_mnist/>`_ dataset from TorchVision.
Fashion-MNIST is a dataset of Zalando’s article images consisting of 60,000 training examples and 10,000 test examples.
Each example comprises a 28×28 grayscale image and an associated label from one of 10 classes.

We load the `FashionMNIST Dataset <https://pytorch.org/vision/stable/datasets.html#fashion-mnist>`_ with the following parameters:
 - ``root`` is the path where the train/test data is stored,
 - ``train`` specifies training or test dataset,
 - ``download=True`` downloads the data from the internet if it's not available at ``root``.
 - ``transform`` and ``target_transform`` specify the feature and label transformations

.. GENERATED FROM PYTHON SOURCE LINES 46-70

.. code-block:: default



    import torch
    from torch.utils.data import Dataset
    from torchvision import datasets
    from torchvision.transforms import ToTensor
    import matplotlib.pyplot as plt


    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor()
    )

    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor()
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<02:25, 180897.62it/s]
      0%|          | 65536/26421880 [00:00<02:26, 180450.96it/s]
      0%|          | 98304/26421880 [00:00<02:25, 180324.32it/s]
      0%|          | 131072/26421880 [00:00<02:25, 180294.20it/s]
      1%|          | 196608/26421880 [00:00<02:06, 207804.92it/s]
      1%|          | 262144/26421880 [00:01<01:43, 253966.93it/s]
      1%|1         | 294912/26421880 [00:01<01:52, 231901.85it/s]
      1%|1         | 360448/26421880 [00:01<01:36, 270519.83it/s]
      2%|1         | 425984/26421880 [00:01<01:27, 297354.61it/s]
      2%|1         | 491520/26421880 [00:01<01:21, 316699.56it/s]
      2%|2         | 557056/26421880 [00:02<01:17, 332869.86it/s]
      2%|2         | 655360/26421880 [00:02<01:05, 392558.64it/s]
      3%|2         | 753664/26421880 [00:02<00:58, 436884.10it/s]
      3%|3         | 851968/26421880 [00:02<00:54, 468288.67it/s]
      4%|3         | 950272/26421880 [00:02<00:51, 494014.70it/s]
      4%|4         | 1081344/26421880 [00:02<00:45, 558045.04it/s]
      5%|4         | 1212416/26421880 [00:03<00:38, 658121.52it/s]
      5%|4         | 1310720/26421880 [00:03<00:37, 671644.25it/s]
      5%|5         | 1441792/26421880 [00:03<00:33, 752794.63it/s]
      6%|5         | 1540096/26421880 [00:03<00:33, 740543.48it/s]
      6%|6         | 1703936/26421880 [00:03<00:28, 875229.25it/s]
      7%|6         | 1835008/26421880 [00:03<00:27, 896029.14it/s]
      8%|7         | 2031616/26421880 [00:03<00:25, 971695.21it/s]
      9%|8         | 2260992/26421880 [00:04<00:20, 1155613.61it/s]
      9%|9         | 2392064/26421880 [00:04<00:21, 1113412.37it/s]
     10%|#         | 2654208/26421880 [00:04<00:17, 1336974.98it/s]
     11%|#         | 2818048/26421880 [00:04<00:18, 1293142.37it/s]
     12%|#1        | 3112960/26421880 [00:04<00:15, 1553461.99it/s]
     13%|#2        | 3309568/26421880 [00:04<00:15, 1514670.93it/s]
     14%|#3        | 3637248/26421880 [00:04<00:12, 1786129.38it/s]
     15%|#4        | 3866624/26421880 [00:05<00:12, 1748126.61it/s]
     16%|#6        | 4259840/26421880 [00:05<00:10, 2092982.37it/s]
     17%|#7        | 4521984/26421880 [00:05<00:10, 2034643.75it/s]
     19%|#8        | 4980736/26421880 [00:05<00:08, 2436599.74it/s]
     20%|#9        | 5275648/26421880 [00:05<00:08, 2350915.80it/s]
     22%|##1       | 5799936/26421880 [00:05<00:07, 2806711.34it/s]
     23%|##3       | 6127616/26421880 [00:05<00:07, 2681359.13it/s]
     26%|##5       | 6750208/26421880 [00:06<00:06, 3253253.96it/s]
     27%|##7       | 7143424/26421880 [00:06<00:06, 3133319.12it/s]
     30%|##9       | 7831552/26421880 [00:06<00:04, 3724903.38it/s]
     31%|###1      | 8290304/26421880 [00:06<00:05, 3606882.36it/s]
     34%|###4      | 9109504/26421880 [00:06<00:03, 4337829.37it/s]
     36%|###6      | 9633792/26421880 [00:06<00:04, 4177061.21it/s]
     40%|####      | 10584064/26421880 [00:06<00:03, 5023619.58it/s]
     42%|####2     | 11173888/26421880 [00:06<00:03, 4852297.80it/s]
     46%|####5     | 12025856/26421880 [00:07<00:02, 5730740.93it/s]
     49%|####8     | 12910592/26421880 [00:07<00:02, 6059684.12it/s]
     52%|#####1    | 13631488/26421880 [00:07<00:02, 5861444.58it/s]
     55%|#####5    | 14647296/26421880 [00:07<00:01, 6925942.00it/s]
     60%|#####9    | 15728640/26421880 [00:07<00:01, 7381065.12it/s]
     63%|######2   | 16613376/26421880 [00:07<00:01, 7139806.78it/s]
     67%|######7   | 17825792/26421880 [00:07<00:01, 8398630.16it/s]
     73%|#######2  | 19169280/26421880 [00:07<00:00, 9005907.10it/s]
     77%|#######6  | 20217856/26421880 [00:08<00:00, 8656714.18it/s]
     82%|########2 | 21725184/26421880 [00:08<00:00, 10270757.99it/s]
     88%|########8 | 23330816/26421880 [00:08<00:00, 10935710.41it/s]
     93%|#########3| 24608768/26421880 [00:08<00:00, 10525441.60it/s]
    100%|#########9| 26411008/26421880 [00:08<00:00, 12430949.18it/s]
    100%|##########| 26421880/26421880 [00:08<00:00, 3091092.24it/s] 
    Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 330307.30it/s]
    Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|1         | 65536/4422102 [00:00<00:12, 359166.35it/s]
      4%|4         | 196608/4422102 [00:00<00:07, 570728.44it/s]
      8%|8         | 360448/4422102 [00:00<00:05, 721347.02it/s]
     13%|#2        | 557056/4422102 [00:00<00:04, 861550.42it/s]
     17%|#7        | 753664/4422102 [00:00<00:03, 941799.73it/s]
     22%|##2       | 983040/4422102 [00:01<00:03, 1049104.07it/s]
     28%|##8       | 1245184/4422102 [00:01<00:02, 1176729.74it/s]
     35%|###4      | 1540096/4422102 [00:01<00:02, 1314090.87it/s]
     41%|####1     | 1835008/4422102 [00:01<00:01, 1411745.47it/s]
     49%|####8     | 2162688/4422102 [00:01<00:01, 1533810.40it/s]
     58%|#####7    | 2555904/4422102 [00:02<00:01, 1720775.94it/s]
     67%|######6   | 2949120/4422102 [00:02<00:00, 1857067.09it/s]
     77%|#######7  | 3407872/4422102 [00:02<00:00, 2051264.43it/s]
     88%|########8 | 3899392/4422102 [00:02<00:00, 2252261.46it/s]
    100%|##########| 4422102/4422102 [00:02<00:00, 1670338.29it/s]
    Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 38148899.28it/s]
    Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw





.. GENERATED FROM PYTHON SOURCE LINES 71-76

Iterating and Visualizing the Dataset
-------------------------------------

We can index ``Datasets`` manually like a list: ``training_data[index]``.
We use ``matplotlib`` to visualize some samples in our training data.

.. GENERATED FROM PYTHON SOURCE LINES 76-100

.. code-block:: default


    labels_map = {
        0: "T-Shirt",
        1: "Trouser",
        2: "Pullover",
        3: "Dress",
        4: "Coat",
        5: "Sandal",
        6: "Shirt",
        7: "Sneaker",
        8: "Bag",
        9: "Ankle Boot",
    }
    figure = plt.figure(figsize=(8, 8))
    cols, rows = 3, 3
    for i in range(1, cols * rows + 1):
        sample_idx = torch.randint(len(training_data), size=(1,)).item()
        img, label = training_data[sample_idx]
        figure.add_subplot(rows, cols, i)
        plt.title(labels_map[label])
        plt.axis("off")
        plt.imshow(img.squeeze(), cmap="gray")
    plt.show()




.. image-sg:: /beginner/basics/images/sphx_glr_data_tutorial_001.png
   :alt: Ankle Boot, Shirt, Bag, Ankle Boot, Trouser, Sandal, Coat, Sandal, Pullover
   :srcset: /beginner/basics/images/sphx_glr_data_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-104

..
 .. figure:: /_static/img/basics/fashion_mnist.png
   :alt: fashion_mnist

.. GENERATED FROM PYTHON SOURCE LINES 107-109

--------------


.. GENERATED FROM PYTHON SOURCE LINES 111-119

Creating a Custom Dataset for your files
---------------------------------------------------

A custom Dataset class must implement three functions: `__init__`, `__len__`, and `__getitem__`.
Take a look at this implementation; the FashionMNIST images are stored
in a directory ``img_dir``, and their labels are stored separately in a CSV file ``annotations_file``.

In the next sections, we'll break down what's happening in each of these functions.

.. GENERATED FROM PYTHON SOURCE LINES 119-146

.. code-block:: default



    import os
    import pandas as pd
    from torchvision.io import read_image

    class CustomImageDataset(Dataset):
        def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
            self.img_labels = pd.read_csv(annotations_file)
            self.img_dir = img_dir
            self.transform = transform
            self.target_transform = target_transform

        def __len__(self):
            return len(self.img_labels)

        def __getitem__(self, idx):
            img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
            image = read_image(img_path)
            label = self.img_labels.iloc[idx, 1]
            if self.transform:
                image = self.transform(image)
            if self.target_transform:
                label = self.target_transform(label)
            return image, label









.. GENERATED FROM PYTHON SOURCE LINES 147-160

``__init__``
^^^^^^^^^^^^^^^^^^^^

The __init__ function is run once when instantiating the Dataset object. We initialize
the directory containing the images, the annotations file, and both transforms (covered
in more detail in the next section).

The labels.csv file looks like: ::

    tshirt1.jpg, 0
    tshirt2.jpg, 0
    ......
    ankleboot999.jpg, 9

.. GENERATED FROM PYTHON SOURCE LINES 160-169

.. code-block:: default



    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
        self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform









.. GENERATED FROM PYTHON SOURCE LINES 170-176

``__len__``
^^^^^^^^^^^^^^^^^^^^

The __len__ function returns the number of samples in our dataset.

Example:

.. GENERATED FROM PYTHON SOURCE LINES 176-182

.. code-block:: default



    def __len__(self):
        return len(self.img_labels)









.. GENERATED FROM PYTHON SOURCE LINES 183-190

``__getitem__``
^^^^^^^^^^^^^^^^^^^^

The __getitem__ function loads and returns a sample from the dataset at the given index ``idx``.
Based on the index, it identifies the image's location on disk, converts that to a tensor using ``read_image``, retrieves the
corresponding label from the csv data in ``self.img_labels``, calls the transform functions on them (if applicable), and returns the
tensor image and corresponding label in a tuple.

.. GENERATED FROM PYTHON SOURCE LINES 190-202

.. code-block:: default


    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
        image = read_image(img_path)
        label = self.img_labels.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        return image, label









.. GENERATED FROM PYTHON SOURCE LINES 203-205

--------------


.. GENERATED FROM PYTHON SOURCE LINES 208-215

Preparing your data for training with DataLoaders
-------------------------------------------------
The ``Dataset`` retrieves our dataset's features and labels one sample at a time. While training a model, we typically want to
pass samples in "minibatches", reshuffle the data at every epoch to reduce model overfitting, and use Python's ``multiprocessing`` to
speed up data retrieval.

``DataLoader`` is an iterable that abstracts this complexity for us in an easy API.

.. GENERATED FROM PYTHON SOURCE LINES 215-221

.. code-block:: default


    from torch.utils.data import DataLoader

    train_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)
    test_dataloader = DataLoader(test_data, batch_size=64, shuffle=True)








.. GENERATED FROM PYTHON SOURCE LINES 222-229

Iterate through the DataLoader
-------------------------------

We have loaded that dataset into the ``DataLoader`` and can iterate through the dataset as needed.
Each iteration below returns a batch of ``train_features`` and ``train_labels`` (containing ``batch_size=64`` features and labels respectively).
Because we specified ``shuffle=True``, after we iterate over all batches the data is shuffled (for finer-grained control over
the data loading order, take a look at `Samplers <https://pytorch.org/docs/stable/data.html#data-loading-order-and-sampler>`_).

.. GENERATED FROM PYTHON SOURCE LINES 229-240

.. code-block:: default


    # Display image and label.
    train_features, train_labels = next(iter(train_dataloader))
    print(f"Feature batch shape: {train_features.size()}")
    print(f"Labels batch shape: {train_labels.size()}")
    img = train_features[0].squeeze()
    label = train_labels[0]
    plt.imshow(img, cmap="gray")
    plt.show()
    print(f"Label: {label}")




.. image-sg:: /beginner/basics/images/sphx_glr_data_tutorial_002.png
   :alt: data tutorial
   :srcset: /beginner/basics/images/sphx_glr_data_tutorial_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Feature batch shape: torch.Size([64, 1, 28, 28])
    Labels batch shape: torch.Size([64])
    Label: 5




.. GENERATED FROM PYTHON SOURCE LINES 241-243

--------------


.. GENERATED FROM PYTHON SOURCE LINES 245-248

Further Reading
----------------
- `torch.utils.data API <https://pytorch.org/docs/stable/data.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.153 seconds)


.. _sphx_glr_download_beginner_basics_data_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: data_tutorial.py <data_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: data_tutorial.ipynb <data_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
